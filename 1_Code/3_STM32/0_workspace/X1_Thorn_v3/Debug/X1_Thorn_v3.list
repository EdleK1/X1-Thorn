
X1_Thorn_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a28  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08012cc8  08012cc8  00013cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080131c4  080131c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080131cc  080131cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080131d0  080131d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  080131d4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d988  240001dc  080133b0  000151dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400db64  080133b0  00015b64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000151dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002facf  00000000  00000000  0001520a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c59  00000000  00000000  00044cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002208  00000000  00000000  0004a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a62  00000000  00000000  0004cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008bfd  00000000  00000000  0004e5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ff83  00000000  00000000  0005719f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018a5b9  00000000  00000000  00087122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002116db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009d5c  00000000  00000000  00211720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  0021b47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012cb0 	.word	0x08012cb0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08012cb0 	.word	0x08012cb0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <TIM_PeriodElapsedCallback_TIM3>:
	return 1;
}


void TIM_PeriodElapsedCallback_TIM3(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	uint32_t idr = GPIOD->IDR;
 80006c2:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <TIM_PeriodElapsedCallback_TIM3+0x11c>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	60fb      	str	r3, [r7, #12]
	uint8_t motor1bit  = (idr >> 8) & 1;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	72fb      	strb	r3, [r7, #11]
	uint8_t motor2bit  = (idr >> 9) & 1;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	0a5b      	lsrs	r3, r3, #9
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	72bb      	strb	r3, [r7, #10]

	if (RX_motor1_started == 0 && RX_motor1_finished == 0)
 80006e0:	4b3e      	ldr	r3, [pc, #248]	@ (80007dc <TIM_PeriodElapsedCallback_TIM3+0x120>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10a      	bne.n	80006fe <TIM_PeriodElapsedCallback_TIM3+0x42>
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <TIM_PeriodElapsedCallback_TIM3+0x124>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <TIM_PeriodElapsedCallback_TIM3+0x42>
	{
		if (motor1bit == 0)
 80006f0:	7afb      	ldrb	r3, [r7, #11]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d120      	bne.n	8000738 <TIM_PeriodElapsedCallback_TIM3+0x7c>
		{
			RX_motor1_started = 1;
 80006f6:	4b39      	ldr	r3, [pc, #228]	@ (80007dc <TIM_PeriodElapsedCallback_TIM3+0x120>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		if (motor1bit == 0)
 80006fc:	e01c      	b.n	8000738 <TIM_PeriodElapsedCallback_TIM3+0x7c>
		}
	}
	else if (RX_motor1_started == 1 && RX_motor1_finished == 0)
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <TIM_PeriodElapsedCallback_TIM3+0x120>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d118      	bne.n	8000738 <TIM_PeriodElapsedCallback_TIM3+0x7c>
 8000706:	4b36      	ldr	r3, [pc, #216]	@ (80007e0 <TIM_PeriodElapsedCallback_TIM3+0x124>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d114      	bne.n	8000738 <TIM_PeriodElapsedCallback_TIM3+0x7c>
	{
		if (motor1bitcnt < 20)
 800070e:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <TIM_PeriodElapsedCallback_TIM3+0x128>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b13      	cmp	r3, #19
 8000714:	d80d      	bhi.n	8000732 <TIM_PeriodElapsedCallback_TIM3+0x76>
		{
			rawtelem1 = (rawtelem1 << 1) | motor1bit;
 8000716:	4b34      	ldr	r3, [pc, #208]	@ (80007e8 <TIM_PeriodElapsedCallback_TIM3+0x12c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	005a      	lsls	r2, r3, #1
 800071c:	7afb      	ldrb	r3, [r7, #11]
 800071e:	4313      	orrs	r3, r2
 8000720:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <TIM_PeriodElapsedCallback_TIM3+0x12c>)
 8000722:	6013      	str	r3, [r2, #0]
			motor1bitcnt++;
 8000724:	4b2f      	ldr	r3, [pc, #188]	@ (80007e4 <TIM_PeriodElapsedCallback_TIM3+0x128>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <TIM_PeriodElapsedCallback_TIM3+0x128>)
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	e002      	b.n	8000738 <TIM_PeriodElapsedCallback_TIM3+0x7c>
		}
		else
		{
			RX_motor1_finished = 1;
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <TIM_PeriodElapsedCallback_TIM3+0x124>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
		}
	}


	if (RX_motor2_started == 0 && RX_motor2_finished == 0)
 8000738:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <TIM_PeriodElapsedCallback_TIM3+0x130>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10a      	bne.n	8000756 <TIM_PeriodElapsedCallback_TIM3+0x9a>
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <TIM_PeriodElapsedCallback_TIM3+0x134>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d106      	bne.n	8000756 <TIM_PeriodElapsedCallback_TIM3+0x9a>
	{
		if (motor2bit == 0)
 8000748:	7abb      	ldrb	r3, [r7, #10]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d120      	bne.n	8000790 <TIM_PeriodElapsedCallback_TIM3+0xd4>
		{
			RX_motor2_started = 1;
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <TIM_PeriodElapsedCallback_TIM3+0x130>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
		if (motor2bit == 0)
 8000754:	e01c      	b.n	8000790 <TIM_PeriodElapsedCallback_TIM3+0xd4>
		}
	}
	else if (RX_motor2_started == 1 && RX_motor2_finished == 0)
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <TIM_PeriodElapsedCallback_TIM3+0x130>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d118      	bne.n	8000790 <TIM_PeriodElapsedCallback_TIM3+0xd4>
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <TIM_PeriodElapsedCallback_TIM3+0x134>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d114      	bne.n	8000790 <TIM_PeriodElapsedCallback_TIM3+0xd4>
	{
		if (motor2bitcnt < 20)
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <TIM_PeriodElapsedCallback_TIM3+0x138>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b13      	cmp	r3, #19
 800076c:	d80d      	bhi.n	800078a <TIM_PeriodElapsedCallback_TIM3+0xce>
		{
			rawtelem2 = (rawtelem2 << 1) | motor2bit;
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <TIM_PeriodElapsedCallback_TIM3+0x13c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	005a      	lsls	r2, r3, #1
 8000774:	7abb      	ldrb	r3, [r7, #10]
 8000776:	4313      	orrs	r3, r2
 8000778:	4a1f      	ldr	r2, [pc, #124]	@ (80007f8 <TIM_PeriodElapsedCallback_TIM3+0x13c>)
 800077a:	6013      	str	r3, [r2, #0]
			motor2bitcnt++;
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <TIM_PeriodElapsedCallback_TIM3+0x138>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <TIM_PeriodElapsedCallback_TIM3+0x138>)
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e002      	b.n	8000790 <TIM_PeriodElapsedCallback_TIM3+0xd4>
		}
		else
		{
			RX_motor2_finished = 1;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <TIM_PeriodElapsedCallback_TIM3+0x134>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
		}
	}


	if (RX_motor1_finished && RX_motor2_finished)
 8000790:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <TIM_PeriodElapsedCallback_TIM3+0x124>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d01a      	beq.n	80007ce <TIM_PeriodElapsedCallback_TIM3+0x112>
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <TIM_PeriodElapsedCallback_TIM3+0x134>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d016      	beq.n	80007ce <TIM_PeriodElapsedCallback_TIM3+0x112>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 80007a0:	4816      	ldr	r0, [pc, #88]	@ (80007fc <TIM_PeriodElapsedCallback_TIM3+0x140>)
 80007a2:	f009 f8f7 	bl	8009994 <HAL_TIM_Base_Stop_IT>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR(xDshotRxDoneSemaphoreHandle, &xHigherPriorityTaskWoken);
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <TIM_PeriodElapsedCallback_TIM3+0x144>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f00d fc60 	bl	800e078 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d007      	beq.n	80007ce <TIM_PeriodElapsedCallback_TIM3+0x112>
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <TIM_PeriodElapsedCallback_TIM3+0x148>)
 80007c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	f3bf 8f6f 	isb	sy
	}
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	58020c00 	.word	0x58020c00
 80007dc:	240001f8 	.word	0x240001f8
 80007e0:	240001f9 	.word	0x240001f9
 80007e4:	240001fa 	.word	0x240001fa
 80007e8:	240001fc 	.word	0x240001fc
 80007ec:	24000200 	.word	0x24000200
 80007f0:	24000201 	.word	0x24000201
 80007f4:	24000202 	.word	0x24000202
 80007f8:	24000204 	.word	0x24000204
 80007fc:	24008e10 	.word	0x24008e10
 8000800:	24000208 	.word	0x24000208
 8000804:	e000ed04 	.word	0xe000ed04

08000808 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a29      	ldr	r2, [pc, #164]	@ (80008b8 <HAL_UART_RxCpltCallback+0xb0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d14b      	bne.n	80008b0 <HAL_UART_RxCpltCallback+0xa8>
    {
        // 1) Clear Overrun just in case
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8000818:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <HAL_UART_RxCpltCallback+0xb0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2208      	movs	r2, #8
 800081e:	621a      	str	r2, [r3, #32]

        // 2) State machine
        switch (frame_state)
 8000820:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <HAL_UART_RxCpltCallback+0xb4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d01d      	beq.n	8000864 <HAL_UART_RxCpltCallback+0x5c>
 8000828:	2b02      	cmp	r3, #2
 800082a:	dc3c      	bgt.n	80008a6 <HAL_UART_RxCpltCallback+0x9e>
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <HAL_UART_RxCpltCallback+0x2e>
 8000830:	2b01      	cmp	r3, #1
 8000832:	d008      	beq.n	8000846 <HAL_UART_RxCpltCallback+0x3e>
 8000834:	e037      	b.n	80008a6 <HAL_UART_RxCpltCallback+0x9e>
        {
            case SYNC_WAIT_1:
                if (rx_byte == 0x55)
 8000836:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <HAL_UART_RxCpltCallback+0xb8>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b55      	cmp	r3, #85	@ 0x55
 800083c:	d130      	bne.n	80008a0 <HAL_UART_RxCpltCallback+0x98>
                    frame_state = SYNC_WAIT_2;
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <HAL_UART_RxCpltCallback+0xb4>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
                break;
 8000844:	e02c      	b.n	80008a0 <HAL_UART_RxCpltCallback+0x98>

            case SYNC_WAIT_2:
                if (rx_byte == 0xAA)
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <HAL_UART_RxCpltCallback+0xb8>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2baa      	cmp	r3, #170	@ 0xaa
 800084c:	d106      	bne.n	800085c <HAL_UART_RxCpltCallback+0x54>
                {
                    frame_state = SYNC_COLLECT;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_UART_RxCpltCallback+0xb4>)
 8000850:	2202      	movs	r2, #2
 8000852:	701a      	strb	r2, [r3, #0]
                    collect_count = 0;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
                }
                else
                    frame_state = SYNC_WAIT_1; // false alarm, restart
                break;
 800085a:	e024      	b.n	80008a6 <HAL_UART_RxCpltCallback+0x9e>
                    frame_state = SYNC_WAIT_1; // false alarm, restart
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_UART_RxCpltCallback+0xb4>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
                break;
 8000862:	e020      	b.n	80008a6 <HAL_UART_RxCpltCallback+0x9e>

            case SYNC_COLLECT:
                collect_buf[collect_count++] = rx_byte;
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	b2d1      	uxtb	r1, r2
 800086c:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 800086e:	7011      	strb	r1, [r2, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <HAL_UART_RxCpltCallback+0xb8>)
 8000874:	7819      	ldrb	r1, [r3, #0]
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <HAL_UART_RxCpltCallback+0xc0>)
 8000878:	5499      	strb	r1, [r3, r2]
                if (collect_count >= sizeof(collect_buf))
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_UART_RxCpltCallback+0xbc>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b13      	cmp	r3, #19
 8000880:	d910      	bls.n	80008a4 <HAL_UART_RxCpltCallback+0x9c>
                {
                    // got full payload: copy to floats
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <HAL_UART_RxCpltCallback+0xc4>)
 8000884:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_UART_RxCpltCallback+0xc0>)
 8000886:	4614      	mov	r4, r2
 8000888:	461d      	mov	r5, r3
 800088a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088e:	682b      	ldr	r3, [r5, #0]
 8000890:	6023      	str	r3, [r4, #0]
                    uart_data_ready = true;
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_UART_RxCpltCallback+0xc8>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
                    // restart framing
                    frame_state = SYNC_WAIT_1;
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <HAL_UART_RxCpltCallback+0xb4>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800089e:	e001      	b.n	80008a4 <HAL_UART_RxCpltCallback+0x9c>
                break;
 80008a0:	bf00      	nop
 80008a2:	e000      	b.n	80008a6 <HAL_UART_RxCpltCallback+0x9e>
                break;
 80008a4:	bf00      	nop
        }

        // 3) re-arm for next byte
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	4905      	ldr	r1, [pc, #20]	@ (80008c0 <HAL_UART_RxCpltCallback+0xb8>)
 80008aa:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <HAL_UART_RxCpltCallback+0xb0>)
 80008ac:	f00a fa9c 	bl	800ade8 <HAL_UART_Receive_IT>
    }
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}
 80008b8:	24008f98 	.word	0x24008f98
 80008bc:	24000226 	.word	0x24000226
 80008c0:	24000224 	.word	0x24000224
 80008c4:	24000225 	.word	0x24000225
 80008c8:	24000228 	.word	0x24000228
 80008cc:	24000210 	.word	0x24000210
 80008d0:	2400020c 	.word	0x2400020c

080008d4 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_UART_ErrorCallback+0x2c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d108      	bne.n	80008f6 <HAL_UART_ErrorCallback+0x22>
    {
        // Clear the error flags
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_UART_ErrorCallback+0x2c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2208      	movs	r2, #8
 80008ea:	621a      	str	r2, [r3, #32]
        // Optionally log huart5.ErrorCode
        // Re-arm reception so you don’t lock up
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80008ec:	2201      	movs	r2, #1
 80008ee:	4905      	ldr	r1, [pc, #20]	@ (8000904 <HAL_UART_ErrorCallback+0x30>)
 80008f0:	4803      	ldr	r0, [pc, #12]	@ (8000900 <HAL_UART_ErrorCallback+0x2c>)
 80008f2:	f00a fa79 	bl	800ade8 <HAL_UART_Receive_IT>
    }
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	24008f98 	.word	0x24008f98
 8000904:	24000224 	.word	0x24000224

08000908 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000920:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000922:	4a2a      	ldr	r2, [pc, #168]	@ (80009cc <MX_ADC3_Init+0xc4>)
 8000924:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000926:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800092c:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000932:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000934:	2204      	movs	r2, #4
 8000936:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000938:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800093e:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000944:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000946:	2201      	movs	r2, #1
 8000948:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 8000978:	2201      	movs	r2, #1
 800097a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800097c:	4812      	ldr	r0, [pc, #72]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 800097e:	f001 fcf9 	bl	8002374 <HAL_ADC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000988:	f000 fb3c 	bl	8001004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800098c:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_ADC3_Init+0xc8>)
 800098e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000990:	2306      	movs	r3, #6
 8000992:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000998:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800099c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099e:	2304      	movs	r3, #4
 80009a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <MX_ADC3_Init+0xc0>)
 80009b0:	f001 fe82 	bl	80026b8 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80009ba:	f000 fb23 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400023c 	.word	0x2400023c
 80009cc:	58026000 	.word	0x58026000
 80009d0:	cb840000 	.word	0xcb840000

080009d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0b4      	sub	sp, #208	@ 0xd0
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	22c0      	movs	r2, #192	@ 0xc0
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f010 fae7 	bl	8010fb8 <memset>
  if(adcHandle->Instance==ADC3)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <HAL_ADC_MspInit+0x8c>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d131      	bne.n	8000a58 <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009f8:	f04f 0300 	mov.w	r3, #0
 80009fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 6;
 8000a00:	2306      	movs	r3, #6
 8000a02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 8000a04:	2328      	movs	r3, #40	@ 0x28
 8000a06:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 f8a6 	bl	8006b7c <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000a36:	f000 fae5 	bl	8001004 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_ADC_MspInit+0x90>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_ADC_MspInit+0x90>)
 8000a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_ADC_MspInit+0x90>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a58:	bf00      	nop
 8000a5a:	37d0      	adds	r7, #208	@ 0xd0
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58026000 	.word	0x58026000
 8000a64:	58024400 	.word	0x58024400

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_DMA_Init+0x4c>)
 8000a70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a74:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <MX_DMA_Init+0x4c>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <MX_DMA_Init+0x4c>)
 8000a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2105      	movs	r1, #5
 8000a90:	200b      	movs	r0, #11
 8000a92:	f002 fac5 	bl	8003020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a96:	200b      	movs	r0, #11
 8000a98:	f002 fadc 	bl	8003054 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	200c      	movs	r0, #12
 8000aa2:	f002 fabd 	bl	8003020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aa6:	200c      	movs	r0, #12
 8000aa8:	f002 fad4 	bl	8003054 <HAL_NVIC_EnableIRQ>

}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ESCTaskSemaphore */
  ESCTaskSemaphoreHandle = osSemaphoreNew(1, 0, &ESCTaskSemaphore_attributes);
 8000abc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_FREERTOS_Init+0x78>)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f00c fe13 	bl	800d6ec <osSemaphoreNew>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b34 <MX_FREERTOS_Init+0x7c>)
 8000aca:	6013      	str	r3, [r2, #0]

  /* creation of ControlTaskSemaphore */
  ControlTaskSemaphoreHandle = osSemaphoreNew(1, 0, &ControlTaskSemaphore_attributes);
 8000acc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b38 <MX_FREERTOS_Init+0x80>)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f00c fe0b 	bl	800d6ec <osSemaphoreNew>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a18      	ldr	r2, [pc, #96]	@ (8000b3c <MX_FREERTOS_Init+0x84>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* creation of TestsTaskSemaphore */
  TestsTaskSemaphoreHandle = osSemaphoreNew(1, 0, &TestsTaskSemaphore_attributes);
 8000adc:	4a18      	ldr	r2, [pc, #96]	@ (8000b40 <MX_FREERTOS_Init+0x88>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f00c fe03 	bl	800d6ec <osSemaphoreNew>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a16      	ldr	r2, [pc, #88]	@ (8000b44 <MX_FREERTOS_Init+0x8c>)
 8000aea:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8000aec:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <MX_FREERTOS_Init+0x90>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4816      	ldr	r0, [pc, #88]	@ (8000b4c <MX_FREERTOS_Init+0x94>)
 8000af2:	f00c fd69 	bl	800d5c8 <osThreadNew>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <MX_FREERTOS_Init+0x98>)
 8000afa:	6013      	str	r3, [r2, #0]

  /* creation of MonitoringTask */
  MonitoringTaskHandle = osThreadNew(StartMonitoringTask, NULL, &MonitoringTask_attributes);
 8000afc:	4a15      	ldr	r2, [pc, #84]	@ (8000b54 <MX_FREERTOS_Init+0x9c>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4815      	ldr	r0, [pc, #84]	@ (8000b58 <MX_FREERTOS_Init+0xa0>)
 8000b02:	f00c fd61 	bl	800d5c8 <osThreadNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <MX_FREERTOS_Init+0xa4>)
 8000b0a:	6013      	str	r3, [r2, #0]

  /* creation of ESCTask */
  ESCTaskHandle = osThreadNew(StartESCTask, NULL, &ESCTask_attributes);
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <MX_FREERTOS_Init+0xa8>)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4814      	ldr	r0, [pc, #80]	@ (8000b64 <MX_FREERTOS_Init+0xac>)
 8000b12:	f00c fd59 	bl	800d5c8 <osThreadNew>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <MX_FREERTOS_Init+0xb0>)
 8000b1a:	6013      	str	r3, [r2, #0]

  /* creation of TestsTask */
  TestsTaskHandle = osThreadNew(StartTestsTask, NULL, &TestsTask_attributes);
 8000b1c:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <MX_FREERTOS_Init+0xb4>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <MX_FREERTOS_Init+0xb8>)
 8000b22:	f00c fd51 	bl	800d5c8 <osThreadNew>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <MX_FREERTOS_Init+0xbc>)
 8000b2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08012de0 	.word	0x08012de0
 8000b34:	24008b50 	.word	0x24008b50
 8000b38:	08012df0 	.word	0x08012df0
 8000b3c:	24008ba4 	.word	0x24008ba4
 8000b40:	08012e00 	.word	0x08012e00
 8000b44:	24008bf8 	.word	0x24008bf8
 8000b48:	08012d50 	.word	0x08012d50
 8000b4c:	08000b79 	.word	0x08000b79
 8000b50:	240002a0 	.word	0x240002a0
 8000b54:	08012d74 	.word	0x08012d74
 8000b58:	08000b85 	.word	0x08000b85
 8000b5c:	2400834c 	.word	0x2400834c
 8000b60:	08012d98 	.word	0x08012d98
 8000b64:	08000b91 	.word	0x08000b91
 8000b68:	240085f8 	.word	0x240085f8
 8000b6c:	08012dbc 	.word	0x08012dbc
 8000b70:	08000b9d 	.word	0x08000b9d
 8000b74:	240088a4 	.word	0x240088a4

08000b78 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */

//	Control_Init();

  /* Infinite loop */
  for(;;)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <StartControlTask+0x8>

08000b84 <StartMonitoringTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMonitoringTask */
void StartMonitoringTask(void *argument)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMonitoringTask */
  /* Infinite loop */
  for(;;)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <StartMonitoringTask+0x8>

08000b90 <StartESCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartESCTask */
void StartESCTask(void *argument)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartESCTask */

//	ESC_Init();

  /* Infinite loop */
  for(;;)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <StartESCTask+0x8>

08000b9c <StartTestsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTestsTask */
void StartTestsTask(void *argument)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTestsTask */

//  Tests_Init();

  /* Infinite loop */
  for(;;)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <StartTestsTask+0x8>

08000ba8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	@ 0x30
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b50      	ldr	r3, [pc, #320]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bce:	4b4c      	ldr	r3, [pc, #304]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be2:	4a47      	ldr	r2, [pc, #284]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bec:	4b44      	ldr	r3, [pc, #272]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	4a3f      	ldr	r2, [pc, #252]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b39      	ldr	r3, [pc, #228]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1e:	4a38      	ldr	r2, [pc, #224]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c28:	4b35      	ldr	r3, [pc, #212]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b32      	ldr	r3, [pc, #200]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a30      	ldr	r2, [pc, #192]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a29      	ldr	r2, [pc, #164]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	4823      	ldr	r0, [pc, #140]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000c78:	f004 fdd0 	bl	800581c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000c82:	4820      	ldr	r0, [pc, #128]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000c84:	f004 fdca 	bl	800581c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4819      	ldr	r0, [pc, #100]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000ca0:	f004 fc0c 	bl	80054bc <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4813      	ldr	r0, [pc, #76]	@ (8000d08 <MX_GPIO_Init+0x160>)
 8000cba:	f004 fbff 	bl	80054bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8000cbe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000cd8:	f004 fbf0 	bl	80054bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DShotRX_MOTOR1_Pin DShotRX_MOTOR2_Pin */
  GPIO_InitStruct.Pin = DShotRX_MOTOR1_Pin|DShotRX_MOTOR2_Pin;
 8000cdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <MX_GPIO_Init+0x164>)
 8000cf2:	f004 fbe3 	bl	80054bc <HAL_GPIO_Init>

}
 8000cf6:	bf00      	nop
 8000cf8:	3730      	adds	r7, #48	@ 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021000 	.word	0x58021000
 8000d08:	58020800 	.word	0x58020800
 8000d0c:	58020c00 	.word	0x58020c00

08000d10 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d16:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <MX_I2C2_Init+0x78>)
 8000d18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <MX_I2C2_Init+0x7c>)
 8000d1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d4a:	480e      	ldr	r0, [pc, #56]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d4c:	f004 fd80 	bl	8005850 <HAL_I2C_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d56:	f000 f955 	bl	8001004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4809      	ldr	r0, [pc, #36]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d5e:	f004 fe13 	bl	8005988 <HAL_I2CEx_ConfigAnalogFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f000 f94c 	bl	8001004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_I2C2_Init+0x74>)
 8000d70:	f004 fe55 	bl	8005a1e <HAL_I2CEx_ConfigDigitalFilter>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f943 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	24008c4c 	.word	0x24008c4c
 8000d88:	40005800 	.word	0x40005800
 8000d8c:	307075b1 	.word	0x307075b1

08000d90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0ba      	sub	sp, #232	@ 0xe8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	22c0      	movs	r2, #192	@ 0xc0
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f010 f901 	bl	8010fb8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <HAL_I2C_MspInit+0xc8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d146      	bne.n	8000e4e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000dc0:	f04f 0208 	mov.w	r2, #8
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fed0 	bl	8006b7c <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000de2:	f000 f90f 	bl	8001004 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <HAL_I2C_MspInit+0xcc>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dec:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <HAL_I2C_MspInit+0xcc>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_I2C_MspInit+0xcc>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <HAL_I2C_MspInit+0xd0>)
 8000e2c:	f004 fb46 	bl	80054bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_I2C_MspInit+0xcc>)
 8000e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e36:	4a09      	ldr	r2, [pc, #36]	@ (8000e5c <HAL_I2C_MspInit+0xcc>)
 8000e38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_I2C_MspInit+0xcc>)
 8000e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e4e:	bf00      	nop
 8000e50:	37e8      	adds	r7, #232	@ 0xe8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40005800 	.word	0x40005800
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020400 	.word	0x58020400

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f001 f83a 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f81c 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f7ff fe9a 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e74:	f7ff fdf8 	bl	8000a68 <MX_DMA_Init>
  MX_SPI4_Init();
 8000e78:	f000 f8ca 	bl	8001010 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000e7c:	f000 fbfc 	bl	8001678 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e80:	f7ff fd42 	bl	8000908 <MX_ADC3_Init>
  MX_TIM17_Init();
 8000e84:	f000 fd80 	bl	8001988 <MX_TIM17_Init>
  MX_I2C2_Init();
 8000e88:	f7ff ff42 	bl	8000d10 <MX_I2C2_Init>
  MX_UART5_Init();
 8000e8c:	f000 ff3e 	bl	8001d0c <MX_UART5_Init>
  MX_TIM16_Init();
 8000e90:	f000 fd04 	bl	800189c <MX_TIM16_Init>
  MX_TIM3_Init();
 8000e94:	f000 fc80 	bl	8001798 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e98:	f00c fb4c 	bl	800d534 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e9c:	f7ff fe0c 	bl	8000ab8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ea0:	f00c fb6c 	bl	800d57c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <main+0x40>

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09c      	sub	sp, #112	@ 0x70
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	224c      	movs	r2, #76	@ 0x4c
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f010 f87e 	bl	8010fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f010 f878 	bl	8010fb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f004 fdf5 	bl	8005ab8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <SystemClock_Config+0xec>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f94 <SystemClock_Config+0xec>)
 8000ed8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <SystemClock_Config+0xec>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <SystemClock_Config+0xf0>)
 8000eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eec:	4a2a      	ldr	r2, [pc, #168]	@ (8000f98 <SystemClock_Config+0xf0>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <SystemClock_Config+0xf0>)
 8000ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f00:	bf00      	nop
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <SystemClock_Config+0xec>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f0e:	d1f8      	bne.n	8000f02 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f22:	2305      	movs	r3, #5
 8000f24:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f26:	23c0      	movs	r3, #192	@ 0xc0
 8000f28:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f36:	2308      	movs	r3, #8
 8000f38:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 fdf0 	bl	8005b2c <HAL_RCC_OscConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f52:	f000 f857 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f56:	233f      	movs	r3, #63	@ 0x3f
 8000f58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f62:	2308      	movs	r3, #8
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f66:	2340      	movs	r3, #64	@ 0x40
 8000f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f6a:	2340      	movs	r3, #64	@ 0x40
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f74:	2340      	movs	r3, #64	@ 0x40
 8000f76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 fa2f 	bl	80063e0 <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000f88:	f000 f83c 	bl	8001004 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3770      	adds	r7, #112	@ 0x70
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	58024800 	.word	0x58024800
 8000f98:	58000400 	.word	0x58000400

08000f9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	BaseType_t xHigherPriorityTaskWoken_ESC = pdFALSE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
	BaseType_t xHigherPriorityTaskWoken_Control = pdFALSE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
	BaseType_t xHigherPriorityTaskWoken_Tests = pdFALSE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]


	if (htim->Instance == TIM3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		TIM_PeriodElapsedCallback_TIM3();
 8000fba:	f7ff fb7f 	bl	80006bc <TIM_PeriodElapsedCallback_TIM3>
	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x30>
  {
    HAL_IncTick();
 8000fc8:	f000 ffc6 	bl	8001f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (xHigherPriorityTaskWoken_ESC || xHigherPriorityTaskWoken_Control || xHigherPriorityTaskWoken_Tests)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x42>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x42>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x52>
  {
          portYIELD_FROM_ISR(pdTRUE);
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	f3bf 8f6f 	isb	sy
  }

  /* USER CODE END Callback 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40000400 	.word	0x40000400
 8000ffc:	40001400 	.word	0x40001400
 8001000:	e000ed04 	.word	0xe000ed04

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001014:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001016:	4a29      	ldr	r2, [pc, #164]	@ (80010bc <MX_SPI4_Init+0xac>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800101c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001020:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001024:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001028:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800102c:	2207      	movs	r2, #7
 800102e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800103c:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800103e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001042:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001046:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800104a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001066:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001086:	2200      	movs	r2, #0
 8001088:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800108c:	2200      	movs	r2, #0
 800108e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001092:	2200      	movs	r2, #0
 8001094:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 8001098:	2200      	movs	r2, #0
 800109a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_SPI4_Init+0xa8>)
 80010a4:	f008 fa68 	bl	8009578 <HAL_SPI_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80010ae:	f7ff ffa9 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24008ca0 	.word	0x24008ca0
 80010bc:	40013400 	.word	0x40013400

080010c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0ba      	sub	sp, #232	@ 0xe8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	22c0      	movs	r2, #192	@ 0xc0
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00f ff69 	bl	8010fb8 <memset>
  if(spiHandle->Instance==SPI4)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a26      	ldr	r2, [pc, #152]	@ (8001184 <HAL_SPI_MspInit+0xc4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d145      	bne.n	800117c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80010f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f005 fd39 	bl	8006b7c <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001110:	f7ff ff78 	bl	8001004 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <HAL_SPI_MspInit+0xc8>)
 8001116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800111a:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <HAL_SPI_MspInit+0xc8>)
 800111c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001120:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_SPI_MspInit+0xc8>)
 8001126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800112a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_SPI_MspInit+0xc8>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <HAL_SPI_MspInit+0xc8>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_SPI_MspInit+0xc8>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001150:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800116a:	2305      	movs	r3, #5
 800116c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001170:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <HAL_SPI_MspInit+0xcc>)
 8001178:	f004 f9a0 	bl	80054bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	37e8      	adds	r7, #232	@ 0xe8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40013400 	.word	0x40013400
 8001188:	58024400 	.word	0x58024400
 800118c:	58021000 	.word	0x58021000

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_MspInit+0x60>)
 8001198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800119c:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <HAL_MspInit+0x60>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_MspInit+0x60>)
 80011a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	210f      	movs	r1, #15
 80011b8:	f06f 0001 	mvn.w	r0, #1
 80011bc:	f001 ff30 	bl	8003020 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_MspInit+0x60>)
 80011c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_MspInit+0x60>)
 80011c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <HAL_MspInit+0x60>)
 80011d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80011de:	f000 fefb 	bl	8001fd8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80011e2:	2002      	movs	r0, #2
 80011e4:	f000 fee4 	bl	8001fb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	58024400 	.word	0x58024400

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b090      	sub	sp, #64	@ 0x40
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	d827      	bhi.n	8001252 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001202:	2200      	movs	r2, #0
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	2037      	movs	r0, #55	@ 0x37
 8001208:	f001 ff0a 	bl	8003020 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800120c:	2037      	movs	r0, #55	@ 0x37
 800120e:	f001 ff21 	bl	8003054 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001212:	4a29      	ldr	r2, [pc, #164]	@ (80012b8 <HAL_InitTick+0xc4>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001218:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_InitTick+0xc8>)
 800121a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800121e:	4a27      	ldr	r2, [pc, #156]	@ (80012bc <HAL_InitTick+0xc8>)
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001228:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <HAL_InitTick+0xc8>)
 800122a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001236:	f107 0210 	add.w	r2, r7, #16
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f005 fc59 	bl	8006af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800124a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800124c:	2b00      	cmp	r3, #0
 800124e:	d106      	bne.n	800125e <HAL_InitTick+0x6a>
 8001250:	e001      	b.n	8001256 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e02b      	b.n	80012ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001256:	f005 fc23 	bl	8006aa0 <HAL_RCC_GetPCLK1Freq>
 800125a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800125c:	e004      	b.n	8001268 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800125e:	f005 fc1f 	bl	8006aa0 <HAL_RCC_GetPCLK1Freq>
 8001262:	4603      	mov	r3, r0
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800126a:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <HAL_InitTick+0xcc>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	0c9b      	lsrs	r3, r3, #18
 8001272:	3b01      	subs	r3, #1
 8001274:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_InitTick+0xd0>)
 8001278:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <HAL_InitTick+0xd4>)
 800127a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_InitTick+0xd0>)
 800127e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001282:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001284:	4a0f      	ldr	r2, [pc, #60]	@ (80012c4 <HAL_InitTick+0xd0>)
 8001286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001288:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <HAL_InitTick+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_InitTick+0xd0>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001296:	480b      	ldr	r0, [pc, #44]	@ (80012c4 <HAL_InitTick+0xd0>)
 8001298:	f008 faad 	bl	80097f6 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d104      	bne.n	80012ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80012a2:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <HAL_InitTick+0xd0>)
 80012a4:	f008 fafe 	bl	80098a4 <HAL_TIM_Base_Start_IT>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e000      	b.n	80012ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3740      	adds	r7, #64	@ 0x40
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	24000008 	.word	0x24000008
 80012bc:	58024400 	.word	0x58024400
 80012c0:	431bde83 	.word	0x431bde83
 80012c4:	24008d28 	.word	0x24008d28
 80012c8:	40001400 	.word	0x40001400

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <DMA1_Stream0_IRQHandler+0x10>)
 800130a:	f002 ff71 	bl	80041f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	24008ea8 	.word	0x24008ea8

08001318 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <DMA1_Stream1_IRQHandler+0x10>)
 800131e:	f002 ff67 	bl	80041f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	24008f20 	.word	0x24008f20

0800132c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <UART5_IRQHandler+0x10>)
 8001332:	f009 fda5 	bl	800ae80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	24008f98 	.word	0x24008f98

08001340 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <TIM7_IRQHandler+0x10>)
 8001346:	f008 fc0c 	bl	8009b62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	24008d28 	.word	0x24008d28

08001354 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM16_IRQHandler+0x10>)
 800135a:	f008 fc02 	bl	8009b62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	24008e10 	.word	0x24008e10

08001368 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM17_IRQHandler+0x10>)
 800136e:	f008 fbf8 	bl	8009b62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	24008e5c 	.word	0x24008e5c

0800137c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_kill>:

int _kill(int pid, int sig)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001396:	f00f febf 	bl	8011118 <__errno>
 800139a:	4603      	mov	r3, r0
 800139c:	2216      	movs	r2, #22
 800139e:	601a      	str	r2, [r3, #0]
  return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_exit>:

void _exit (int status)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffe7 	bl	800138c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013be:	bf00      	nop
 80013c0:	e7fd      	b.n	80013be <_exit+0x12>

080013c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e00a      	b.n	80013ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d4:	f3af 8000 	nop.w
 80013d8:	4601      	mov	r1, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60ba      	str	r2, [r7, #8]
 80013e0:	b2ca      	uxtb	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <_read+0x12>
  }

  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e009      	b.n	8001422 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf1      	blt.n	800140e <_write+0x12>
  }
  return len;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_close>:

int _close(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145c:	605a      	str	r2, [r3, #4]
  return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_isatty>:

int _isatty(int file)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f00f fe24 	bl	8011118 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	24080000 	.word	0x24080000
 80014fc:	00000400 	.word	0x00000400
 8001500:	24008d74 	.word	0x24008d74
 8001504:	2400db68 	.word	0x2400db68

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800150c:	4b43      	ldr	r3, [pc, #268]	@ (800161c <SystemInit+0x114>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a42      	ldr	r2, [pc, #264]	@ (800161c <SystemInit+0x114>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800151c:	4b40      	ldr	r3, [pc, #256]	@ (8001620 <SystemInit+0x118>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	2b06      	cmp	r3, #6
 8001526:	d807      	bhi.n	8001538 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001528:	4b3d      	ldr	r3, [pc, #244]	@ (8001620 <SystemInit+0x118>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 030f 	bic.w	r3, r3, #15
 8001530:	4a3b      	ldr	r2, [pc, #236]	@ (8001620 <SystemInit+0x118>)
 8001532:	f043 0307 	orr.w	r3, r3, #7
 8001536:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001538:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <SystemInit+0x11c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a39      	ldr	r2, [pc, #228]	@ (8001624 <SystemInit+0x11c>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001544:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <SystemInit+0x11c>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <SystemInit+0x11c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4935      	ldr	r1, [pc, #212]	@ (8001624 <SystemInit+0x11c>)
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <SystemInit+0x120>)
 8001552:	4013      	ands	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001556:	4b32      	ldr	r3, [pc, #200]	@ (8001620 <SystemInit+0x118>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001562:	4b2f      	ldr	r3, [pc, #188]	@ (8001620 <SystemInit+0x118>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	4a2d      	ldr	r2, [pc, #180]	@ (8001620 <SystemInit+0x118>)
 800156c:	f043 0307 	orr.w	r3, r3, #7
 8001570:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001572:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <SystemInit+0x11c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <SystemInit+0x11c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157e:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <SystemInit+0x11c>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001584:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <SystemInit+0x11c>)
 8001586:	4a29      	ldr	r2, [pc, #164]	@ (800162c <SystemInit+0x124>)
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800158a:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <SystemInit+0x11c>)
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <SystemInit+0x128>)
 800158e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001590:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <SystemInit+0x11c>)
 8001592:	4a28      	ldr	r2, [pc, #160]	@ (8001634 <SystemInit+0x12c>)
 8001594:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <SystemInit+0x11c>)
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800159c:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <SystemInit+0x11c>)
 800159e:	4a25      	ldr	r2, [pc, #148]	@ (8001634 <SystemInit+0x12c>)
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <SystemInit+0x11c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <SystemInit+0x11c>)
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <SystemInit+0x12c>)
 80015ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <SystemInit+0x11c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <SystemInit+0x11c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <SystemInit+0x11c>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <SystemInit+0x11c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <SystemInit+0x130>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <SystemInit+0x134>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015d2:	d202      	bcs.n	80015da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <SystemInit+0x138>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <SystemInit+0x11c>)
 80015dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d113      	bne.n	8001610 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <SystemInit+0x11c>)
 80015ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <SystemInit+0x11c>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <SystemInit+0x13c>)
 80015fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <SystemInit+0x11c>)
 8001602:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001606:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <SystemInit+0x11c>)
 8001608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800160c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	52002000 	.word	0x52002000
 8001624:	58024400 	.word	0x58024400
 8001628:	eaf6ed7f 	.word	0xeaf6ed7f
 800162c:	02020200 	.word	0x02020200
 8001630:	01ff0000 	.word	0x01ff0000
 8001634:	01010280 	.word	0x01010280
 8001638:	5c001000 	.word	0x5c001000
 800163c:	ffff0000 	.word	0xffff0000
 8001640:	51008108 	.word	0x51008108
 8001644:	52004000 	.word	0x52004000

08001648 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <ExitRun0Mode+0x2c>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a08      	ldr	r2, [pc, #32]	@ (8001674 <ExitRun0Mode+0x2c>)
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001658:	bf00      	nop
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <ExitRun0Mode+0x2c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f9      	beq.n	800165a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	58024800 	.word	0x58024800

08001678 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch1;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b096      	sub	sp, #88	@ 0x58
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	222c      	movs	r2, #44	@ 0x2c
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00f fc87 	bl	8010fb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016aa:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016ac:	4a39      	ldr	r2, [pc, #228]	@ (8001794 <MX_TIM1_Init+0x11c>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 80016b0:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016b2:	220b      	movs	r2, #11
 80016b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80016bc:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b32      	ldr	r3, [pc, #200]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ca:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016d6:	482e      	ldr	r0, [pc, #184]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016d8:	f008 f9ec 	bl	8009ab4 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f7ff fc8f 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4825      	ldr	r0, [pc, #148]	@ (8001790 <MX_TIM1_Init+0x118>)
 80016fa:	f009 f9fb 	bl	800aaf4 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001704:	f7ff fc7e 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	@ 0x60
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001714:	2308      	movs	r3, #8
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001724:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001728:	2204      	movs	r2, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4818      	ldr	r0, [pc, #96]	@ (8001790 <MX_TIM1_Init+0x118>)
 800172e:	f008 fb99 	bl	8009e64 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001738:	f7ff fc64 	bl	8001004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800175e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4807      	ldr	r0, [pc, #28]	@ (8001790 <MX_TIM1_Init+0x118>)
 8001772:	f009 fa4d 	bl	800ac10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800177c:	f7ff fc42 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001780:	4803      	ldr	r0, [pc, #12]	@ (8001790 <MX_TIM1_Init+0x118>)
 8001782:	f000 fa5f 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 8001786:	bf00      	nop
 8001788:	3758      	adds	r7, #88	@ 0x58
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24008d78 	.word	0x24008d78
 8001794:	40010000 	.word	0x40010000

08001798 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	@ 0x38
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b8:	463b      	mov	r3, r7
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <MX_TIM3_Init+0xfc>)
 80017cc:	4a32      	ldr	r2, [pc, #200]	@ (8001898 <MX_TIM3_Init+0x100>)
 80017ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017d0:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <MX_TIM3_Init+0xfc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <MX_TIM3_Init+0xfc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 800;
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <MX_TIM3_Init+0xfc>)
 80017de:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80017e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <MX_TIM3_Init+0xfc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <MX_TIM3_Init+0xfc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f0:	4828      	ldr	r0, [pc, #160]	@ (8001894 <MX_TIM3_Init+0xfc>)
 80017f2:	f008 f800 	bl	80097f6 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017fc:	f7ff fc02 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001804:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001806:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800180a:	4619      	mov	r1, r3
 800180c:	4821      	ldr	r0, [pc, #132]	@ (8001894 <MX_TIM3_Init+0xfc>)
 800180e:	f008 fc3d 	bl	800a08c <HAL_TIM_ConfigClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001818:	f7ff fbf4 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800181c:	481d      	ldr	r0, [pc, #116]	@ (8001894 <MX_TIM3_Init+0xfc>)
 800181e:	f008 f949 	bl	8009ab4 <HAL_TIM_PWM_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001828:	f7ff fbec 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	4816      	ldr	r0, [pc, #88]	@ (8001894 <MX_TIM3_Init+0xfc>)
 800183c:	f009 f95a 	bl	800aaf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001846:	f7ff fbdd 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184a:	2360      	movs	r3, #96	@ 0x60
 800184c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001852:	2302      	movs	r3, #2
 8001854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <MX_TIM3_Init+0xfc>)
 8001862:	f008 faff 	bl	8009e64 <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800186c:	f7ff fbca 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	2204      	movs	r2, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	@ (8001894 <MX_TIM3_Init+0xfc>)
 8001878:	f008 faf4 	bl	8009e64 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001882:	f7ff fbbf 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001886:	4803      	ldr	r0, [pc, #12]	@ (8001894 <MX_TIM3_Init+0xfc>)
 8001888:	f000 f9dc 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 800188c:	bf00      	nop
 800188e:	3738      	adds	r7, #56	@ 0x38
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	24008dc4 	.word	0x24008dc4
 8001898:	40000400 	.word	0x40000400

0800189c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b092      	sub	sp, #72	@ 0x48
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	222c      	movs	r2, #44	@ 0x2c
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00f fb7b 	bl	8010fb8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001984 <MX_TIM16_Init+0xe8>)
 80018c6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 640;
 80018d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80018da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018ee:	4824      	ldr	r0, [pc, #144]	@ (8001980 <MX_TIM16_Init+0xe4>)
 80018f0:	f007 ff81 	bl	80097f6 <HAL_TIM_Base_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018fa:	f7ff fb83 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80018fe:	4820      	ldr	r0, [pc, #128]	@ (8001980 <MX_TIM16_Init+0xe4>)
 8001900:	f008 f877 	bl	80099f2 <HAL_TIM_OC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800190a:	f7ff fb7b 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	4813      	ldr	r0, [pc, #76]	@ (8001980 <MX_TIM16_Init+0xe4>)
 8001934:	f008 fa1c 	bl	8009d70 <HAL_TIM_OC_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800193e:	f7ff fb61 	bl	8001004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800195a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <MX_TIM16_Init+0xe4>)
 800196a:	f009 f951 	bl	800ac10 <HAL_TIMEx_ConfigBreakDeadTime>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001974:	f7ff fb46 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3748      	adds	r7, #72	@ 0x48
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	24008e10 	.word	0x24008e10
 8001984:	40014400 	.word	0x40014400

08001988 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b092      	sub	sp, #72	@ 0x48
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	222c      	movs	r2, #44	@ 0x2c
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00f fb05 	bl	8010fb8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019ae:	4b2f      	ldr	r3, [pc, #188]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a70 <MX_TIM17_Init+0xe8>)
 80019b2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 239;
 80019b4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019b6:	22ef      	movs	r2, #239	@ 0xef
 80019b8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b2c      	ldr	r3, [pc, #176]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 80019c0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019c6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019ce:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d4:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80019da:	4824      	ldr	r0, [pc, #144]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019dc:	f007 ff0b 	bl	80097f6 <HAL_TIM_Base_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80019e6:	f7ff fb0d 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80019ea:	4820      	ldr	r0, [pc, #128]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 80019ec:	f008 f801 	bl	80099f2 <HAL_TIM_OC_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80019f6:	f7ff fb05 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4813      	ldr	r0, [pc, #76]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 8001a20:	f008 f9a6 	bl	8009d70 <HAL_TIM_OC_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001a2a:	f7ff faeb 	bl	8001004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_TIM17_Init+0xe4>)
 8001a56:	f009 f8db 	bl	800ac10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001a60:	f7ff fad0 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3748      	adds	r7, #72	@ 0x48
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	24008e5c 	.word	0x24008e5c
 8001a70:	40014800 	.word	0x40014800

08001a74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10e      	bne.n	8001aa4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_TIM_PWM_MspInit+0x40>)
 8001a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a8c:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_TIM_PWM_MspInit+0x40>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <HAL_TIM_PWM_MspInit+0x40>)
 8001a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	58024400 	.word	0x58024400

08001ab8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a57      	ldr	r2, [pc, #348]	@ (8001c24 <HAL_TIM_Base_MspInit+0x16c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d16f      	bne.n	8001baa <HAL_TIM_Base_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad0:	4a55      	ldr	r2, [pc, #340]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ada:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8001ae8:	4b50      	ldr	r3, [pc, #320]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001aea:	4a51      	ldr	r2, [pc, #324]	@ (8001c30 <HAL_TIM_Base_MspInit+0x178>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001aee:	4b4f      	ldr	r3, [pc, #316]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001af0:	2217      	movs	r2, #23
 8001af2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001af6:	2240      	movs	r2, #64	@ 0x40
 8001af8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afa:	4b4c      	ldr	r3, [pc, #304]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b00:	4b4a      	ldr	r3, [pc, #296]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b06:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b08:	4b48      	ldr	r3, [pc, #288]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b10:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b16:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001b18:	4b44      	ldr	r3, [pc, #272]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b1e:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b24:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b26:	4b41      	ldr	r3, [pc, #260]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001b2c:	483f      	ldr	r0, [pc, #252]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b2e:	f001 fa9f 	bl	8003070 <HAL_DMA_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001b38:	f7ff fa64 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b42:	4a3a      	ldr	r2, [pc, #232]	@ (8001c2c <HAL_TIM_Base_MspInit+0x174>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream1;
 8001b48:	4b3a      	ldr	r3, [pc, #232]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b4a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c38 <HAL_TIM_Base_MspInit+0x180>)
 8001b4c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001b4e:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b50:	2218      	movs	r2, #24
 8001b52:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b54:	4b37      	ldr	r3, [pc, #220]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b56:	2240      	movs	r2, #64	@ 0x40
 8001b58:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5a:	4b36      	ldr	r3, [pc, #216]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001b60:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b66:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b68:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b6e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b70:	4b30      	ldr	r3, [pc, #192]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b76:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001b78:	4b2e      	ldr	r3, [pc, #184]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b84:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b86:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001b8c:	4829      	ldr	r0, [pc, #164]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001b8e:	f001 fa6f 	bl	8003070 <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_TIM_Base_MspInit+0xe4>
    {
      Error_Handler();
 8001b98:	f7ff fa34 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ba2:	4a24      	ldr	r2, [pc, #144]	@ (8001c34 <HAL_TIM_Base_MspInit+0x17c>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001ba8:	e038      	b.n	8001c1c <HAL_TIM_Base_MspInit+0x164>
  else if(tim_baseHandle->Instance==TIM16)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <HAL_TIM_Base_MspInit+0x184>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d117      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bba:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	2075      	movs	r0, #117	@ 0x75
 8001bd8:	f001 fa22 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001bdc:	2075      	movs	r0, #117	@ 0x75
 8001bde:	f001 fa39 	bl	8003054 <HAL_NVIC_EnableIRQ>
}
 8001be2:	e01b      	b.n	8001c1c <HAL_TIM_Base_MspInit+0x164>
  else if(tim_baseHandle->Instance==TIM17)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <HAL_TIM_Base_MspInit+0x188>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d116      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001bf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_TIM_Base_MspInit+0x170>)
 8001c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 5, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2105      	movs	r1, #5
 8001c10:	2076      	movs	r0, #118	@ 0x76
 8001c12:	f001 fa05 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001c16:	2076      	movs	r0, #118	@ 0x76
 8001c18:	f001 fa1c 	bl	8003054 <HAL_NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40000400 	.word	0x40000400
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	24008ea8 	.word	0x24008ea8
 8001c30:	40020010 	.word	0x40020010
 8001c34:	24008f20 	.word	0x24008f20
 8001c38:	40020028 	.word	0x40020028
 8001c3c:	40014400 	.word	0x40014400
 8001c40:	40014800 	.word	0x40014800

08001c44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a25      	ldr	r2, [pc, #148]	@ (8001cf8 <HAL_TIM_MspPostInit+0xb4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d120      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c66:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <HAL_TIM_MspPostInit+0xb8>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6c:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <HAL_TIM_MspPostInit+0xb8>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_TIM_MspPostInit+0xb8>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4817      	ldr	r0, [pc, #92]	@ (8001d00 <HAL_TIM_MspPostInit+0xbc>)
 8001ca2:	f003 fc0b 	bl	80054bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca6:	e023      	b.n	8001cf0 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a15      	ldr	r2, [pc, #84]	@ (8001d04 <HAL_TIM_MspPostInit+0xc0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_TIM_MspPostInit+0xb8>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb8:	4a10      	ldr	r2, [pc, #64]	@ (8001cfc <HAL_TIM_MspPostInit+0xb8>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_TIM_MspPostInit+0xb8>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DShotTX_MOTOR1_Pin|DShotTX_MOTOR2_Pin;
 8001cd0:	23c0      	movs	r3, #192	@ 0xc0
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <HAL_TIM_MspPostInit+0xc4>)
 8001cec:	f003 fbe6 	bl	80054bc <HAL_GPIO_Init>
}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	@ 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58021000 	.word	0x58021000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	58020000 	.word	0x58020000

08001d0c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d10:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d12:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <MX_UART5_Init+0x94>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d16:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d42:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d54:	4811      	ldr	r0, [pc, #68]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d56:	f008 fff7 	bl	800ad48 <HAL_UART_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001d60:	f7ff f950 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d64:	2100      	movs	r1, #0
 8001d66:	480d      	ldr	r0, [pc, #52]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d68:	f00b fad5 	bl	800d316 <HAL_UARTEx_SetTxFifoThreshold>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001d72:	f7ff f947 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d76:	2100      	movs	r1, #0
 8001d78:	4808      	ldr	r0, [pc, #32]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d7a:	f00b fb0a 	bl	800d392 <HAL_UARTEx_SetRxFifoThreshold>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001d84:	f7ff f93e 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <MX_UART5_Init+0x90>)
 8001d8a:	f00b fa8b 	bl	800d2a4 <HAL_UARTEx_DisableFifoMode>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001d94:	f7ff f936 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	24008f98 	.word	0x24008f98
 8001da0:	40005000 	.word	0x40005000

08001da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0ba      	sub	sp, #232	@ 0xe8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	22c0      	movs	r2, #192	@ 0xc0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00f f8f7 	bl	8010fb8 <memset>
  if(uartHandle->Instance==UART5)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2b      	ldr	r2, [pc, #172]	@ (8001e7c <HAL_UART_MspInit+0xd8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d14e      	bne.n	8001e72 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001dd4:	f04f 0202 	mov.w	r2, #2
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fec6 	bl	8006b7c <HAL_RCCEx_PeriphCLKConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001df6:	f7ff f905 	bl	8001004 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001dfa:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_UART_MspInit+0xdc>)
 8001dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e00:	4a1f      	ldr	r2, [pc, #124]	@ (8001e80 <HAL_UART_MspInit+0xdc>)
 8001e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_UART_MspInit+0xdc>)
 8001e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <HAL_UART_MspInit+0xdc>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1e:	4a18      	ldr	r2, [pc, #96]	@ (8001e80 <HAL_UART_MspInit+0xdc>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_UART_MspInit+0xdc>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e36:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001e50:	230e      	movs	r3, #14
 8001e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4809      	ldr	r0, [pc, #36]	@ (8001e84 <HAL_UART_MspInit+0xe0>)
 8001e5e:	f003 fb2d 	bl	80054bc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2105      	movs	r1, #5
 8001e66:	2035      	movs	r0, #53	@ 0x35
 8001e68:	f001 f8da 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e6c:	2035      	movs	r0, #53	@ 0x35
 8001e6e:	f001 f8f1 	bl	8003054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	37e8      	adds	r7, #232	@ 0xe8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40005000 	.word	0x40005000
 8001e80:	58024400 	.word	0x58024400
 8001e84:	58020400 	.word	0x58020400

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e88:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ec4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e8c:	f7ff fbdc 	bl	8001648 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e90:	f7ff fb3a 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f00f f933 	bl	8011124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7fe ffd1 	bl	8000e64 <main>
  bx  lr
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ec8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ecc:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001ed0:	080131d4 	.word	0x080131d4
  ldr r2, =_sbss
 8001ed4:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001ed8:	2400db64 	.word	0x2400db64

08001edc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC3_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	f001 f88f 	bl	800300a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eec:	f004 fc2e 	bl	800674c <HAL_RCC_GetSysClockFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_Init+0x68>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	4913      	ldr	r1, [pc, #76]	@ (8001f4c <HAL_Init+0x6c>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_Init+0x68>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a0e      	ldr	r2, [pc, #56]	@ (8001f4c <HAL_Init+0x6c>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	4a0b      	ldr	r2, [pc, #44]	@ (8001f50 <HAL_Init+0x70>)
 8001f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f24:	4a0b      	ldr	r2, [pc, #44]	@ (8001f54 <HAL_Init+0x74>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f7ff f962 	bl	80011f4 <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e002      	b.n	8001f40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3a:	f7ff f929 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	08012e10 	.word	0x08012e10
 8001f50:	24000004 	.word	0x24000004
 8001f54:	24000000 	.word	0x24000000

08001f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_IncTick+0x20>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_IncTick+0x24>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <HAL_IncTick+0x24>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	2400000c 	.word	0x2400000c
 8001f7c:	2400902c 	.word	0x2400902c

08001f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_GetTick+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2400902c 	.word	0x2400902c

08001f98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <HAL_GetREVID+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	5c001000 	.word	0x5c001000

08001fb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 0202 	bic.w	r2, r3, #2
 8001fc0:	4904      	ldr	r1, [pc, #16]	@ (8001fd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	58003c00 	.word	0x58003c00

08001fd8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	58003c00 	.word	0x58003c00

08001ff8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <LL_ADC_SetChannelPreselection+0x24>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2201      	movs	r2, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	e015      	b.n	80020b0 <LL_ADC_SetChannelPreselection+0x50>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e003      	b.n	80020a6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	69d2      	ldr	r2, [r2, #28]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b087      	sub	sp, #28
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3360      	adds	r3, #96	@ 0x60
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	431a      	orrs	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	611a      	str	r2, [r3, #16]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3360      	adds	r3, #96	@ 0x60
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]
  }
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800216e:	b480      	push	{r7}
 8002170:	b087      	sub	sp, #28
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3330      	adds	r3, #48	@ 0x30
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	4413      	add	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	211f      	movs	r1, #31
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 011f 	and.w	r1, r3, #31
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	431a      	orrs	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b087      	sub	sp, #28
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3314      	adds	r3, #20
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	0e5b      	lsrs	r3, r3, #25
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	4413      	add	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0d1b      	lsrs	r3, r3, #20
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2107      	movs	r1, #7
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0d1b      	lsrs	r3, r3, #20
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	431a      	orrs	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002234:	43db      	mvns	r3, r3
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0318 	and.w	r3, r3, #24
 800223e:	4908      	ldr	r1, [pc, #32]	@ (8002260 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002240:	40d9      	lsrs	r1, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	400b      	ands	r3, r1
 8002246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800224a:	431a      	orrs	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	000fffff 	.word	0x000fffff

08002264 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002272:	4013      	ands	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6093      	str	r3, [r2, #8]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	5fffffc0 	.word	0x5fffffc0

08002288 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800229c:	d101      	bne.n	80022a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80022be:	4013      	ands	r3, r2
 80022c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	6fffffc0 	.word	0x6fffffc0

080022d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <LL_ADC_IsEnabled+0x18>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <LL_ADC_IsEnabled+0x1a>
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d101      	bne.n	800233e <LL_ADC_REG_IsConversionOngoing+0x18>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b08      	cmp	r3, #8
 800235e:	d101      	bne.n	8002364 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b089      	sub	sp, #36	@ 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e18f      	b.n	80026ae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7fe fb19 	bl	80009d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff67 	bl	8002288 <LL_ADC_IsDeepPowerDownEnabled>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff4d 	bl	8002264 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff82 	bl	80022d8 <LL_ADC_IsInternalRegulatorEnabled>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d114      	bne.n	8002404 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff66 	bl	80022b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e4:	4b87      	ldr	r3, [pc, #540]	@ (8002604 <HAL_ADC_Init+0x290>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	4a87      	ldr	r2, [pc, #540]	@ (8002608 <HAL_ADC_Init+0x294>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023f6:	e002      	b.n	80023fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff65 	bl	80022d8 <LL_ADC_IsInternalRegulatorEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f043 0210 	orr.w	r2, r3, #16
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f043 0201 	orr.w	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff76 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 800243a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8129 	bne.w	800269c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8125 	bne.w	800269c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800245a:	f043 0202 	orr.w	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff4a 	bl	8002300 <LL_ADC_IsEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d136      	bne.n	80024e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a65      	ldr	r2, [pc, #404]	@ (800260c <HAL_ADC_Init+0x298>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_ADC_Init+0x112>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a63      	ldr	r2, [pc, #396]	@ (8002610 <HAL_ADC_Init+0x29c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10e      	bne.n	80024a4 <HAL_ADC_Init+0x130>
 8002486:	4861      	ldr	r0, [pc, #388]	@ (800260c <HAL_ADC_Init+0x298>)
 8002488:	f7ff ff3a 	bl	8002300 <LL_ADC_IsEnabled>
 800248c:	4604      	mov	r4, r0
 800248e:	4860      	ldr	r0, [pc, #384]	@ (8002610 <HAL_ADC_Init+0x29c>)
 8002490:	f7ff ff36 	bl	8002300 <LL_ADC_IsEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	4323      	orrs	r3, r4
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e008      	b.n	80024b6 <HAL_ADC_Init+0x142>
 80024a4:	485b      	ldr	r0, [pc, #364]	@ (8002614 <HAL_ADC_Init+0x2a0>)
 80024a6:	f7ff ff2b 	bl	8002300 <LL_ADC_IsEnabled>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a53      	ldr	r2, [pc, #332]	@ (800260c <HAL_ADC_Init+0x298>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Init+0x15a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a51      	ldr	r2, [pc, #324]	@ (8002610 <HAL_ADC_Init+0x29c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Init+0x15e>
 80024ce:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_ADC_Init+0x2a4>)
 80024d0:	e000      	b.n	80024d4 <HAL_ADC_Init+0x160>
 80024d2:	4a52      	ldr	r2, [pc, #328]	@ (800261c <HAL_ADC_Init+0x2a8>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f7ff fd8c 	bl	8001ff8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80024e0:	f7ff fd5a 	bl	8001f98 <HAL_GetREVID>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d914      	bls.n	8002518 <HAL_ADC_Init+0x1a4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d110      	bne.n	8002518 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7d5b      	ldrb	r3, [r3, #21]
 80024fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002500:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002506:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7f1b      	ldrb	r3, [r3, #28]
 800250c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800250e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002510:	f043 030c 	orr.w	r3, r3, #12
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e00d      	b.n	8002534 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7d5b      	ldrb	r3, [r3, #21]
 800251c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002522:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002528:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7f1b      	ldrb	r3, [r3, #28]
 800252e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7f1b      	ldrb	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d106      	bne.n	800254a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	3b01      	subs	r3, #1
 8002542:	045b      	lsls	r3, r3, #17
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	4b2c      	ldr	r3, [pc, #176]	@ (8002620 <HAL_ADC_Init+0x2ac>)
 800256e:	4013      	ands	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	69b9      	ldr	r1, [r7, #24]
 8002576:	430b      	orrs	r3, r1
 8002578:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fed1 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 8002584:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fede 	bl	800234c <LL_ADC_INJ_IsConversionOngoing>
 8002590:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d15f      	bne.n	8002658 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d15c      	bne.n	8002658 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7d1b      	ldrb	r3, [r3, #20]
 80025a2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <HAL_ADC_Init+0x2b0>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	430b      	orrs	r3, r1
 80025be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d130      	bne.n	800262c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <HAL_ADC_Init+0x2b4>)
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025de:	3a01      	subs	r2, #1
 80025e0:	0411      	lsls	r1, r2, #16
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025e6:	4311      	orrs	r1, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025ec:	4311      	orrs	r1, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025f2:	430a      	orrs	r2, r1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
 8002600:	e01c      	b.n	800263c <HAL_ADC_Init+0x2c8>
 8002602:	bf00      	nop
 8002604:	24000000 	.word	0x24000000
 8002608:	053e2d63 	.word	0x053e2d63
 800260c:	40022000 	.word	0x40022000
 8002610:	40022100 	.word	0x40022100
 8002614:	58026000 	.word	0x58026000
 8002618:	40022300 	.word	0x40022300
 800261c:	58026300 	.word	0x58026300
 8002620:	fff0c003 	.word	0xfff0c003
 8002624:	ffffbffc 	.word	0xffffbffc
 8002628:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fb20 	bl	8002c98 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10c      	bne.n	800267a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f023 010f 	bic.w	r1, r3, #15
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	1e5a      	subs	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	631a      	str	r2, [r3, #48]	@ 0x30
 8002678:	e007      	b.n	800268a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 020f 	bic.w	r2, r2, #15
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
 800269a:	e007      	b.n	80026ac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0210 	orr.w	r2, r3, #16
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop

080026b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b08d      	sub	sp, #52	@ 0x34
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a65      	ldr	r2, [pc, #404]	@ (8002868 <HAL_ADC_ConfigChannel+0x1b0>)
 80026d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x2a>
 80026de:	2302      	movs	r3, #2
 80026e0:	e2c7      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x5ba>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe19 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 82ac 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db2c      	blt.n	800275e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800270c:	2b00      	cmp	r3, #0
 800270e:	d108      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x6a>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2201      	movs	r2, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	e016      	b.n	8002750 <HAL_ADC_ConfigChannel+0x98>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	613b      	str	r3, [r7, #16]
  return result;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e003      	b.n	8002746 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2201      	movs	r2, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	69d1      	ldr	r1, [r2, #28]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	430b      	orrs	r3, r1
 800275c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f7ff fcff 	bl	800216e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fdd6 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 800277a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fde3 	bl	800234c <LL_ADC_INJ_IsConversionOngoing>
 8002786:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80b8 	bne.w	8002900 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 80b4 	bne.w	8002900 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f7ff fd0e 	bl	80021c6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027aa:	4b30      	ldr	r3, [pc, #192]	@ (800286c <HAL_ADC_ConfigChannel+0x1b4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80027b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027b6:	d10b      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x118>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	e01d      	b.n	800280c <HAL_ADC_ConfigChannel+0x154>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10b      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x13e>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	e00a      	b.n	800280c <HAL_ADC_ConfigChannel+0x154>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d02c      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6919      	ldr	r1, [r3, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	f7ff fc4f 	bl	80020c6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	7e5b      	ldrb	r3, [r3, #25]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_ADC_ConfigChannel+0x186>
 8002838:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800283c:	e000      	b.n	8002840 <HAL_ADC_ConfigChannel+0x188>
 800283e:	2300      	movs	r3, #0
 8002840:	461a      	mov	r2, r3
 8002842:	f7ff fc79 	bl	8002138 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7e1b      	ldrb	r3, [r3, #24]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1a4>
 8002856:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800285a:	e000      	b.n	800285e <HAL_ADC_ConfigChannel+0x1a6>
 800285c:	2300      	movs	r3, #0
 800285e:	461a      	mov	r2, r3
 8002860:	f7ff fc51 	bl	8002106 <LL_ADC_SetDataRightShift>
 8002864:	e04c      	b.n	8002900 <HAL_ADC_ConfigChannel+0x248>
 8002866:	bf00      	nop
 8002868:	47ff0000 	.word	0x47ff0000
 800286c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002876:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	069b      	lsls	r3, r3, #26
 8002880:	429a      	cmp	r2, r3
 8002882:	d107      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002892:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800289a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	069b      	lsls	r3, r3, #26
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d107      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028b6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	069b      	lsls	r3, r3, #26
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d107      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028da:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	069b      	lsls	r3, r3, #26
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fcfb 	bl	8002300 <LL_ADC_IsEnabled>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	f040 81aa 	bne.w	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	461a      	mov	r2, r3
 8002920:	f7ff fc7c 	bl	800221c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a87      	ldr	r2, [pc, #540]	@ (8002b48 <HAL_ADC_ConfigChannel+0x490>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f040 809a 	bne.w	8002a64 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4984      	ldr	r1, [pc, #528]	@ (8002b4c <HAL_ADC_ConfigChannel+0x494>)
 800293a:	428b      	cmp	r3, r1
 800293c:	d147      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x316>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4983      	ldr	r1, [pc, #524]	@ (8002b50 <HAL_ADC_ConfigChannel+0x498>)
 8002944:	428b      	cmp	r3, r1
 8002946:	d040      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x312>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4981      	ldr	r1, [pc, #516]	@ (8002b54 <HAL_ADC_ConfigChannel+0x49c>)
 800294e:	428b      	cmp	r3, r1
 8002950:	d039      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0x30e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4980      	ldr	r1, [pc, #512]	@ (8002b58 <HAL_ADC_ConfigChannel+0x4a0>)
 8002958:	428b      	cmp	r3, r1
 800295a:	d032      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x30a>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	497e      	ldr	r1, [pc, #504]	@ (8002b5c <HAL_ADC_ConfigChannel+0x4a4>)
 8002962:	428b      	cmp	r3, r1
 8002964:	d02b      	beq.n	80029be <HAL_ADC_ConfigChannel+0x306>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	497d      	ldr	r1, [pc, #500]	@ (8002b60 <HAL_ADC_ConfigChannel+0x4a8>)
 800296c:	428b      	cmp	r3, r1
 800296e:	d024      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x302>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	497b      	ldr	r1, [pc, #492]	@ (8002b64 <HAL_ADC_ConfigChannel+0x4ac>)
 8002976:	428b      	cmp	r3, r1
 8002978:	d01d      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x2fe>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	497a      	ldr	r1, [pc, #488]	@ (8002b68 <HAL_ADC_ConfigChannel+0x4b0>)
 8002980:	428b      	cmp	r3, r1
 8002982:	d016      	beq.n	80029b2 <HAL_ADC_ConfigChannel+0x2fa>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4978      	ldr	r1, [pc, #480]	@ (8002b6c <HAL_ADC_ConfigChannel+0x4b4>)
 800298a:	428b      	cmp	r3, r1
 800298c:	d00f      	beq.n	80029ae <HAL_ADC_ConfigChannel+0x2f6>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4977      	ldr	r1, [pc, #476]	@ (8002b70 <HAL_ADC_ConfigChannel+0x4b8>)
 8002994:	428b      	cmp	r3, r1
 8002996:	d008      	beq.n	80029aa <HAL_ADC_ConfigChannel+0x2f2>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4975      	ldr	r1, [pc, #468]	@ (8002b74 <HAL_ADC_ConfigChannel+0x4bc>)
 800299e:	428b      	cmp	r3, r1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x2ee>
 80029a2:	4b75      	ldr	r3, [pc, #468]	@ (8002b78 <HAL_ADC_ConfigChannel+0x4c0>)
 80029a4:	e05a      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029a6:	2300      	movs	r3, #0
 80029a8:	e058      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029aa:	4b74      	ldr	r3, [pc, #464]	@ (8002b7c <HAL_ADC_ConfigChannel+0x4c4>)
 80029ac:	e056      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029ae:	4b74      	ldr	r3, [pc, #464]	@ (8002b80 <HAL_ADC_ConfigChannel+0x4c8>)
 80029b0:	e054      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029b2:	4b6e      	ldr	r3, [pc, #440]	@ (8002b6c <HAL_ADC_ConfigChannel+0x4b4>)
 80029b4:	e052      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b68 <HAL_ADC_ConfigChannel+0x4b0>)
 80029b8:	e050      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029ba:	4b72      	ldr	r3, [pc, #456]	@ (8002b84 <HAL_ADC_ConfigChannel+0x4cc>)
 80029bc:	e04e      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029be:	4b72      	ldr	r3, [pc, #456]	@ (8002b88 <HAL_ADC_ConfigChannel+0x4d0>)
 80029c0:	e04c      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029c2:	4b72      	ldr	r3, [pc, #456]	@ (8002b8c <HAL_ADC_ConfigChannel+0x4d4>)
 80029c4:	e04a      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029c6:	4b72      	ldr	r3, [pc, #456]	@ (8002b90 <HAL_ADC_ConfigChannel+0x4d8>)
 80029c8:	e048      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e046      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4970      	ldr	r1, [pc, #448]	@ (8002b94 <HAL_ADC_ConfigChannel+0x4dc>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d140      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x3a2>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	495c      	ldr	r1, [pc, #368]	@ (8002b50 <HAL_ADC_ConfigChannel+0x498>)
 80029de:	428b      	cmp	r3, r1
 80029e0:	d039      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x39e>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	495b      	ldr	r1, [pc, #364]	@ (8002b54 <HAL_ADC_ConfigChannel+0x49c>)
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d032      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x39a>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4959      	ldr	r1, [pc, #356]	@ (8002b58 <HAL_ADC_ConfigChannel+0x4a0>)
 80029f2:	428b      	cmp	r3, r1
 80029f4:	d02b      	beq.n	8002a4e <HAL_ADC_ConfigChannel+0x396>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4958      	ldr	r1, [pc, #352]	@ (8002b5c <HAL_ADC_ConfigChannel+0x4a4>)
 80029fc:	428b      	cmp	r3, r1
 80029fe:	d024      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x392>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4956      	ldr	r1, [pc, #344]	@ (8002b60 <HAL_ADC_ConfigChannel+0x4a8>)
 8002a06:	428b      	cmp	r3, r1
 8002a08:	d01d      	beq.n	8002a46 <HAL_ADC_ConfigChannel+0x38e>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4955      	ldr	r1, [pc, #340]	@ (8002b64 <HAL_ADC_ConfigChannel+0x4ac>)
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d016      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x38a>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4953      	ldr	r1, [pc, #332]	@ (8002b68 <HAL_ADC_ConfigChannel+0x4b0>)
 8002a1a:	428b      	cmp	r3, r1
 8002a1c:	d00f      	beq.n	8002a3e <HAL_ADC_ConfigChannel+0x386>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4952      	ldr	r1, [pc, #328]	@ (8002b6c <HAL_ADC_ConfigChannel+0x4b4>)
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d008      	beq.n	8002a3a <HAL_ADC_ConfigChannel+0x382>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4951      	ldr	r1, [pc, #324]	@ (8002b74 <HAL_ADC_ConfigChannel+0x4bc>)
 8002a2e:	428b      	cmp	r3, r1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x37e>
 8002a32:	4b51      	ldr	r3, [pc, #324]	@ (8002b78 <HAL_ADC_ConfigChannel+0x4c0>)
 8002a34:	e012      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a36:	2300      	movs	r3, #0
 8002a38:	e010      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a3a:	4b51      	ldr	r3, [pc, #324]	@ (8002b80 <HAL_ADC_ConfigChannel+0x4c8>)
 8002a3c:	e00e      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b6c <HAL_ADC_ConfigChannel+0x4b4>)
 8002a40:	e00c      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a42:	4b49      	ldr	r3, [pc, #292]	@ (8002b68 <HAL_ADC_ConfigChannel+0x4b0>)
 8002a44:	e00a      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a46:	4b4f      	ldr	r3, [pc, #316]	@ (8002b84 <HAL_ADC_ConfigChannel+0x4cc>)
 8002a48:	e008      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b88 <HAL_ADC_ConfigChannel+0x4d0>)
 8002a4c:	e006      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8002b8c <HAL_ADC_ConfigChannel+0x4d4>)
 8002a50:	e004      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a52:	4b4f      	ldr	r3, [pc, #316]	@ (8002b90 <HAL_ADC_ConfigChannel+0x4d8>)
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x3a4>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f7ff fafe 	bl	8002060 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f280 80fc 	bge.w	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a36      	ldr	r2, [pc, #216]	@ (8002b4c <HAL_ADC_ConfigChannel+0x494>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x3ca>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a45      	ldr	r2, [pc, #276]	@ (8002b94 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x3ce>
 8002a82:	4b45      	ldr	r3, [pc, #276]	@ (8002b98 <HAL_ADC_ConfigChannel+0x4e0>)
 8002a84:	e000      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x3d0>
 8002a86:	4b45      	ldr	r3, [pc, #276]	@ (8002b9c <HAL_ADC_ConfigChannel+0x4e4>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fadb 	bl	8002044 <LL_ADC_GetCommonPathInternalCh>
 8002a8e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2d      	ldr	r2, [pc, #180]	@ (8002b4c <HAL_ADC_ConfigChannel+0x494>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADC_ConfigChannel+0x3ec>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b94 <HAL_ADC_ConfigChannel+0x4dc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x40a>
 8002aa4:	4829      	ldr	r0, [pc, #164]	@ (8002b4c <HAL_ADC_ConfigChannel+0x494>)
 8002aa6:	f7ff fc2b 	bl	8002300 <LL_ADC_IsEnabled>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4839      	ldr	r0, [pc, #228]	@ (8002b94 <HAL_ADC_ConfigChannel+0x4dc>)
 8002aae:	f7ff fc27 	bl	8002300 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4323      	orrs	r3, r4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e008      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x41c>
 8002ac2:	4837      	ldr	r0, [pc, #220]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002ac4:	f7ff fc1c 	bl	8002300 <LL_ADC_IsEnabled>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80b3 	beq.w	8002c40 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a31      	ldr	r2, [pc, #196]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x4ec>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d165      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x4f8>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d160      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	f040 80b6 	bne.w	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <HAL_ADC_ConfigChannel+0x494>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0x456>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <HAL_ADC_ConfigChannel+0x4dc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x45a>
 8002b0e:	4a22      	ldr	r2, [pc, #136]	@ (8002b98 <HAL_ADC_ConfigChannel+0x4e0>)
 8002b10:	e000      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x45c>
 8002b12:	4a22      	ldr	r2, [pc, #136]	@ (8002b9c <HAL_ADC_ConfigChannel+0x4e4>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f7ff fa7e 	bl	800201e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b22:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x4f0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	4a20      	ldr	r2, [pc, #128]	@ (8002bac <HAL_ADC_ConfigChannel+0x4f4>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	3301      	adds	r3, #1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002b36:	e002      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f9      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b44:	e08f      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
 8002b46:	bf00      	nop
 8002b48:	47ff0000 	.word	0x47ff0000
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	04300002 	.word	0x04300002
 8002b54:	08600004 	.word	0x08600004
 8002b58:	0c900008 	.word	0x0c900008
 8002b5c:	10c00010 	.word	0x10c00010
 8002b60:	14f00020 	.word	0x14f00020
 8002b64:	2a000400 	.word	0x2a000400
 8002b68:	2e300800 	.word	0x2e300800
 8002b6c:	32601000 	.word	0x32601000
 8002b70:	43210000 	.word	0x43210000
 8002b74:	4b840000 	.word	0x4b840000
 8002b78:	4fb80000 	.word	0x4fb80000
 8002b7c:	47520000 	.word	0x47520000
 8002b80:	36902000 	.word	0x36902000
 8002b84:	25b00200 	.word	0x25b00200
 8002b88:	21800100 	.word	0x21800100
 8002b8c:	1d500080 	.word	0x1d500080
 8002b90:	19200040 	.word	0x19200040
 8002b94:	40022100 	.word	0x40022100
 8002b98:	40022300 	.word	0x40022300
 8002b9c:	58026300 	.word	0x58026300
 8002ba0:	58026000 	.word	0x58026000
 8002ba4:	cb840000 	.word	0xcb840000
 8002ba8:	24000000 	.word	0x24000000
 8002bac:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a31      	ldr	r2, [pc, #196]	@ (8002c7c <HAL_ADC_ConfigChannel+0x5c4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d11e      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x540>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d119      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <HAL_ADC_ConfigChannel+0x5c8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d14b      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c84 <HAL_ADC_ConfigChannel+0x5cc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_ADC_ConfigChannel+0x52a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002c88 <HAL_ADC_ConfigChannel+0x5d0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x52e>
 8002be2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <HAL_ADC_ConfigChannel+0x5d4>)
 8002be4:	e000      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x530>
 8002be6:	4a2a      	ldr	r2, [pc, #168]	@ (8002c90 <HAL_ADC_ConfigChannel+0x5d8>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f7ff fa14 	bl	800201e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf6:	e036      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <HAL_ADC_ConfigChannel+0x5dc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d131      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d12c      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1b      	ldr	r2, [pc, #108]	@ (8002c80 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d127      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c84 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x572>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <HAL_ADC_ConfigChannel+0x5d0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x576>
 8002c2a:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_ADC_ConfigChannel+0x5d4>)
 8002c2c:	e000      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x578>
 8002c2e:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <HAL_ADC_ConfigChannel+0x5d8>)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f7ff f9f0 	bl	800201e <LL_ADC_SetCommonPathInternalCh>
 8002c3e:	e012      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002c52:	e008      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3734      	adds	r7, #52	@ 0x34
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	c7520000 	.word	0xc7520000
 8002c80:	58026000 	.word	0x58026000
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40022100 	.word	0x40022100
 8002c8c:	40022300 	.word	0x40022300
 8002c90:	58026300 	.word	0x58026300
 8002c94:	cfb80000 	.word	0xcfb80000

08002c98 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8002e90 <ADC_ConfigureBoostMode+0x1f8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <ADC_ConfigureBoostMode+0x1c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a79      	ldr	r2, [pc, #484]	@ (8002e94 <ADC_ConfigureBoostMode+0x1fc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d109      	bne.n	8002cc8 <ADC_ConfigureBoostMode+0x30>
 8002cb4:	4b78      	ldr	r3, [pc, #480]	@ (8002e98 <ADC_ConfigureBoostMode+0x200>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e008      	b.n	8002cda <ADC_ConfigureBoostMode+0x42>
 8002cc8:	4b74      	ldr	r3, [pc, #464]	@ (8002e9c <ADC_ConfigureBoostMode+0x204>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d01c      	beq.n	8002d18 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cde:	f003 feaf 	bl	8006a40 <HAL_RCC_GetHCLKFreq>
 8002ce2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cec:	d010      	beq.n	8002d10 <ADC_ConfigureBoostMode+0x78>
 8002cee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cf2:	d873      	bhi.n	8002ddc <ADC_ConfigureBoostMode+0x144>
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf8:	d002      	beq.n	8002d00 <ADC_ConfigureBoostMode+0x68>
 8002cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cfe:	d16d      	bne.n	8002ddc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
        break;
 8002d0e:	e068      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	60fb      	str	r3, [r7, #12]
        break;
 8002d16:	e064      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d18:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	f005 f936 	bl	8007f90 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d24:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d2e:	d051      	beq.n	8002dd4 <ADC_ConfigureBoostMode+0x13c>
 8002d30:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d34:	d854      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d36:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d3a:	d047      	beq.n	8002dcc <ADC_ConfigureBoostMode+0x134>
 8002d3c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d40:	d84e      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d42:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d46:	d03d      	beq.n	8002dc4 <ADC_ConfigureBoostMode+0x12c>
 8002d48:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d4c:	d848      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d52:	d033      	beq.n	8002dbc <ADC_ConfigureBoostMode+0x124>
 8002d54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d58:	d842      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d5a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d5e:	d029      	beq.n	8002db4 <ADC_ConfigureBoostMode+0x11c>
 8002d60:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d64:	d83c      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d66:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d6a:	d01a      	beq.n	8002da2 <ADC_ConfigureBoostMode+0x10a>
 8002d6c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d70:	d836      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d72:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d76:	d014      	beq.n	8002da2 <ADC_ConfigureBoostMode+0x10a>
 8002d78:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d7c:	d830      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d82:	d00e      	beq.n	8002da2 <ADC_ConfigureBoostMode+0x10a>
 8002d84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d88:	d82a      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d8e:	d008      	beq.n	8002da2 <ADC_ConfigureBoostMode+0x10a>
 8002d90:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d94:	d824      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x148>
 8002d96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d9a:	d002      	beq.n	8002da2 <ADC_ConfigureBoostMode+0x10a>
 8002d9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002da0:	d11e      	bne.n	8002de0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0c9b      	lsrs	r3, r3, #18
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	60fb      	str	r3, [r7, #12]
        break;
 8002db2:	e016      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	60fb      	str	r3, [r7, #12]
        break;
 8002dba:	e012      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	60fb      	str	r3, [r7, #12]
        break;
 8002dc2:	e00e      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	60fb      	str	r3, [r7, #12]
        break;
 8002dca:	e00a      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	09db      	lsrs	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]
        break;
 8002dd2:	e006      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	60fb      	str	r3, [r7, #12]
        break;
 8002dda:	e002      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002ddc:	bf00      	nop
 8002dde:	e000      	b.n	8002de2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002de0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002de2:	f7ff f8d9 	bl	8001f98 <HAL_GetREVID>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d815      	bhi.n	8002e1c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <ADC_ConfigureBoostMode+0x208>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d908      	bls.n	8002e0a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e06:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e08:	e03e      	b.n	8002e88 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e18:	609a      	str	r2, [r3, #8]
}
 8002e1a:	e035      	b.n	8002e88 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <ADC_ConfigureBoostMode+0x20c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d808      	bhi.n	8002e3c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e38:	609a      	str	r2, [r3, #8]
}
 8002e3a:	e025      	b.n	8002e88 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <ADC_ConfigureBoostMode+0x210>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d80a      	bhi.n	8002e5a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	e016      	b.n	8002e88 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <ADC_ConfigureBoostMode+0x214>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d80a      	bhi.n	8002e78 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	e007      	b.n	8002e88 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40022000 	.word	0x40022000
 8002e94:	40022100 	.word	0x40022100
 8002e98:	40022300 	.word	0x40022300
 8002e9c:	58026300 	.word	0x58026300
 8002ea0:	01312d00 	.word	0x01312d00
 8002ea4:	005f5e10 	.word	0x005f5e10
 8002ea8:	00bebc20 	.word	0x00bebc20
 8002eac:	017d7840 	.word	0x017d7840

08002eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ed8:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00
 8002ef4:	05fa0000 	.word	0x05fa0000

08002ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002efc:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <__NVIC_GetPriorityGrouping+0x18>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f003 0307 	and.w	r3, r3, #7
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db0b      	blt.n	8002f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4907      	ldr	r1, [pc, #28]	@ (8002f4c <__NVIC_EnableIRQ+0x38>)
 8002f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2001      	movs	r0, #1
 8002f36:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	@ (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	@ (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	@ 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff4c 	bl	8002eb0 <__NVIC_SetPriorityGrouping>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800302e:	f7ff ff63 	bl	8002ef8 <__NVIC_GetPriorityGrouping>
 8003032:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6978      	ldr	r0, [r7, #20]
 800303a:	f7ff ffb3 	bl	8002fa4 <NVIC_EncodePriority>
 800303e:	4602      	mov	r2, r0
 8003040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff82 	bl	8002f50 <__NVIC_SetPriority>
}
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff56 	bl	8002f14 <__NVIC_EnableIRQ>
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7fe ff82 	bl	8001f80 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e316      	b.n	80036b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a66      	ldr	r2, [pc, #408]	@ (8003228 <HAL_DMA_Init+0x1b8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d04a      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a65      	ldr	r2, [pc, #404]	@ (800322c <HAL_DMA_Init+0x1bc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d045      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a63      	ldr	r2, [pc, #396]	@ (8003230 <HAL_DMA_Init+0x1c0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d040      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a62      	ldr	r2, [pc, #392]	@ (8003234 <HAL_DMA_Init+0x1c4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d03b      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a60      	ldr	r2, [pc, #384]	@ (8003238 <HAL_DMA_Init+0x1c8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d036      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5f      	ldr	r2, [pc, #380]	@ (800323c <HAL_DMA_Init+0x1cc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d031      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003240 <HAL_DMA_Init+0x1d0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02c      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003244 <HAL_DMA_Init+0x1d4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d027      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003248 <HAL_DMA_Init+0x1d8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a59      	ldr	r2, [pc, #356]	@ (800324c <HAL_DMA_Init+0x1dc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d01d      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a57      	ldr	r2, [pc, #348]	@ (8003250 <HAL_DMA_Init+0x1e0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d018      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a56      	ldr	r2, [pc, #344]	@ (8003254 <HAL_DMA_Init+0x1e4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a54      	ldr	r2, [pc, #336]	@ (8003258 <HAL_DMA_Init+0x1e8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00e      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a53      	ldr	r2, [pc, #332]	@ (800325c <HAL_DMA_Init+0x1ec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a51      	ldr	r2, [pc, #324]	@ (8003260 <HAL_DMA_Init+0x1f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_DMA_Init+0xb8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a50      	ldr	r2, [pc, #320]	@ (8003264 <HAL_DMA_Init+0x1f4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_DMA_Init+0xbc>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_DMA_Init+0xbe>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 813b 	beq.w	80033aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a37      	ldr	r2, [pc, #220]	@ (8003228 <HAL_DMA_Init+0x1b8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d04a      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a36      	ldr	r2, [pc, #216]	@ (800322c <HAL_DMA_Init+0x1bc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d045      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a34      	ldr	r2, [pc, #208]	@ (8003230 <HAL_DMA_Init+0x1c0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d040      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a33      	ldr	r2, [pc, #204]	@ (8003234 <HAL_DMA_Init+0x1c4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d03b      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a31      	ldr	r2, [pc, #196]	@ (8003238 <HAL_DMA_Init+0x1c8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d036      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a30      	ldr	r2, [pc, #192]	@ (800323c <HAL_DMA_Init+0x1cc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d031      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2e      	ldr	r2, [pc, #184]	@ (8003240 <HAL_DMA_Init+0x1d0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02c      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2d      	ldr	r2, [pc, #180]	@ (8003244 <HAL_DMA_Init+0x1d4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d027      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2b      	ldr	r2, [pc, #172]	@ (8003248 <HAL_DMA_Init+0x1d8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d022      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2a      	ldr	r2, [pc, #168]	@ (800324c <HAL_DMA_Init+0x1dc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d01d      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a28      	ldr	r2, [pc, #160]	@ (8003250 <HAL_DMA_Init+0x1e0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d018      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a27      	ldr	r2, [pc, #156]	@ (8003254 <HAL_DMA_Init+0x1e4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a25      	ldr	r2, [pc, #148]	@ (8003258 <HAL_DMA_Init+0x1e8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00e      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a24      	ldr	r2, [pc, #144]	@ (800325c <HAL_DMA_Init+0x1ec>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a22      	ldr	r2, [pc, #136]	@ (8003260 <HAL_DMA_Init+0x1f0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_Init+0x174>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a21      	ldr	r2, [pc, #132]	@ (8003264 <HAL_DMA_Init+0x1f4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <HAL_DMA_Init+0x186>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e007      	b.n	8003206 <HAL_DMA_Init+0x196>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003206:	e02f      	b.n	8003268 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003208:	f7fe feba 	bl	8001f80 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b05      	cmp	r3, #5
 8003214:	d928      	bls.n	8003268 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2203      	movs	r2, #3
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e246      	b.n	80036b6 <HAL_DMA_Init+0x646>
 8003228:	40020010 	.word	0x40020010
 800322c:	40020028 	.word	0x40020028
 8003230:	40020040 	.word	0x40020040
 8003234:	40020058 	.word	0x40020058
 8003238:	40020070 	.word	0x40020070
 800323c:	40020088 	.word	0x40020088
 8003240:	400200a0 	.word	0x400200a0
 8003244:	400200b8 	.word	0x400200b8
 8003248:	40020410 	.word	0x40020410
 800324c:	40020428 	.word	0x40020428
 8003250:	40020440 	.word	0x40020440
 8003254:	40020458 	.word	0x40020458
 8003258:	40020470 	.word	0x40020470
 800325c:	40020488 	.word	0x40020488
 8003260:	400204a0 	.word	0x400204a0
 8003264:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1c8      	bne.n	8003208 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4b83      	ldr	r3, [pc, #524]	@ (8003490 <HAL_DMA_Init+0x420>)
 8003282:	4013      	ands	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800328e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d107      	bne.n	80032cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	4313      	orrs	r3, r2
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80032cc:	4b71      	ldr	r3, [pc, #452]	@ (8003494 <HAL_DMA_Init+0x424>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b71      	ldr	r3, [pc, #452]	@ (8003498 <HAL_DMA_Init+0x428>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d8:	d328      	bcc.n	800332c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b28      	cmp	r3, #40	@ 0x28
 80032e0:	d903      	bls.n	80032ea <HAL_DMA_Init+0x27a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80032e8:	d917      	bls.n	800331a <HAL_DMA_Init+0x2aa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80032f0:	d903      	bls.n	80032fa <HAL_DMA_Init+0x28a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b42      	cmp	r3, #66	@ 0x42
 80032f8:	d90f      	bls.n	800331a <HAL_DMA_Init+0x2aa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b46      	cmp	r3, #70	@ 0x46
 8003300:	d903      	bls.n	800330a <HAL_DMA_Init+0x29a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b48      	cmp	r3, #72	@ 0x48
 8003308:	d907      	bls.n	800331a <HAL_DMA_Init+0x2aa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003310:	d905      	bls.n	800331e <HAL_DMA_Init+0x2ae>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b52      	cmp	r3, #82	@ 0x52
 8003318:	d801      	bhi.n	800331e <HAL_DMA_Init+0x2ae>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_DMA_Init+0x2b0>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800332a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0307 	bic.w	r3, r3, #7
 8003342:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2b04      	cmp	r3, #4
 8003354:	d117      	bne.n	8003386 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f001 ff1d 	bl	80051a8 <DMA_CheckFifoParam>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2240      	movs	r2, #64	@ 0x40
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e197      	b.n	80036b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f001 fe58 	bl	8005044 <DMA_CalcBaseAndBitshift>
 8003394:	4603      	mov	r3, r0
 8003396:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	223f      	movs	r2, #63	@ 0x3f
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	e0cd      	b.n	8003546 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3b      	ldr	r2, [pc, #236]	@ (800349c <HAL_DMA_Init+0x42c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_Init+0x38a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a39      	ldr	r2, [pc, #228]	@ (80034a0 <HAL_DMA_Init+0x430>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01d      	beq.n	80033fa <HAL_DMA_Init+0x38a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a38      	ldr	r2, [pc, #224]	@ (80034a4 <HAL_DMA_Init+0x434>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_Init+0x38a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a36      	ldr	r2, [pc, #216]	@ (80034a8 <HAL_DMA_Init+0x438>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_DMA_Init+0x38a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a35      	ldr	r2, [pc, #212]	@ (80034ac <HAL_DMA_Init+0x43c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_Init+0x38a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a33      	ldr	r2, [pc, #204]	@ (80034b0 <HAL_DMA_Init+0x440>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_DMA_Init+0x38a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a32      	ldr	r2, [pc, #200]	@ (80034b4 <HAL_DMA_Init+0x444>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_Init+0x38a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a30      	ldr	r2, [pc, #192]	@ (80034b8 <HAL_DMA_Init+0x448>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_DMA_Init+0x38e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_DMA_Init+0x390>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8097 	beq.w	8003534 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a24      	ldr	r2, [pc, #144]	@ (800349c <HAL_DMA_Init+0x42c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d021      	beq.n	8003454 <HAL_DMA_Init+0x3e4>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a22      	ldr	r2, [pc, #136]	@ (80034a0 <HAL_DMA_Init+0x430>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01c      	beq.n	8003454 <HAL_DMA_Init+0x3e4>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a21      	ldr	r2, [pc, #132]	@ (80034a4 <HAL_DMA_Init+0x434>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d017      	beq.n	8003454 <HAL_DMA_Init+0x3e4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_DMA_Init+0x438>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d012      	beq.n	8003454 <HAL_DMA_Init+0x3e4>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1e      	ldr	r2, [pc, #120]	@ (80034ac <HAL_DMA_Init+0x43c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00d      	beq.n	8003454 <HAL_DMA_Init+0x3e4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <HAL_DMA_Init+0x440>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d008      	beq.n	8003454 <HAL_DMA_Init+0x3e4>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1b      	ldr	r2, [pc, #108]	@ (80034b4 <HAL_DMA_Init+0x444>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <HAL_DMA_Init+0x3e4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <HAL_DMA_Init+0x448>)
 8003452:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4b13      	ldr	r3, [pc, #76]	@ (80034bc <HAL_DMA_Init+0x44c>)
 8003470:	4013      	ands	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b40      	cmp	r3, #64	@ 0x40
 800347a:	d021      	beq.n	80034c0 <HAL_DMA_Init+0x450>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b80      	cmp	r3, #128	@ 0x80
 8003482:	d102      	bne.n	800348a <HAL_DMA_Init+0x41a>
 8003484:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003488:	e01b      	b.n	80034c2 <HAL_DMA_Init+0x452>
 800348a:	2300      	movs	r3, #0
 800348c:	e019      	b.n	80034c2 <HAL_DMA_Init+0x452>
 800348e:	bf00      	nop
 8003490:	fe10803f 	.word	0xfe10803f
 8003494:	5c001000 	.word	0x5c001000
 8003498:	ffff0000 	.word	0xffff0000
 800349c:	58025408 	.word	0x58025408
 80034a0:	5802541c 	.word	0x5802541c
 80034a4:	58025430 	.word	0x58025430
 80034a8:	58025444 	.word	0x58025444
 80034ac:	58025458 	.word	0x58025458
 80034b0:	5802546c 	.word	0x5802546c
 80034b4:	58025480 	.word	0x58025480
 80034b8:	58025494 	.word	0x58025494
 80034bc:	fffe000f 	.word	0xfffe000f
 80034c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68d2      	ldr	r2, [r2, #12]
 80034c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b6e      	ldr	r3, [pc, #440]	@ (80036c0 <HAL_DMA_Init+0x650>)
 8003508:	4413      	add	r3, r2
 800350a:	4a6e      	ldr	r2, [pc, #440]	@ (80036c4 <HAL_DMA_Init+0x654>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f001 fd93 	bl	8005044 <DMA_CalcBaseAndBitshift>
 800351e:	4603      	mov	r3, r0
 8003520:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2201      	movs	r2, #1
 800352c:	409a      	lsls	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e008      	b.n	8003546 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2240      	movs	r2, #64	@ 0x40
 8003538:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0b7      	b.n	80036b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a5f      	ldr	r2, [pc, #380]	@ (80036c8 <HAL_DMA_Init+0x658>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d072      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a5d      	ldr	r2, [pc, #372]	@ (80036cc <HAL_DMA_Init+0x65c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d06d      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a5c      	ldr	r2, [pc, #368]	@ (80036d0 <HAL_DMA_Init+0x660>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d068      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a5a      	ldr	r2, [pc, #360]	@ (80036d4 <HAL_DMA_Init+0x664>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d063      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a59      	ldr	r2, [pc, #356]	@ (80036d8 <HAL_DMA_Init+0x668>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d05e      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a57      	ldr	r2, [pc, #348]	@ (80036dc <HAL_DMA_Init+0x66c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d059      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a56      	ldr	r2, [pc, #344]	@ (80036e0 <HAL_DMA_Init+0x670>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d054      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a54      	ldr	r2, [pc, #336]	@ (80036e4 <HAL_DMA_Init+0x674>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d04f      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a53      	ldr	r2, [pc, #332]	@ (80036e8 <HAL_DMA_Init+0x678>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d04a      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a51      	ldr	r2, [pc, #324]	@ (80036ec <HAL_DMA_Init+0x67c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d045      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a50      	ldr	r2, [pc, #320]	@ (80036f0 <HAL_DMA_Init+0x680>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d040      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a4e      	ldr	r2, [pc, #312]	@ (80036f4 <HAL_DMA_Init+0x684>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d03b      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a4d      	ldr	r2, [pc, #308]	@ (80036f8 <HAL_DMA_Init+0x688>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d036      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4b      	ldr	r2, [pc, #300]	@ (80036fc <HAL_DMA_Init+0x68c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d031      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003700 <HAL_DMA_Init+0x690>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d02c      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a48      	ldr	r2, [pc, #288]	@ (8003704 <HAL_DMA_Init+0x694>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d027      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a47      	ldr	r2, [pc, #284]	@ (8003708 <HAL_DMA_Init+0x698>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a45      	ldr	r2, [pc, #276]	@ (800370c <HAL_DMA_Init+0x69c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01d      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a44      	ldr	r2, [pc, #272]	@ (8003710 <HAL_DMA_Init+0x6a0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a42      	ldr	r2, [pc, #264]	@ (8003714 <HAL_DMA_Init+0x6a4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a41      	ldr	r2, [pc, #260]	@ (8003718 <HAL_DMA_Init+0x6a8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3f      	ldr	r2, [pc, #252]	@ (800371c <HAL_DMA_Init+0x6ac>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3e      	ldr	r2, [pc, #248]	@ (8003720 <HAL_DMA_Init+0x6b0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_DMA_Init+0x5c6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3c      	ldr	r2, [pc, #240]	@ (8003724 <HAL_DMA_Init+0x6b4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_DMA_Init+0x5ca>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_DMA_Init+0x5cc>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d032      	beq.n	80036a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f001 fe2d 	bl	80052a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b80      	cmp	r3, #128	@ 0x80
 800364c:	d102      	bne.n	8003654 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003668:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_DMA_Init+0x624>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b08      	cmp	r3, #8
 8003678:	d80c      	bhi.n	8003694 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f001 feaa 	bl	80053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e008      	b.n	80036a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	a7fdabf8 	.word	0xa7fdabf8
 80036c4:	cccccccd 	.word	0xcccccccd
 80036c8:	40020010 	.word	0x40020010
 80036cc:	40020028 	.word	0x40020028
 80036d0:	40020040 	.word	0x40020040
 80036d4:	40020058 	.word	0x40020058
 80036d8:	40020070 	.word	0x40020070
 80036dc:	40020088 	.word	0x40020088
 80036e0:	400200a0 	.word	0x400200a0
 80036e4:	400200b8 	.word	0x400200b8
 80036e8:	40020410 	.word	0x40020410
 80036ec:	40020428 	.word	0x40020428
 80036f0:	40020440 	.word	0x40020440
 80036f4:	40020458 	.word	0x40020458
 80036f8:	40020470 	.word	0x40020470
 80036fc:	40020488 	.word	0x40020488
 8003700:	400204a0 	.word	0x400204a0
 8003704:	400204b8 	.word	0x400204b8
 8003708:	58025408 	.word	0x58025408
 800370c:	5802541c 	.word	0x5802541c
 8003710:	58025430 	.word	0x58025430
 8003714:	58025444 	.word	0x58025444
 8003718:	58025458 	.word	0x58025458
 800371c:	5802546c 	.word	0x5802546c
 8003720:	58025480 	.word	0x58025480
 8003724:	58025494 	.word	0x58025494

08003728 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003730:	f7fe fc26 	bl	8001f80 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e2dc      	b.n	8003cfa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d008      	beq.n	800375e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	@ 0x80
 8003750:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e2cd      	b.n	8003cfa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a76      	ldr	r2, [pc, #472]	@ (800393c <HAL_DMA_Abort+0x214>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d04a      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a74      	ldr	r2, [pc, #464]	@ (8003940 <HAL_DMA_Abort+0x218>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d045      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a73      	ldr	r2, [pc, #460]	@ (8003944 <HAL_DMA_Abort+0x21c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d040      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a71      	ldr	r2, [pc, #452]	@ (8003948 <HAL_DMA_Abort+0x220>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d03b      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a70      	ldr	r2, [pc, #448]	@ (800394c <HAL_DMA_Abort+0x224>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d036      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <HAL_DMA_Abort+0x228>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d031      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6d      	ldr	r2, [pc, #436]	@ (8003954 <HAL_DMA_Abort+0x22c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d02c      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003958 <HAL_DMA_Abort+0x230>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d027      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6a      	ldr	r2, [pc, #424]	@ (800395c <HAL_DMA_Abort+0x234>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a68      	ldr	r2, [pc, #416]	@ (8003960 <HAL_DMA_Abort+0x238>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a67      	ldr	r2, [pc, #412]	@ (8003964 <HAL_DMA_Abort+0x23c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a65      	ldr	r2, [pc, #404]	@ (8003968 <HAL_DMA_Abort+0x240>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a64      	ldr	r2, [pc, #400]	@ (800396c <HAL_DMA_Abort+0x244>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a62      	ldr	r2, [pc, #392]	@ (8003970 <HAL_DMA_Abort+0x248>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a61      	ldr	r2, [pc, #388]	@ (8003974 <HAL_DMA_Abort+0x24c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_Abort+0xd6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003978 <HAL_DMA_Abort+0x250>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_DMA_Abort+0xda>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_DMA_Abort+0xdc>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 021e 	bic.w	r2, r2, #30
 8003816:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003826:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e00a      	b.n	8003846 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 020e 	bic.w	r2, r2, #14
 800383e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3c      	ldr	r2, [pc, #240]	@ (800393c <HAL_DMA_Abort+0x214>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d072      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3a      	ldr	r2, [pc, #232]	@ (8003940 <HAL_DMA_Abort+0x218>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d06d      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a39      	ldr	r2, [pc, #228]	@ (8003944 <HAL_DMA_Abort+0x21c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d068      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a37      	ldr	r2, [pc, #220]	@ (8003948 <HAL_DMA_Abort+0x220>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d063      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a36      	ldr	r2, [pc, #216]	@ (800394c <HAL_DMA_Abort+0x224>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d05e      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a34      	ldr	r2, [pc, #208]	@ (8003950 <HAL_DMA_Abort+0x228>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d059      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a33      	ldr	r2, [pc, #204]	@ (8003954 <HAL_DMA_Abort+0x22c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d054      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a31      	ldr	r2, [pc, #196]	@ (8003958 <HAL_DMA_Abort+0x230>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d04f      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a30      	ldr	r2, [pc, #192]	@ (800395c <HAL_DMA_Abort+0x234>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d04a      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <HAL_DMA_Abort+0x238>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d045      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003964 <HAL_DMA_Abort+0x23c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d040      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003968 <HAL_DMA_Abort+0x240>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d03b      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2a      	ldr	r2, [pc, #168]	@ (800396c <HAL_DMA_Abort+0x244>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d036      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a28      	ldr	r2, [pc, #160]	@ (8003970 <HAL_DMA_Abort+0x248>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d031      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a27      	ldr	r2, [pc, #156]	@ (8003974 <HAL_DMA_Abort+0x24c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d02c      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a25      	ldr	r2, [pc, #148]	@ (8003978 <HAL_DMA_Abort+0x250>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d027      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a24      	ldr	r2, [pc, #144]	@ (800397c <HAL_DMA_Abort+0x254>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a22      	ldr	r2, [pc, #136]	@ (8003980 <HAL_DMA_Abort+0x258>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01d      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a21      	ldr	r2, [pc, #132]	@ (8003984 <HAL_DMA_Abort+0x25c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <HAL_DMA_Abort+0x260>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1e      	ldr	r2, [pc, #120]	@ (800398c <HAL_DMA_Abort+0x264>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <HAL_DMA_Abort+0x268>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1b      	ldr	r2, [pc, #108]	@ (8003994 <HAL_DMA_Abort+0x26c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_DMA_Abort+0x20e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a19      	ldr	r2, [pc, #100]	@ (8003998 <HAL_DMA_Abort+0x270>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d132      	bne.n	800399c <HAL_DMA_Abort+0x274>
 8003936:	2301      	movs	r3, #1
 8003938:	e031      	b.n	800399e <HAL_DMA_Abort+0x276>
 800393a:	bf00      	nop
 800393c:	40020010 	.word	0x40020010
 8003940:	40020028 	.word	0x40020028
 8003944:	40020040 	.word	0x40020040
 8003948:	40020058 	.word	0x40020058
 800394c:	40020070 	.word	0x40020070
 8003950:	40020088 	.word	0x40020088
 8003954:	400200a0 	.word	0x400200a0
 8003958:	400200b8 	.word	0x400200b8
 800395c:	40020410 	.word	0x40020410
 8003960:	40020428 	.word	0x40020428
 8003964:	40020440 	.word	0x40020440
 8003968:	40020458 	.word	0x40020458
 800396c:	40020470 	.word	0x40020470
 8003970:	40020488 	.word	0x40020488
 8003974:	400204a0 	.word	0x400204a0
 8003978:	400204b8 	.word	0x400204b8
 800397c:	58025408 	.word	0x58025408
 8003980:	5802541c 	.word	0x5802541c
 8003984:	58025430 	.word	0x58025430
 8003988:	58025444 	.word	0x58025444
 800398c:	58025458 	.word	0x58025458
 8003990:	5802546c 	.word	0x5802546c
 8003994:	58025480 	.word	0x58025480
 8003998:	58025494 	.word	0x58025494
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6d      	ldr	r2, [pc, #436]	@ (8003b6c <HAL_DMA_Abort+0x444>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b70 <HAL_DMA_Abort+0x448>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003b74 <HAL_DMA_Abort+0x44c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a68      	ldr	r2, [pc, #416]	@ (8003b78 <HAL_DMA_Abort+0x450>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a67      	ldr	r2, [pc, #412]	@ (8003b7c <HAL_DMA_Abort+0x454>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a65      	ldr	r2, [pc, #404]	@ (8003b80 <HAL_DMA_Abort+0x458>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a64      	ldr	r2, [pc, #400]	@ (8003b84 <HAL_DMA_Abort+0x45c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a62      	ldr	r2, [pc, #392]	@ (8003b88 <HAL_DMA_Abort+0x460>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a61      	ldr	r2, [pc, #388]	@ (8003b8c <HAL_DMA_Abort+0x464>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5f      	ldr	r2, [pc, #380]	@ (8003b90 <HAL_DMA_Abort+0x468>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b94 <HAL_DMA_Abort+0x46c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5c      	ldr	r2, [pc, #368]	@ (8003b98 <HAL_DMA_Abort+0x470>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b9c <HAL_DMA_Abort+0x474>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a59      	ldr	r2, [pc, #356]	@ (8003ba0 <HAL_DMA_Abort+0x478>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a58      	ldr	r2, [pc, #352]	@ (8003ba4 <HAL_DMA_Abort+0x47c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_Abort+0x32a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a56      	ldr	r2, [pc, #344]	@ (8003ba8 <HAL_DMA_Abort+0x480>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d108      	bne.n	8003a64 <HAL_DMA_Abort+0x33c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e007      	b.n	8003a74 <HAL_DMA_Abort+0x34c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a74:	e013      	b.n	8003a9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a76:	f7fe fa83 	bl	8001f80 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d90c      	bls.n	8003a9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e12d      	b.n	8003cfa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e5      	bne.n	8003a76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	@ (8003b6c <HAL_DMA_Abort+0x444>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04a      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b70 <HAL_DMA_Abort+0x448>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d045      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b74 <HAL_DMA_Abort+0x44c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d040      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b78 <HAL_DMA_Abort+0x450>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d03b      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a29      	ldr	r2, [pc, #164]	@ (8003b7c <HAL_DMA_Abort+0x454>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d036      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a27      	ldr	r2, [pc, #156]	@ (8003b80 <HAL_DMA_Abort+0x458>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a26      	ldr	r2, [pc, #152]	@ (8003b84 <HAL_DMA_Abort+0x45c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d02c      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a24      	ldr	r2, [pc, #144]	@ (8003b88 <HAL_DMA_Abort+0x460>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d027      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a23      	ldr	r2, [pc, #140]	@ (8003b8c <HAL_DMA_Abort+0x464>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a21      	ldr	r2, [pc, #132]	@ (8003b90 <HAL_DMA_Abort+0x468>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a20      	ldr	r2, [pc, #128]	@ (8003b94 <HAL_DMA_Abort+0x46c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b98 <HAL_DMA_Abort+0x470>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1d      	ldr	r2, [pc, #116]	@ (8003b9c <HAL_DMA_Abort+0x474>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba0 <HAL_DMA_Abort+0x478>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba4 <HAL_DMA_Abort+0x47c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_Abort+0x422>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a18      	ldr	r2, [pc, #96]	@ (8003ba8 <HAL_DMA_Abort+0x480>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_DMA_Abort+0x426>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_DMA_Abort+0x428>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02b      	beq.n	8003bac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	223f      	movs	r2, #63	@ 0x3f
 8003b64:	409a      	lsls	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	e02a      	b.n	8003bc2 <HAL_DMA_Abort+0x49a>
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40020028 	.word	0x40020028
 8003b74:	40020040 	.word	0x40020040
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	40020070 	.word	0x40020070
 8003b80:	40020088 	.word	0x40020088
 8003b84:	400200a0 	.word	0x400200a0
 8003b88:	400200b8 	.word	0x400200b8
 8003b8c:	40020410 	.word	0x40020410
 8003b90:	40020428 	.word	0x40020428
 8003b94:	40020440 	.word	0x40020440
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40020470 	.word	0x40020470
 8003ba0:	40020488 	.word	0x40020488
 8003ba4:	400204a0 	.word	0x400204a0
 8003ba8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2201      	movs	r2, #1
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a4f      	ldr	r2, [pc, #316]	@ (8003d04 <HAL_DMA_Abort+0x5dc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d072      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003d08 <HAL_DMA_Abort+0x5e0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d06d      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4c      	ldr	r2, [pc, #304]	@ (8003d0c <HAL_DMA_Abort+0x5e4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d068      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a4a      	ldr	r2, [pc, #296]	@ (8003d10 <HAL_DMA_Abort+0x5e8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d063      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a49      	ldr	r2, [pc, #292]	@ (8003d14 <HAL_DMA_Abort+0x5ec>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d05e      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a47      	ldr	r2, [pc, #284]	@ (8003d18 <HAL_DMA_Abort+0x5f0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d059      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a46      	ldr	r2, [pc, #280]	@ (8003d1c <HAL_DMA_Abort+0x5f4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d054      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a44      	ldr	r2, [pc, #272]	@ (8003d20 <HAL_DMA_Abort+0x5f8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d04f      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a43      	ldr	r2, [pc, #268]	@ (8003d24 <HAL_DMA_Abort+0x5fc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d04a      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a41      	ldr	r2, [pc, #260]	@ (8003d28 <HAL_DMA_Abort+0x600>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d045      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <HAL_DMA_Abort+0x604>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d040      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a3e      	ldr	r2, [pc, #248]	@ (8003d30 <HAL_DMA_Abort+0x608>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d03b      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d34 <HAL_DMA_Abort+0x60c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d036      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3b      	ldr	r2, [pc, #236]	@ (8003d38 <HAL_DMA_Abort+0x610>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d031      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3a      	ldr	r2, [pc, #232]	@ (8003d3c <HAL_DMA_Abort+0x614>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d02c      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a38      	ldr	r2, [pc, #224]	@ (8003d40 <HAL_DMA_Abort+0x618>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d027      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a37      	ldr	r2, [pc, #220]	@ (8003d44 <HAL_DMA_Abort+0x61c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a35      	ldr	r2, [pc, #212]	@ (8003d48 <HAL_DMA_Abort+0x620>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a34      	ldr	r2, [pc, #208]	@ (8003d4c <HAL_DMA_Abort+0x624>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a32      	ldr	r2, [pc, #200]	@ (8003d50 <HAL_DMA_Abort+0x628>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <HAL_DMA_Abort+0x62c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2f      	ldr	r2, [pc, #188]	@ (8003d58 <HAL_DMA_Abort+0x630>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8003d5c <HAL_DMA_Abort+0x634>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_DMA_Abort+0x58a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2c      	ldr	r2, [pc, #176]	@ (8003d60 <HAL_DMA_Abort+0x638>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_DMA_Abort+0x58e>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_DMA_Abort+0x590>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cc4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ce6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40020010 	.word	0x40020010
 8003d08:	40020028 	.word	0x40020028
 8003d0c:	40020040 	.word	0x40020040
 8003d10:	40020058 	.word	0x40020058
 8003d14:	40020070 	.word	0x40020070
 8003d18:	40020088 	.word	0x40020088
 8003d1c:	400200a0 	.word	0x400200a0
 8003d20:	400200b8 	.word	0x400200b8
 8003d24:	40020410 	.word	0x40020410
 8003d28:	40020428 	.word	0x40020428
 8003d2c:	40020440 	.word	0x40020440
 8003d30:	40020458 	.word	0x40020458
 8003d34:	40020470 	.word	0x40020470
 8003d38:	40020488 	.word	0x40020488
 8003d3c:	400204a0 	.word	0x400204a0
 8003d40:	400204b8 	.word	0x400204b8
 8003d44:	58025408 	.word	0x58025408
 8003d48:	5802541c 	.word	0x5802541c
 8003d4c:	58025430 	.word	0x58025430
 8003d50:	58025444 	.word	0x58025444
 8003d54:	58025458 	.word	0x58025458
 8003d58:	5802546c 	.word	0x5802546c
 8003d5c:	58025480 	.word	0x58025480
 8003d60:	58025494 	.word	0x58025494

08003d64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e237      	b.n	80041e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d004      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2280      	movs	r2, #128	@ 0x80
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e22c      	b.n	80041e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5c      	ldr	r2, [pc, #368]	@ (8003f04 <HAL_DMA_Abort_IT+0x1a0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04a      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f08 <HAL_DMA_Abort_IT+0x1a4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d045      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a59      	ldr	r2, [pc, #356]	@ (8003f0c <HAL_DMA_Abort_IT+0x1a8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d040      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a58      	ldr	r2, [pc, #352]	@ (8003f10 <HAL_DMA_Abort_IT+0x1ac>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d03b      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a56      	ldr	r2, [pc, #344]	@ (8003f14 <HAL_DMA_Abort_IT+0x1b0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d036      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a55      	ldr	r2, [pc, #340]	@ (8003f18 <HAL_DMA_Abort_IT+0x1b4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d031      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a53      	ldr	r2, [pc, #332]	@ (8003f1c <HAL_DMA_Abort_IT+0x1b8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02c      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a52      	ldr	r2, [pc, #328]	@ (8003f20 <HAL_DMA_Abort_IT+0x1bc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d027      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a50      	ldr	r2, [pc, #320]	@ (8003f24 <HAL_DMA_Abort_IT+0x1c0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d022      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a4f      	ldr	r2, [pc, #316]	@ (8003f28 <HAL_DMA_Abort_IT+0x1c4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d01d      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a4d      	ldr	r2, [pc, #308]	@ (8003f2c <HAL_DMA_Abort_IT+0x1c8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8003f30 <HAL_DMA_Abort_IT+0x1cc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a4a      	ldr	r2, [pc, #296]	@ (8003f34 <HAL_DMA_Abort_IT+0x1d0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a49      	ldr	r2, [pc, #292]	@ (8003f38 <HAL_DMA_Abort_IT+0x1d4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a47      	ldr	r2, [pc, #284]	@ (8003f3c <HAL_DMA_Abort_IT+0x1d8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_Abort_IT+0xc8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a46      	ldr	r2, [pc, #280]	@ (8003f40 <HAL_DMA_Abort_IT+0x1dc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_DMA_Abort_IT+0xcc>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_DMA_Abort_IT+0xce>
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8086 	beq.w	8003f44 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2f      	ldr	r2, [pc, #188]	@ (8003f04 <HAL_DMA_Abort_IT+0x1a0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d04a      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f08 <HAL_DMA_Abort_IT+0x1a4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d045      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2c      	ldr	r2, [pc, #176]	@ (8003f0c <HAL_DMA_Abort_IT+0x1a8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d040      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2b      	ldr	r2, [pc, #172]	@ (8003f10 <HAL_DMA_Abort_IT+0x1ac>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d03b      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a29      	ldr	r2, [pc, #164]	@ (8003f14 <HAL_DMA_Abort_IT+0x1b0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d036      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a28      	ldr	r2, [pc, #160]	@ (8003f18 <HAL_DMA_Abort_IT+0x1b4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d031      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a26      	ldr	r2, [pc, #152]	@ (8003f1c <HAL_DMA_Abort_IT+0x1b8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02c      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a25      	ldr	r2, [pc, #148]	@ (8003f20 <HAL_DMA_Abort_IT+0x1bc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d027      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a23      	ldr	r2, [pc, #140]	@ (8003f24 <HAL_DMA_Abort_IT+0x1c0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a22      	ldr	r2, [pc, #136]	@ (8003f28 <HAL_DMA_Abort_IT+0x1c4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01d      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	@ (8003f2c <HAL_DMA_Abort_IT+0x1c8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f30 <HAL_DMA_Abort_IT+0x1cc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f34 <HAL_DMA_Abort_IT+0x1d0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f38 <HAL_DMA_Abort_IT+0x1d4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f3c <HAL_DMA_Abort_IT+0x1d8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x17c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <HAL_DMA_Abort_IT+0x1dc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d108      	bne.n	8003ef2 <HAL_DMA_Abort_IT+0x18e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e178      	b.n	80041e4 <HAL_DMA_Abort_IT+0x480>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e16f      	b.n	80041e4 <HAL_DMA_Abort_IT+0x480>
 8003f04:	40020010 	.word	0x40020010
 8003f08:	40020028 	.word	0x40020028
 8003f0c:	40020040 	.word	0x40020040
 8003f10:	40020058 	.word	0x40020058
 8003f14:	40020070 	.word	0x40020070
 8003f18:	40020088 	.word	0x40020088
 8003f1c:	400200a0 	.word	0x400200a0
 8003f20:	400200b8 	.word	0x400200b8
 8003f24:	40020410 	.word	0x40020410
 8003f28:	40020428 	.word	0x40020428
 8003f2c:	40020440 	.word	0x40020440
 8003f30:	40020458 	.word	0x40020458
 8003f34:	40020470 	.word	0x40020470
 8003f38:	40020488 	.word	0x40020488
 8003f3c:	400204a0 	.word	0x400204a0
 8003f40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 020e 	bic.w	r2, r2, #14
 8003f52:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a6c      	ldr	r2, [pc, #432]	@ (800410c <HAL_DMA_Abort_IT+0x3a8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d04a      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6b      	ldr	r2, [pc, #428]	@ (8004110 <HAL_DMA_Abort_IT+0x3ac>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d045      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a69      	ldr	r2, [pc, #420]	@ (8004114 <HAL_DMA_Abort_IT+0x3b0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d040      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a68      	ldr	r2, [pc, #416]	@ (8004118 <HAL_DMA_Abort_IT+0x3b4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d03b      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a66      	ldr	r2, [pc, #408]	@ (800411c <HAL_DMA_Abort_IT+0x3b8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d036      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a65      	ldr	r2, [pc, #404]	@ (8004120 <HAL_DMA_Abort_IT+0x3bc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d031      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a63      	ldr	r2, [pc, #396]	@ (8004124 <HAL_DMA_Abort_IT+0x3c0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02c      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a62      	ldr	r2, [pc, #392]	@ (8004128 <HAL_DMA_Abort_IT+0x3c4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d027      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a60      	ldr	r2, [pc, #384]	@ (800412c <HAL_DMA_Abort_IT+0x3c8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8004130 <HAL_DMA_Abort_IT+0x3cc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8004134 <HAL_DMA_Abort_IT+0x3d0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8004138 <HAL_DMA_Abort_IT+0x3d4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5a      	ldr	r2, [pc, #360]	@ (800413c <HAL_DMA_Abort_IT+0x3d8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a59      	ldr	r2, [pc, #356]	@ (8004140 <HAL_DMA_Abort_IT+0x3dc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a57      	ldr	r2, [pc, #348]	@ (8004144 <HAL_DMA_Abort_IT+0x3e0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x290>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a56      	ldr	r2, [pc, #344]	@ (8004148 <HAL_DMA_Abort_IT+0x3e4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <HAL_DMA_Abort_IT+0x2a2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e007      	b.n	8004016 <HAL_DMA_Abort_IT+0x2b2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a3c      	ldr	r2, [pc, #240]	@ (800410c <HAL_DMA_Abort_IT+0x3a8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d072      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3a      	ldr	r2, [pc, #232]	@ (8004110 <HAL_DMA_Abort_IT+0x3ac>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d06d      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a39      	ldr	r2, [pc, #228]	@ (8004114 <HAL_DMA_Abort_IT+0x3b0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d068      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a37      	ldr	r2, [pc, #220]	@ (8004118 <HAL_DMA_Abort_IT+0x3b4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d063      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a36      	ldr	r2, [pc, #216]	@ (800411c <HAL_DMA_Abort_IT+0x3b8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d05e      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a34      	ldr	r2, [pc, #208]	@ (8004120 <HAL_DMA_Abort_IT+0x3bc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d059      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a33      	ldr	r2, [pc, #204]	@ (8004124 <HAL_DMA_Abort_IT+0x3c0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d054      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a31      	ldr	r2, [pc, #196]	@ (8004128 <HAL_DMA_Abort_IT+0x3c4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d04f      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a30      	ldr	r2, [pc, #192]	@ (800412c <HAL_DMA_Abort_IT+0x3c8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d04a      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2e      	ldr	r2, [pc, #184]	@ (8004130 <HAL_DMA_Abort_IT+0x3cc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d045      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2d      	ldr	r2, [pc, #180]	@ (8004134 <HAL_DMA_Abort_IT+0x3d0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d040      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2b      	ldr	r2, [pc, #172]	@ (8004138 <HAL_DMA_Abort_IT+0x3d4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d03b      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2a      	ldr	r2, [pc, #168]	@ (800413c <HAL_DMA_Abort_IT+0x3d8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d036      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a28      	ldr	r2, [pc, #160]	@ (8004140 <HAL_DMA_Abort_IT+0x3dc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <HAL_DMA_Abort_IT+0x3e0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d02c      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a25      	ldr	r2, [pc, #148]	@ (8004148 <HAL_DMA_Abort_IT+0x3e4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d027      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a24      	ldr	r2, [pc, #144]	@ (800414c <HAL_DMA_Abort_IT+0x3e8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a22      	ldr	r2, [pc, #136]	@ (8004150 <HAL_DMA_Abort_IT+0x3ec>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a21      	ldr	r2, [pc, #132]	@ (8004154 <HAL_DMA_Abort_IT+0x3f0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004158 <HAL_DMA_Abort_IT+0x3f4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <HAL_DMA_Abort_IT+0x3f8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004160 <HAL_DMA_Abort_IT+0x3fc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004164 <HAL_DMA_Abort_IT+0x400>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_Abort_IT+0x3a2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a19      	ldr	r2, [pc, #100]	@ (8004168 <HAL_DMA_Abort_IT+0x404>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d132      	bne.n	800416c <HAL_DMA_Abort_IT+0x408>
 8004106:	2301      	movs	r3, #1
 8004108:	e031      	b.n	800416e <HAL_DMA_Abort_IT+0x40a>
 800410a:	bf00      	nop
 800410c:	40020010 	.word	0x40020010
 8004110:	40020028 	.word	0x40020028
 8004114:	40020040 	.word	0x40020040
 8004118:	40020058 	.word	0x40020058
 800411c:	40020070 	.word	0x40020070
 8004120:	40020088 	.word	0x40020088
 8004124:	400200a0 	.word	0x400200a0
 8004128:	400200b8 	.word	0x400200b8
 800412c:	40020410 	.word	0x40020410
 8004130:	40020428 	.word	0x40020428
 8004134:	40020440 	.word	0x40020440
 8004138:	40020458 	.word	0x40020458
 800413c:	40020470 	.word	0x40020470
 8004140:	40020488 	.word	0x40020488
 8004144:	400204a0 	.word	0x400204a0
 8004148:	400204b8 	.word	0x400204b8
 800414c:	58025408 	.word	0x58025408
 8004150:	5802541c 	.word	0x5802541c
 8004154:	58025430 	.word	0x58025430
 8004158:	58025444 	.word	0x58025444
 800415c:	58025458 	.word	0x58025458
 8004160:	5802546c 	.word	0x5802546c
 8004164:	58025480 	.word	0x58025480
 8004168:	58025494 	.word	0x58025494
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d028      	beq.n	80041c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004180:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004186:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2201      	movs	r2, #1
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041fc:	4b67      	ldr	r3, [pc, #412]	@ (800439c <HAL_DMA_IRQHandler+0x1ac>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a67      	ldr	r2, [pc, #412]	@ (80043a0 <HAL_DMA_IRQHandler+0x1b0>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0a9b      	lsrs	r3, r3, #10
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a5f      	ldr	r2, [pc, #380]	@ (80043a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d04a      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a5d      	ldr	r2, [pc, #372]	@ (80043a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d045      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5c      	ldr	r2, [pc, #368]	@ (80043ac <HAL_DMA_IRQHandler+0x1bc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d040      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a5a      	ldr	r2, [pc, #360]	@ (80043b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d03b      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a59      	ldr	r2, [pc, #356]	@ (80043b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d036      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a57      	ldr	r2, [pc, #348]	@ (80043b8 <HAL_DMA_IRQHandler+0x1c8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d031      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a56      	ldr	r2, [pc, #344]	@ (80043bc <HAL_DMA_IRQHandler+0x1cc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d02c      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a54      	ldr	r2, [pc, #336]	@ (80043c0 <HAL_DMA_IRQHandler+0x1d0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d027      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a53      	ldr	r2, [pc, #332]	@ (80043c4 <HAL_DMA_IRQHandler+0x1d4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a51      	ldr	r2, [pc, #324]	@ (80043c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01d      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a50      	ldr	r2, [pc, #320]	@ (80043cc <HAL_DMA_IRQHandler+0x1dc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a4e      	ldr	r2, [pc, #312]	@ (80043d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a4d      	ldr	r2, [pc, #308]	@ (80043d4 <HAL_DMA_IRQHandler+0x1e4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a4b      	ldr	r2, [pc, #300]	@ (80043d8 <HAL_DMA_IRQHandler+0x1e8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a4a      	ldr	r2, [pc, #296]	@ (80043dc <HAL_DMA_IRQHandler+0x1ec>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xd2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a48      	ldr	r2, [pc, #288]	@ (80043e0 <HAL_DMA_IRQHandler+0x1f0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_DMA_IRQHandler+0xd6>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_DMA_IRQHandler+0xd8>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 842b 	beq.w	8004b24 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2208      	movs	r2, #8
 80042d8:	409a      	lsls	r2, r3
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80a2 	beq.w	8004428 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2e      	ldr	r2, [pc, #184]	@ (80043a4 <HAL_DMA_IRQHandler+0x1b4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d04a      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2d      	ldr	r2, [pc, #180]	@ (80043a8 <HAL_DMA_IRQHandler+0x1b8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d045      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2b      	ldr	r2, [pc, #172]	@ (80043ac <HAL_DMA_IRQHandler+0x1bc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d040      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2a      	ldr	r2, [pc, #168]	@ (80043b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d03b      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a28      	ldr	r2, [pc, #160]	@ (80043b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d036      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a27      	ldr	r2, [pc, #156]	@ (80043b8 <HAL_DMA_IRQHandler+0x1c8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d031      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a25      	ldr	r2, [pc, #148]	@ (80043bc <HAL_DMA_IRQHandler+0x1cc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d02c      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a24      	ldr	r2, [pc, #144]	@ (80043c0 <HAL_DMA_IRQHandler+0x1d0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d027      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a22      	ldr	r2, [pc, #136]	@ (80043c4 <HAL_DMA_IRQHandler+0x1d4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d022      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a21      	ldr	r2, [pc, #132]	@ (80043c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d01d      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1f      	ldr	r2, [pc, #124]	@ (80043cc <HAL_DMA_IRQHandler+0x1dc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1e      	ldr	r2, [pc, #120]	@ (80043d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1c      	ldr	r2, [pc, #112]	@ (80043d4 <HAL_DMA_IRQHandler+0x1e4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1b      	ldr	r2, [pc, #108]	@ (80043d8 <HAL_DMA_IRQHandler+0x1e8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a19      	ldr	r2, [pc, #100]	@ (80043dc <HAL_DMA_IRQHandler+0x1ec>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_DMA_IRQHandler+0x194>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a18      	ldr	r2, [pc, #96]	@ (80043e0 <HAL_DMA_IRQHandler+0x1f0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d12f      	bne.n	80043e4 <HAL_DMA_IRQHandler+0x1f4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf14      	ite	ne
 8004392:	2301      	movne	r3, #1
 8004394:	2300      	moveq	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e02e      	b.n	80043f8 <HAL_DMA_IRQHandler+0x208>
 800439a:	bf00      	nop
 800439c:	24000000 	.word	0x24000000
 80043a0:	1b4e81b5 	.word	0x1b4e81b5
 80043a4:	40020010 	.word	0x40020010
 80043a8:	40020028 	.word	0x40020028
 80043ac:	40020040 	.word	0x40020040
 80043b0:	40020058 	.word	0x40020058
 80043b4:	40020070 	.word	0x40020070
 80043b8:	40020088 	.word	0x40020088
 80043bc:	400200a0 	.word	0x400200a0
 80043c0:	400200b8 	.word	0x400200b8
 80043c4:	40020410 	.word	0x40020410
 80043c8:	40020428 	.word	0x40020428
 80043cc:	40020440 	.word	0x40020440
 80043d0:	40020458 	.word	0x40020458
 80043d4:	40020470 	.word	0x40020470
 80043d8:	40020488 	.word	0x40020488
 80043dc:	400204a0 	.word	0x400204a0
 80043e0:	400204b8 	.word	0x400204b8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bf14      	ite	ne
 80043f2:	2301      	movne	r3, #1
 80043f4:	2300      	moveq	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0204 	bic.w	r2, r2, #4
 800440a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2208      	movs	r2, #8
 8004416:	409a      	lsls	r2, r3
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004420:	f043 0201 	orr.w	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d06e      	beq.n	800451c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a69      	ldr	r2, [pc, #420]	@ (80045e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d04a      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a67      	ldr	r2, [pc, #412]	@ (80045ec <HAL_DMA_IRQHandler+0x3fc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d045      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a66      	ldr	r2, [pc, #408]	@ (80045f0 <HAL_DMA_IRQHandler+0x400>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d040      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a64      	ldr	r2, [pc, #400]	@ (80045f4 <HAL_DMA_IRQHandler+0x404>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d03b      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a63      	ldr	r2, [pc, #396]	@ (80045f8 <HAL_DMA_IRQHandler+0x408>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d036      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a61      	ldr	r2, [pc, #388]	@ (80045fc <HAL_DMA_IRQHandler+0x40c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d031      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a60      	ldr	r2, [pc, #384]	@ (8004600 <HAL_DMA_IRQHandler+0x410>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d02c      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a5e      	ldr	r2, [pc, #376]	@ (8004604 <HAL_DMA_IRQHandler+0x414>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d027      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a5d      	ldr	r2, [pc, #372]	@ (8004608 <HAL_DMA_IRQHandler+0x418>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a5b      	ldr	r2, [pc, #364]	@ (800460c <HAL_DMA_IRQHandler+0x41c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01d      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004610 <HAL_DMA_IRQHandler+0x420>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a58      	ldr	r2, [pc, #352]	@ (8004614 <HAL_DMA_IRQHandler+0x424>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a57      	ldr	r2, [pc, #348]	@ (8004618 <HAL_DMA_IRQHandler+0x428>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a55      	ldr	r2, [pc, #340]	@ (800461c <HAL_DMA_IRQHandler+0x42c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a54      	ldr	r2, [pc, #336]	@ (8004620 <HAL_DMA_IRQHandler+0x430>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_DMA_IRQHandler+0x2ee>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a52      	ldr	r2, [pc, #328]	@ (8004624 <HAL_DMA_IRQHandler+0x434>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10a      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x304>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e003      	b.n	80044fc <HAL_DMA_IRQHandler+0x30c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2201      	movs	r2, #1
 800450a:	409a      	lsls	r2, r3
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	f043 0202 	orr.w	r2, r3, #2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2204      	movs	r2, #4
 8004526:	409a      	lsls	r2, r3
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 808f 	beq.w	8004650 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2c      	ldr	r2, [pc, #176]	@ (80045e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d04a      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2a      	ldr	r2, [pc, #168]	@ (80045ec <HAL_DMA_IRQHandler+0x3fc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d045      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a29      	ldr	r2, [pc, #164]	@ (80045f0 <HAL_DMA_IRQHandler+0x400>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d040      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a27      	ldr	r2, [pc, #156]	@ (80045f4 <HAL_DMA_IRQHandler+0x404>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d03b      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a26      	ldr	r2, [pc, #152]	@ (80045f8 <HAL_DMA_IRQHandler+0x408>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d036      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a24      	ldr	r2, [pc, #144]	@ (80045fc <HAL_DMA_IRQHandler+0x40c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d031      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a23      	ldr	r2, [pc, #140]	@ (8004600 <HAL_DMA_IRQHandler+0x410>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d02c      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a21      	ldr	r2, [pc, #132]	@ (8004604 <HAL_DMA_IRQHandler+0x414>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d027      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a20      	ldr	r2, [pc, #128]	@ (8004608 <HAL_DMA_IRQHandler+0x418>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d022      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1e      	ldr	r2, [pc, #120]	@ (800460c <HAL_DMA_IRQHandler+0x41c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01d      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1d      	ldr	r2, [pc, #116]	@ (8004610 <HAL_DMA_IRQHandler+0x420>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d018      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <HAL_DMA_IRQHandler+0x424>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004618 <HAL_DMA_IRQHandler+0x428>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a18      	ldr	r2, [pc, #96]	@ (800461c <HAL_DMA_IRQHandler+0x42c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <HAL_DMA_IRQHandler+0x430>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x3e2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <HAL_DMA_IRQHandler+0x434>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d12a      	bne.n	8004628 <HAL_DMA_IRQHandler+0x438>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e023      	b.n	8004630 <HAL_DMA_IRQHandler+0x440>
 80045e8:	40020010 	.word	0x40020010
 80045ec:	40020028 	.word	0x40020028
 80045f0:	40020040 	.word	0x40020040
 80045f4:	40020058 	.word	0x40020058
 80045f8:	40020070 	.word	0x40020070
 80045fc:	40020088 	.word	0x40020088
 8004600:	400200a0 	.word	0x400200a0
 8004604:	400200b8 	.word	0x400200b8
 8004608:	40020410 	.word	0x40020410
 800460c:	40020428 	.word	0x40020428
 8004610:	40020440 	.word	0x40020440
 8004614:	40020458 	.word	0x40020458
 8004618:	40020470 	.word	0x40020470
 800461c:	40020488 	.word	0x40020488
 8004620:	400204a0 	.word	0x400204a0
 8004624:	400204b8 	.word	0x400204b8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2204      	movs	r2, #4
 800463e:	409a      	lsls	r2, r3
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	2210      	movs	r2, #16
 800465a:	409a      	lsls	r2, r3
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80a6 	beq.w	80047b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a85      	ldr	r2, [pc, #532]	@ (8004880 <HAL_DMA_IRQHandler+0x690>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d04a      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a83      	ldr	r2, [pc, #524]	@ (8004884 <HAL_DMA_IRQHandler+0x694>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d045      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a82      	ldr	r2, [pc, #520]	@ (8004888 <HAL_DMA_IRQHandler+0x698>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d040      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a80      	ldr	r2, [pc, #512]	@ (800488c <HAL_DMA_IRQHandler+0x69c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7f      	ldr	r2, [pc, #508]	@ (8004890 <HAL_DMA_IRQHandler+0x6a0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d036      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a7d      	ldr	r2, [pc, #500]	@ (8004894 <HAL_DMA_IRQHandler+0x6a4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d031      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004898 <HAL_DMA_IRQHandler+0x6a8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02c      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a7a      	ldr	r2, [pc, #488]	@ (800489c <HAL_DMA_IRQHandler+0x6ac>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d027      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a79      	ldr	r2, [pc, #484]	@ (80048a0 <HAL_DMA_IRQHandler+0x6b0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a77      	ldr	r2, [pc, #476]	@ (80048a4 <HAL_DMA_IRQHandler+0x6b4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a76      	ldr	r2, [pc, #472]	@ (80048a8 <HAL_DMA_IRQHandler+0x6b8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a74      	ldr	r2, [pc, #464]	@ (80048ac <HAL_DMA_IRQHandler+0x6bc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a73      	ldr	r2, [pc, #460]	@ (80048b0 <HAL_DMA_IRQHandler+0x6c0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a71      	ldr	r2, [pc, #452]	@ (80048b4 <HAL_DMA_IRQHandler+0x6c4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a70      	ldr	r2, [pc, #448]	@ (80048b8 <HAL_DMA_IRQHandler+0x6c8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_IRQHandler+0x516>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6e      	ldr	r2, [pc, #440]	@ (80048bc <HAL_DMA_IRQHandler+0x6cc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10a      	bne.n	800471c <HAL_DMA_IRQHandler+0x52c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e009      	b.n	8004730 <HAL_DMA_IRQHandler+0x540>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d03e      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2210      	movs	r2, #16
 800473e:	409a      	lsls	r2, r3
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d018      	beq.n	8004784 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d108      	bne.n	8004772 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d024      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
 8004770:	e01f      	b.n	80047b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01b      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
 8004782:	e016      	b.n	80047b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0208 	bic.w	r2, r2, #8
 80047a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2220      	movs	r2, #32
 80047bc:	409a      	lsls	r2, r3
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8110 	beq.w	80049e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004880 <HAL_DMA_IRQHandler+0x690>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d04a      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004884 <HAL_DMA_IRQHandler+0x694>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d045      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a29      	ldr	r2, [pc, #164]	@ (8004888 <HAL_DMA_IRQHandler+0x698>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d040      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a28      	ldr	r2, [pc, #160]	@ (800488c <HAL_DMA_IRQHandler+0x69c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d03b      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a26      	ldr	r2, [pc, #152]	@ (8004890 <HAL_DMA_IRQHandler+0x6a0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d036      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a25      	ldr	r2, [pc, #148]	@ (8004894 <HAL_DMA_IRQHandler+0x6a4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d031      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a23      	ldr	r2, [pc, #140]	@ (8004898 <HAL_DMA_IRQHandler+0x6a8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02c      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a22      	ldr	r2, [pc, #136]	@ (800489c <HAL_DMA_IRQHandler+0x6ac>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d027      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a20      	ldr	r2, [pc, #128]	@ (80048a0 <HAL_DMA_IRQHandler+0x6b0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d022      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1f      	ldr	r2, [pc, #124]	@ (80048a4 <HAL_DMA_IRQHandler+0x6b4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d01d      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <HAL_DMA_IRQHandler+0x6b8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1c      	ldr	r2, [pc, #112]	@ (80048ac <HAL_DMA_IRQHandler+0x6bc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1a      	ldr	r2, [pc, #104]	@ (80048b0 <HAL_DMA_IRQHandler+0x6c0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <HAL_DMA_IRQHandler+0x6c4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a17      	ldr	r2, [pc, #92]	@ (80048b8 <HAL_DMA_IRQHandler+0x6c8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_DMA_IRQHandler+0x678>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <HAL_DMA_IRQHandler+0x6cc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d12b      	bne.n	80048c0 <HAL_DMA_IRQHandler+0x6d0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	bf14      	ite	ne
 8004876:	2301      	movne	r3, #1
 8004878:	2300      	moveq	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e02a      	b.n	80048d4 <HAL_DMA_IRQHandler+0x6e4>
 800487e:	bf00      	nop
 8004880:	40020010 	.word	0x40020010
 8004884:	40020028 	.word	0x40020028
 8004888:	40020040 	.word	0x40020040
 800488c:	40020058 	.word	0x40020058
 8004890:	40020070 	.word	0x40020070
 8004894:	40020088 	.word	0x40020088
 8004898:	400200a0 	.word	0x400200a0
 800489c:	400200b8 	.word	0x400200b8
 80048a0:	40020410 	.word	0x40020410
 80048a4:	40020428 	.word	0x40020428
 80048a8:	40020440 	.word	0x40020440
 80048ac:	40020458 	.word	0x40020458
 80048b0:	40020470 	.word	0x40020470
 80048b4:	40020488 	.word	0x40020488
 80048b8:	400204a0 	.word	0x400204a0
 80048bc:	400204b8 	.word	0x400204b8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8087 	beq.w	80049e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2220      	movs	r2, #32
 80048e4:	409a      	lsls	r2, r3
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d139      	bne.n	800496a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0216 	bic.w	r2, r2, #22
 8004904:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004914:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <HAL_DMA_IRQHandler+0x736>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0208 	bic.w	r2, r2, #8
 8004934:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	223f      	movs	r2, #63	@ 0x3f
 8004940:	409a      	lsls	r2, r3
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 834a 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
          }
          return;
 8004968:	e344      	b.n	8004ff4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d018      	beq.n	80049aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	2b00      	cmp	r3, #0
 800498c:	d02c      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
 8004996:	e027      	b.n	80049e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d023      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
 80049a8:	e01e      	b.n	80049e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0210 	bic.w	r2, r2, #16
 80049c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8306 	beq.w	8004ffe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8088 	beq.w	8004b10 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a7a      	ldr	r2, [pc, #488]	@ (8004bf8 <HAL_DMA_IRQHandler+0xa08>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04a      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a79      	ldr	r2, [pc, #484]	@ (8004bfc <HAL_DMA_IRQHandler+0xa0c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d045      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a77      	ldr	r2, [pc, #476]	@ (8004c00 <HAL_DMA_IRQHandler+0xa10>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d040      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a76      	ldr	r2, [pc, #472]	@ (8004c04 <HAL_DMA_IRQHandler+0xa14>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d03b      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a74      	ldr	r2, [pc, #464]	@ (8004c08 <HAL_DMA_IRQHandler+0xa18>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d036      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a73      	ldr	r2, [pc, #460]	@ (8004c0c <HAL_DMA_IRQHandler+0xa1c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d031      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a71      	ldr	r2, [pc, #452]	@ (8004c10 <HAL_DMA_IRQHandler+0xa20>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d02c      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a70      	ldr	r2, [pc, #448]	@ (8004c14 <HAL_DMA_IRQHandler+0xa24>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d027      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c18 <HAL_DMA_IRQHandler+0xa28>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d022      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6d      	ldr	r2, [pc, #436]	@ (8004c1c <HAL_DMA_IRQHandler+0xa2c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d01d      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a6b      	ldr	r2, [pc, #428]	@ (8004c20 <HAL_DMA_IRQHandler+0xa30>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d018      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6a      	ldr	r2, [pc, #424]	@ (8004c24 <HAL_DMA_IRQHandler+0xa34>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a68      	ldr	r2, [pc, #416]	@ (8004c28 <HAL_DMA_IRQHandler+0xa38>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00e      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a67      	ldr	r2, [pc, #412]	@ (8004c2c <HAL_DMA_IRQHandler+0xa3c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a65      	ldr	r2, [pc, #404]	@ (8004c30 <HAL_DMA_IRQHandler+0xa40>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x8b8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a64      	ldr	r2, [pc, #400]	@ (8004c34 <HAL_DMA_IRQHandler+0xa44>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d108      	bne.n	8004aba <HAL_DMA_IRQHandler+0x8ca>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e007      	b.n	8004aca <HAL_DMA_IRQHandler+0x8da>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d307      	bcc.n	8004ae6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f2      	bne.n	8004aca <HAL_DMA_IRQHandler+0x8da>
 8004ae4:	e000      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ae6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2203      	movs	r2, #3
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004afe:	e003      	b.n	8004b08 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8272 	beq.w	8004ffe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
 8004b22:	e26c      	b.n	8004ffe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a43      	ldr	r2, [pc, #268]	@ (8004c38 <HAL_DMA_IRQHandler+0xa48>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d022      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x984>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a42      	ldr	r2, [pc, #264]	@ (8004c3c <HAL_DMA_IRQHandler+0xa4c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d01d      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x984>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a40      	ldr	r2, [pc, #256]	@ (8004c40 <HAL_DMA_IRQHandler+0xa50>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d018      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x984>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a3f      	ldr	r2, [pc, #252]	@ (8004c44 <HAL_DMA_IRQHandler+0xa54>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x984>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a3d      	ldr	r2, [pc, #244]	@ (8004c48 <HAL_DMA_IRQHandler+0xa58>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x984>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a3c      	ldr	r2, [pc, #240]	@ (8004c4c <HAL_DMA_IRQHandler+0xa5c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x984>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3a      	ldr	r2, [pc, #232]	@ (8004c50 <HAL_DMA_IRQHandler+0xa60>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x984>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a39      	ldr	r2, [pc, #228]	@ (8004c54 <HAL_DMA_IRQHandler+0xa64>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d101      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x988>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_DMA_IRQHandler+0x98a>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 823f 	beq.w	8004ffe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	2204      	movs	r2, #4
 8004b92:	409a      	lsls	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80cd 	beq.w	8004d38 <HAL_DMA_IRQHandler+0xb48>
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80c7 	beq.w	8004d38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d049      	beq.n	8004c58 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8210 	beq.w	8004ff8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004be0:	e20a      	b.n	8004ff8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8206 	beq.w	8004ff8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf4:	e200      	b.n	8004ff8 <HAL_DMA_IRQHandler+0xe08>
 8004bf6:	bf00      	nop
 8004bf8:	40020010 	.word	0x40020010
 8004bfc:	40020028 	.word	0x40020028
 8004c00:	40020040 	.word	0x40020040
 8004c04:	40020058 	.word	0x40020058
 8004c08:	40020070 	.word	0x40020070
 8004c0c:	40020088 	.word	0x40020088
 8004c10:	400200a0 	.word	0x400200a0
 8004c14:	400200b8 	.word	0x400200b8
 8004c18:	40020410 	.word	0x40020410
 8004c1c:	40020428 	.word	0x40020428
 8004c20:	40020440 	.word	0x40020440
 8004c24:	40020458 	.word	0x40020458
 8004c28:	40020470 	.word	0x40020470
 8004c2c:	40020488 	.word	0x40020488
 8004c30:	400204a0 	.word	0x400204a0
 8004c34:	400204b8 	.word	0x400204b8
 8004c38:	58025408 	.word	0x58025408
 8004c3c:	5802541c 	.word	0x5802541c
 8004c40:	58025430 	.word	0x58025430
 8004c44:	58025444 	.word	0x58025444
 8004c48:	58025458 	.word	0x58025458
 8004c4c:	5802546c 	.word	0x5802546c
 8004c50:	58025480 	.word	0x58025480
 8004c54:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d160      	bne.n	8004d24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7f      	ldr	r2, [pc, #508]	@ (8004e64 <HAL_DMA_IRQHandler+0xc74>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d04a      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a7d      	ldr	r2, [pc, #500]	@ (8004e68 <HAL_DMA_IRQHandler+0xc78>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d045      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e6c <HAL_DMA_IRQHandler+0xc7c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d040      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a7a      	ldr	r2, [pc, #488]	@ (8004e70 <HAL_DMA_IRQHandler+0xc80>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d03b      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a79      	ldr	r2, [pc, #484]	@ (8004e74 <HAL_DMA_IRQHandler+0xc84>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d036      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a77      	ldr	r2, [pc, #476]	@ (8004e78 <HAL_DMA_IRQHandler+0xc88>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d031      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a76      	ldr	r2, [pc, #472]	@ (8004e7c <HAL_DMA_IRQHandler+0xc8c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d02c      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a74      	ldr	r2, [pc, #464]	@ (8004e80 <HAL_DMA_IRQHandler+0xc90>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d027      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a73      	ldr	r2, [pc, #460]	@ (8004e84 <HAL_DMA_IRQHandler+0xc94>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a71      	ldr	r2, [pc, #452]	@ (8004e88 <HAL_DMA_IRQHandler+0xc98>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01d      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a70      	ldr	r2, [pc, #448]	@ (8004e8c <HAL_DMA_IRQHandler+0xc9c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d018      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e90 <HAL_DMA_IRQHandler+0xca0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6d      	ldr	r2, [pc, #436]	@ (8004e94 <HAL_DMA_IRQHandler+0xca4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e98 <HAL_DMA_IRQHandler+0xca8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6a      	ldr	r2, [pc, #424]	@ (8004e9c <HAL_DMA_IRQHandler+0xcac>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xb12>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a68      	ldr	r2, [pc, #416]	@ (8004ea0 <HAL_DMA_IRQHandler+0xcb0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <HAL_DMA_IRQHandler+0xb24>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0208 	bic.w	r2, r2, #8
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e007      	b.n	8004d24 <HAL_DMA_IRQHandler+0xb34>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0204 	bic.w	r2, r2, #4
 8004d22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8165 	beq.w	8004ff8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d36:	e15f      	b.n	8004ff8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2202      	movs	r2, #2
 8004d42:	409a      	lsls	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80c5 	beq.w	8004ed8 <HAL_DMA_IRQHandler+0xce8>
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80bf 	beq.w	8004ed8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2202      	movs	r2, #2
 8004d64:	409a      	lsls	r2, r3
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d018      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 813a 	beq.w	8004ffc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d90:	e134      	b.n	8004ffc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8130 	beq.w	8004ffc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da4:	e12a      	b.n	8004ffc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f040 8089 	bne.w	8004ec4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2b      	ldr	r2, [pc, #172]	@ (8004e64 <HAL_DMA_IRQHandler+0xc74>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d04a      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a29      	ldr	r2, [pc, #164]	@ (8004e68 <HAL_DMA_IRQHandler+0xc78>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d045      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <HAL_DMA_IRQHandler+0xc7c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d040      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a26      	ldr	r2, [pc, #152]	@ (8004e70 <HAL_DMA_IRQHandler+0xc80>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d03b      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a25      	ldr	r2, [pc, #148]	@ (8004e74 <HAL_DMA_IRQHandler+0xc84>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d036      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a23      	ldr	r2, [pc, #140]	@ (8004e78 <HAL_DMA_IRQHandler+0xc88>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d031      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a22      	ldr	r2, [pc, #136]	@ (8004e7c <HAL_DMA_IRQHandler+0xc8c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d02c      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a20      	ldr	r2, [pc, #128]	@ (8004e80 <HAL_DMA_IRQHandler+0xc90>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d027      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1f      	ldr	r2, [pc, #124]	@ (8004e84 <HAL_DMA_IRQHandler+0xc94>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d022      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	@ (8004e88 <HAL_DMA_IRQHandler+0xc98>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01d      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e8c <HAL_DMA_IRQHandler+0xc9c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d018      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1a      	ldr	r2, [pc, #104]	@ (8004e90 <HAL_DMA_IRQHandler+0xca0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <HAL_DMA_IRQHandler+0xca4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00e      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a17      	ldr	r2, [pc, #92]	@ (8004e98 <HAL_DMA_IRQHandler+0xca8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d009      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <HAL_DMA_IRQHandler+0xcac>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d004      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xc62>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <HAL_DMA_IRQHandler+0xcb0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d128      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0xcb4>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0214 	bic.w	r2, r2, #20
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e027      	b.n	8004eb4 <HAL_DMA_IRQHandler+0xcc4>
 8004e64:	40020010 	.word	0x40020010
 8004e68:	40020028 	.word	0x40020028
 8004e6c:	40020040 	.word	0x40020040
 8004e70:	40020058 	.word	0x40020058
 8004e74:	40020070 	.word	0x40020070
 8004e78:	40020088 	.word	0x40020088
 8004e7c:	400200a0 	.word	0x400200a0
 8004e80:	400200b8 	.word	0x400200b8
 8004e84:	40020410 	.word	0x40020410
 8004e88:	40020428 	.word	0x40020428
 8004e8c:	40020440 	.word	0x40020440
 8004e90:	40020458 	.word	0x40020458
 8004e94:	40020470 	.word	0x40020470
 8004e98:	40020488 	.word	0x40020488
 8004e9c:	400204a0 	.word	0x400204a0
 8004ea0:	400204b8 	.word	0x400204b8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 020a 	bic.w	r2, r2, #10
 8004eb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8097 	beq.w	8004ffc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed6:	e091      	b.n	8004ffc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8088 	beq.w	8004ffe <HAL_DMA_IRQHandler+0xe0e>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8082 	beq.w	8004ffe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a41      	ldr	r2, [pc, #260]	@ (8005004 <HAL_DMA_IRQHandler+0xe14>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d04a      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a3f      	ldr	r2, [pc, #252]	@ (8005008 <HAL_DMA_IRQHandler+0xe18>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d045      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a3e      	ldr	r2, [pc, #248]	@ (800500c <HAL_DMA_IRQHandler+0xe1c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d040      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8005010 <HAL_DMA_IRQHandler+0xe20>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d03b      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a3b      	ldr	r2, [pc, #236]	@ (8005014 <HAL_DMA_IRQHandler+0xe24>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d036      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a39      	ldr	r2, [pc, #228]	@ (8005018 <HAL_DMA_IRQHandler+0xe28>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d031      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a38      	ldr	r2, [pc, #224]	@ (800501c <HAL_DMA_IRQHandler+0xe2c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d02c      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a36      	ldr	r2, [pc, #216]	@ (8005020 <HAL_DMA_IRQHandler+0xe30>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d027      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <HAL_DMA_IRQHandler+0xe34>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d022      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a33      	ldr	r2, [pc, #204]	@ (8005028 <HAL_DMA_IRQHandler+0xe38>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01d      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a32      	ldr	r2, [pc, #200]	@ (800502c <HAL_DMA_IRQHandler+0xe3c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d018      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	@ (8005030 <HAL_DMA_IRQHandler+0xe40>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2f      	ldr	r2, [pc, #188]	@ (8005034 <HAL_DMA_IRQHandler+0xe44>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <HAL_DMA_IRQHandler+0xe48>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800503c <HAL_DMA_IRQHandler+0xe4c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xdaa>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2a      	ldr	r2, [pc, #168]	@ (8005040 <HAL_DMA_IRQHandler+0xe50>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d108      	bne.n	8004fac <HAL_DMA_IRQHandler+0xdbc>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 021c 	bic.w	r2, r2, #28
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e007      	b.n	8004fbc <HAL_DMA_IRQHandler+0xdcc>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 020e 	bic.w	r2, r2, #14
 8004fba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
 8004ff2:	e004      	b.n	8004ffe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ff4:	bf00      	nop
 8004ff6:	e002      	b.n	8004ffe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ffc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ffe:	3728      	adds	r7, #40	@ 0x28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40020010 	.word	0x40020010
 8005008:	40020028 	.word	0x40020028
 800500c:	40020040 	.word	0x40020040
 8005010:	40020058 	.word	0x40020058
 8005014:	40020070 	.word	0x40020070
 8005018:	40020088 	.word	0x40020088
 800501c:	400200a0 	.word	0x400200a0
 8005020:	400200b8 	.word	0x400200b8
 8005024:	40020410 	.word	0x40020410
 8005028:	40020428 	.word	0x40020428
 800502c:	40020440 	.word	0x40020440
 8005030:	40020458 	.word	0x40020458
 8005034:	40020470 	.word	0x40020470
 8005038:	40020488 	.word	0x40020488
 800503c:	400204a0 	.word	0x400204a0
 8005040:	400204b8 	.word	0x400204b8

08005044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a42      	ldr	r2, [pc, #264]	@ (800515c <DMA_CalcBaseAndBitshift+0x118>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d04a      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a41      	ldr	r2, [pc, #260]	@ (8005160 <DMA_CalcBaseAndBitshift+0x11c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d045      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a3f      	ldr	r2, [pc, #252]	@ (8005164 <DMA_CalcBaseAndBitshift+0x120>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d040      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a3e      	ldr	r2, [pc, #248]	@ (8005168 <DMA_CalcBaseAndBitshift+0x124>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d03b      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a3c      	ldr	r2, [pc, #240]	@ (800516c <DMA_CalcBaseAndBitshift+0x128>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d036      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a3b      	ldr	r2, [pc, #236]	@ (8005170 <DMA_CalcBaseAndBitshift+0x12c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d031      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a39      	ldr	r2, [pc, #228]	@ (8005174 <DMA_CalcBaseAndBitshift+0x130>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d02c      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a38      	ldr	r2, [pc, #224]	@ (8005178 <DMA_CalcBaseAndBitshift+0x134>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d027      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a36      	ldr	r2, [pc, #216]	@ (800517c <DMA_CalcBaseAndBitshift+0x138>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d022      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a35      	ldr	r2, [pc, #212]	@ (8005180 <DMA_CalcBaseAndBitshift+0x13c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d01d      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a33      	ldr	r2, [pc, #204]	@ (8005184 <DMA_CalcBaseAndBitshift+0x140>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d018      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a32      	ldr	r2, [pc, #200]	@ (8005188 <DMA_CalcBaseAndBitshift+0x144>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a30      	ldr	r2, [pc, #192]	@ (800518c <DMA_CalcBaseAndBitshift+0x148>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00e      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005190 <DMA_CalcBaseAndBitshift+0x14c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d009      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005194 <DMA_CalcBaseAndBitshift+0x150>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <DMA_CalcBaseAndBitshift+0xa8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005198 <DMA_CalcBaseAndBitshift+0x154>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <DMA_CalcBaseAndBitshift+0xac>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <DMA_CalcBaseAndBitshift+0xae>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d024      	beq.n	8005140 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	3b10      	subs	r3, #16
 80050fe:	4a27      	ldr	r2, [pc, #156]	@ (800519c <DMA_CalcBaseAndBitshift+0x158>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	4a24      	ldr	r2, [pc, #144]	@ (80051a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	461a      	mov	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d908      	bls.n	8005130 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	4b1f      	ldr	r3, [pc, #124]	@ (80051a4 <DMA_CalcBaseAndBitshift+0x160>)
 8005126:	4013      	ands	r3, r2
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	659a      	str	r2, [r3, #88]	@ 0x58
 800512e:	e00d      	b.n	800514c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	4b1b      	ldr	r3, [pc, #108]	@ (80051a4 <DMA_CalcBaseAndBitshift+0x160>)
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6593      	str	r3, [r2, #88]	@ 0x58
 800513e:	e005      	b.n	800514c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8
 800519c:	aaaaaaab 	.word	0xaaaaaaab
 80051a0:	08012e20 	.word	0x08012e20
 80051a4:	fffffc00 	.word	0xfffffc00

080051a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d120      	bne.n	80051fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d858      	bhi.n	8005276 <DMA_CheckFifoParam+0xce>
 80051c4:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <DMA_CheckFifoParam+0x24>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	080051ef 	.word	0x080051ef
 80051d4:	080051dd 	.word	0x080051dd
 80051d8:	08005277 	.word	0x08005277
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d048      	beq.n	800527a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051ec:	e045      	b.n	800527a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051f6:	d142      	bne.n	800527e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051fc:	e03f      	b.n	800527e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005206:	d123      	bne.n	8005250 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	2b03      	cmp	r3, #3
 800520e:	d838      	bhi.n	8005282 <DMA_CheckFifoParam+0xda>
 8005210:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <DMA_CheckFifoParam+0x70>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005229 	.word	0x08005229
 800521c:	0800522f 	.word	0x0800522f
 8005220:	08005229 	.word	0x08005229
 8005224:	08005241 	.word	0x08005241
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
        break;
 800522c:	e030      	b.n	8005290 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d025      	beq.n	8005286 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800523e:	e022      	b.n	8005286 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005248:	d11f      	bne.n	800528a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800524e:	e01c      	b.n	800528a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	2b02      	cmp	r3, #2
 8005256:	d902      	bls.n	800525e <DMA_CheckFifoParam+0xb6>
 8005258:	2b03      	cmp	r3, #3
 800525a:	d003      	beq.n	8005264 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800525c:	e018      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
        break;
 8005262:	e015      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00e      	beq.n	800528e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
    break;
 8005274:	e00b      	b.n	800528e <DMA_CheckFifoParam+0xe6>
        break;
 8005276:	bf00      	nop
 8005278:	e00a      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
        break;
 800527a:	bf00      	nop
 800527c:	e008      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
        break;
 800527e:	bf00      	nop
 8005280:	e006      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
        break;
 8005282:	bf00      	nop
 8005284:	e004      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
        break;
 8005286:	bf00      	nop
 8005288:	e002      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
        break;
 800528a:	bf00      	nop
 800528c:	e000      	b.n	8005290 <DMA_CheckFifoParam+0xe8>
    break;
 800528e:	bf00      	nop
    }
  }

  return status;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop

080052a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a38      	ldr	r2, [pc, #224]	@ (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a36      	ldr	r2, [pc, #216]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a35      	ldr	r2, [pc, #212]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a33      	ldr	r2, [pc, #204]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a32      	ldr	r2, [pc, #200]	@ (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a30      	ldr	r2, [pc, #192]	@ (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2f      	ldr	r2, [pc, #188]	@ (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2d      	ldr	r2, [pc, #180]	@ (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01a      	beq.n	800533e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	3b08      	subs	r3, #8
 8005310:	4a28      	ldr	r2, [pc, #160]	@ (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	091b      	lsrs	r3, r3, #4
 8005318:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a24      	ldr	r2, [pc, #144]	@ (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800532c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2201      	movs	r2, #1
 8005336:	409a      	lsls	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800533c:	e024      	b.n	8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	3b10      	subs	r3, #16
 8005346:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4a1c      	ldr	r2, [pc, #112]	@ (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d806      	bhi.n	8005366 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d902      	bls.n	8005366 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3308      	adds	r3, #8
 8005364:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4b18      	ldr	r3, [pc, #96]	@ (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a16      	ldr	r2, [pc, #88]	@ (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005378:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2201      	movs	r2, #1
 8005382:	409a      	lsls	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	58025408 	.word	0x58025408
 8005398:	5802541c 	.word	0x5802541c
 800539c:	58025430 	.word	0x58025430
 80053a0:	58025444 	.word	0x58025444
 80053a4:	58025458 	.word	0x58025458
 80053a8:	5802546c 	.word	0x5802546c
 80053ac:	58025480 	.word	0x58025480
 80053b0:	58025494 	.word	0x58025494
 80053b4:	cccccccd 	.word	0xcccccccd
 80053b8:	16009600 	.word	0x16009600
 80053bc:	58025880 	.word	0x58025880
 80053c0:	aaaaaaab 	.word	0xaaaaaaab
 80053c4:	400204b8 	.word	0x400204b8
 80053c8:	4002040f 	.word	0x4002040f
 80053cc:	10008200 	.word	0x10008200
 80053d0:	40020880 	.word	0x40020880

080053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d04a      	beq.n	8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d847      	bhi.n	8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a25      	ldr	r2, [pc, #148]	@ (800548c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a24      	ldr	r2, [pc, #144]	@ (8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a22      	ldr	r2, [pc, #136]	@ (8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a21      	ldr	r2, [pc, #132]	@ (8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1f      	ldr	r2, [pc, #124]	@ (800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1c      	ldr	r2, [pc, #112]	@ (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d101      	bne.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005444:	2300      	movs	r3, #0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4b17      	ldr	r3, [pc, #92]	@ (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800545c:	671a      	str	r2, [r3, #112]	@ 0x70
 800545e:	e009      	b.n	8005474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4b14      	ldr	r3, [pc, #80]	@ (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a11      	ldr	r2, [pc, #68]	@ (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005472:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3b01      	subs	r3, #1
 8005478:	2201      	movs	r2, #1
 800547a:	409a      	lsls	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	58025408 	.word	0x58025408
 8005490:	5802541c 	.word	0x5802541c
 8005494:	58025430 	.word	0x58025430
 8005498:	58025444 	.word	0x58025444
 800549c:	58025458 	.word	0x58025458
 80054a0:	5802546c 	.word	0x5802546c
 80054a4:	58025480 	.word	0x58025480
 80054a8:	58025494 	.word	0x58025494
 80054ac:	1600963f 	.word	0x1600963f
 80054b0:	58025940 	.word	0x58025940
 80054b4:	1000823f 	.word	0x1000823f
 80054b8:	40020940 	.word	0x40020940

080054bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	@ 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054ca:	4b89      	ldr	r3, [pc, #548]	@ (80056f0 <HAL_GPIO_Init+0x234>)
 80054cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054ce:	e194      	b.n	80057fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2101      	movs	r1, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8186 	beq.w	80057f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d005      	beq.n	8005500 <HAL_GPIO_Init+0x44>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d130      	bne.n	8005562 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	2203      	movs	r2, #3
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4013      	ands	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005536:	2201      	movs	r2, #1
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f003 0201 	and.w	r2, r3, #1
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d017      	beq.n	800559e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	2203      	movs	r2, #3
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43db      	mvns	r3, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4013      	ands	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4313      	orrs	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d123      	bne.n	80055f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	08da      	lsrs	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3208      	adds	r2, #8
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	220f      	movs	r2, #15
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	08da      	lsrs	r2, r3, #3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3208      	adds	r2, #8
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	2203      	movs	r2, #3
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4013      	ands	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 0203 	and.w	r2, r3, #3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4313      	orrs	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80e0 	beq.w	80057f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005634:	4b2f      	ldr	r3, [pc, #188]	@ (80056f4 <HAL_GPIO_Init+0x238>)
 8005636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800563a:	4a2e      	ldr	r2, [pc, #184]	@ (80056f4 <HAL_GPIO_Init+0x238>)
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005644:	4b2b      	ldr	r3, [pc, #172]	@ (80056f4 <HAL_GPIO_Init+0x238>)
 8005646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005652:	4a29      	ldr	r2, [pc, #164]	@ (80056f8 <HAL_GPIO_Init+0x23c>)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	089b      	lsrs	r3, r3, #2
 8005658:	3302      	adds	r3, #2
 800565a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	220f      	movs	r2, #15
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a20      	ldr	r2, [pc, #128]	@ (80056fc <HAL_GPIO_Init+0x240>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d052      	beq.n	8005724 <HAL_GPIO_Init+0x268>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1f      	ldr	r2, [pc, #124]	@ (8005700 <HAL_GPIO_Init+0x244>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d031      	beq.n	80056ea <HAL_GPIO_Init+0x22e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a1e      	ldr	r2, [pc, #120]	@ (8005704 <HAL_GPIO_Init+0x248>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d02b      	beq.n	80056e6 <HAL_GPIO_Init+0x22a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1d      	ldr	r2, [pc, #116]	@ (8005708 <HAL_GPIO_Init+0x24c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d025      	beq.n	80056e2 <HAL_GPIO_Init+0x226>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1c      	ldr	r2, [pc, #112]	@ (800570c <HAL_GPIO_Init+0x250>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01f      	beq.n	80056de <HAL_GPIO_Init+0x222>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005710 <HAL_GPIO_Init+0x254>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d019      	beq.n	80056da <HAL_GPIO_Init+0x21e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005714 <HAL_GPIO_Init+0x258>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <HAL_GPIO_Init+0x21a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <HAL_GPIO_Init+0x25c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00d      	beq.n	80056d2 <HAL_GPIO_Init+0x216>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a18      	ldr	r2, [pc, #96]	@ (800571c <HAL_GPIO_Init+0x260>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d007      	beq.n	80056ce <HAL_GPIO_Init+0x212>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a17      	ldr	r2, [pc, #92]	@ (8005720 <HAL_GPIO_Init+0x264>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_GPIO_Init+0x20e>
 80056c6:	2309      	movs	r3, #9
 80056c8:	e02d      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056ca:	230a      	movs	r3, #10
 80056cc:	e02b      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056ce:	2308      	movs	r3, #8
 80056d0:	e029      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056d2:	2307      	movs	r3, #7
 80056d4:	e027      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056d6:	2306      	movs	r3, #6
 80056d8:	e025      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056da:	2305      	movs	r3, #5
 80056dc:	e023      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056de:	2304      	movs	r3, #4
 80056e0:	e021      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056e2:	2303      	movs	r3, #3
 80056e4:	e01f      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e01d      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e01b      	b.n	8005726 <HAL_GPIO_Init+0x26a>
 80056ee:	bf00      	nop
 80056f0:	58000080 	.word	0x58000080
 80056f4:	58024400 	.word	0x58024400
 80056f8:	58000400 	.word	0x58000400
 80056fc:	58020000 	.word	0x58020000
 8005700:	58020400 	.word	0x58020400
 8005704:	58020800 	.word	0x58020800
 8005708:	58020c00 	.word	0x58020c00
 800570c:	58021000 	.word	0x58021000
 8005710:	58021400 	.word	0x58021400
 8005714:	58021800 	.word	0x58021800
 8005718:	58021c00 	.word	0x58021c00
 800571c:	58022000 	.word	0x58022000
 8005720:	58022400 	.word	0x58022400
 8005724:	2300      	movs	r3, #0
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	f002 0203 	and.w	r2, r2, #3
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	4093      	lsls	r3, r2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005736:	4938      	ldr	r1, [pc, #224]	@ (8005818 <HAL_GPIO_Init+0x35c>)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	3302      	adds	r3, #2
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800576a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	43db      	mvns	r3, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4013      	ands	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	3301      	adds	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	f47f ae63 	bne.w	80054d0 <HAL_GPIO_Init+0x14>
  }
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	3724      	adds	r7, #36	@ 0x24
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	58000400 	.word	0x58000400

0800581c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]
 8005828:	4613      	mov	r3, r2
 800582a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800582c:	787b      	ldrb	r3, [r7, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005832:	887a      	ldrh	r2, [r7, #2]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005838:	e003      	b.n	8005842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800583a:	887b      	ldrh	r3, [r7, #2]
 800583c:	041a      	lsls	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	619a      	str	r2, [r3, #24]
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e08b      	b.n	800597a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb fa8a 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	@ 0x24
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	e006      	b.n	80058d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d108      	bne.n	80058f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	e007      	b.n	8005902 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <HAL_I2C_Init+0x134>)
 800590e:	430b      	orrs	r3, r1
 8005910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	02008000 	.word	0x02008000

08005988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	d138      	bne.n	8005a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e032      	b.n	8005a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	@ 0x24
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d139      	bne.n	8005aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e033      	b.n	8005aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2224      	movs	r2, #36	@ 0x24
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e000      	b.n	8005aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ac0:	4b19      	ldr	r3, [pc, #100]	@ (8005b28 <HAL_PWREx_ConfigSupply+0x70>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d00a      	beq.n	8005ae2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005acc:	4b16      	ldr	r3, [pc, #88]	@ (8005b28 <HAL_PWREx_ConfigSupply+0x70>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d001      	beq.n	8005ade <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e01f      	b.n	8005b1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e01d      	b.n	8005b1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ae2:	4b11      	ldr	r3, [pc, #68]	@ (8005b28 <HAL_PWREx_ConfigSupply+0x70>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f023 0207 	bic.w	r2, r3, #7
 8005aea:	490f      	ldr	r1, [pc, #60]	@ (8005b28 <HAL_PWREx_ConfigSupply+0x70>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005af2:	f7fc fa45 	bl	8001f80 <HAL_GetTick>
 8005af6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005af8:	e009      	b.n	8005b0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005afa:	f7fc fa41 	bl	8001f80 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b08:	d901      	bls.n	8005b0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e007      	b.n	8005b1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b0e:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <HAL_PWREx_ConfigSupply+0x70>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1a:	d1ee      	bne.n	8005afa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	58024800 	.word	0x58024800

08005b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08c      	sub	sp, #48	@ 0x30
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f000 bc48 	b.w	80063d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8088 	beq.w	8005c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4e:	4b99      	ldr	r3, [pc, #612]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b58:	4b96      	ldr	r3, [pc, #600]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d007      	beq.n	8005b74 <HAL_RCC_OscConfig+0x48>
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	2b18      	cmp	r3, #24
 8005b68:	d111      	bne.n	8005b8e <HAL_RCC_OscConfig+0x62>
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d10c      	bne.n	8005b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b74:	4b8f      	ldr	r3, [pc, #572]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d06d      	beq.n	8005c5c <HAL_RCC_OscConfig+0x130>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d169      	bne.n	8005c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f000 bc21 	b.w	80063d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b96:	d106      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x7a>
 8005b98:	4b86      	ldr	r3, [pc, #536]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a85      	ldr	r2, [pc, #532]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	e02e      	b.n	8005c04 <HAL_RCC_OscConfig+0xd8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x9c>
 8005bae:	4b81      	ldr	r3, [pc, #516]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a80      	ldr	r2, [pc, #512]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4b7e      	ldr	r3, [pc, #504]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7d      	ldr	r2, [pc, #500]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e01d      	b.n	8005c04 <HAL_RCC_OscConfig+0xd8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0xc0>
 8005bd2:	4b78      	ldr	r3, [pc, #480]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a77      	ldr	r2, [pc, #476]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4b75      	ldr	r3, [pc, #468]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a74      	ldr	r2, [pc, #464]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0xd8>
 8005bec:	4b71      	ldr	r3, [pc, #452]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a70      	ldr	r2, [pc, #448]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a6d      	ldr	r2, [pc, #436]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fc f9b8 	bl	8001f80 <HAL_GetTick>
 8005c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fc f9b4 	bl	8001f80 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	@ 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e3d4      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c26:	4b63      	ldr	r3, [pc, #396]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0xe8>
 8005c32:	e014      	b.n	8005c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fc f9a4 	bl	8001f80 <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c3c:	f7fc f9a0 	bl	8001f80 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b64      	cmp	r3, #100	@ 0x64
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e3c0      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c4e:	4b59      	ldr	r3, [pc, #356]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x110>
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80ca 	beq.w	8005e00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6c:	4b51      	ldr	r3, [pc, #324]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c76:	4b4f      	ldr	r3, [pc, #316]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_RCC_OscConfig+0x166>
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	2b18      	cmp	r3, #24
 8005c86:	d156      	bne.n	8005d36 <HAL_RCC_OscConfig+0x20a>
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d151      	bne.n	8005d36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c92:	4b48      	ldr	r3, [pc, #288]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_RCC_OscConfig+0x17e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e392      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005caa:	4b42      	ldr	r3, [pc, #264]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 0219 	bic.w	r2, r3, #25
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	493f      	ldr	r1, [pc, #252]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7fc f960 	bl	8001f80 <HAL_GetTick>
 8005cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc4:	f7fc f95c 	bl	8001f80 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e37c      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cd6:	4b37      	ldr	r3, [pc, #220]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce2:	f7fc f959 	bl	8001f98 <HAL_GetREVID>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d817      	bhi.n	8005d20 <HAL_RCC_OscConfig+0x1f4>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b40      	cmp	r3, #64	@ 0x40
 8005cf6:	d108      	bne.n	8005d0a <HAL_RCC_OscConfig+0x1de>
 8005cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d00:	4a2c      	ldr	r2, [pc, #176]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d08:	e07a      	b.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	031b      	lsls	r3, r3, #12
 8005d18:	4926      	ldr	r1, [pc, #152]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d1e:	e06f      	b.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d20:	4b24      	ldr	r3, [pc, #144]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	061b      	lsls	r3, r3, #24
 8005d2e:	4921      	ldr	r1, [pc, #132]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d34:	e064      	b.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d047      	beq.n	8005dce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f023 0219 	bic.w	r2, r3, #25
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	491a      	ldr	r1, [pc, #104]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fc f916 	bl	8001f80 <HAL_GetTick>
 8005d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d58:	f7fc f912 	bl	8001f80 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e332      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d6a:	4b12      	ldr	r3, [pc, #72]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	f7fc f90f 	bl	8001f98 <HAL_GetREVID>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d819      	bhi.n	8005db8 <HAL_RCC_OscConfig+0x28c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b40      	cmp	r3, #64	@ 0x40
 8005d8a:	d108      	bne.n	8005d9e <HAL_RCC_OscConfig+0x272>
 8005d8c:	4b09      	ldr	r3, [pc, #36]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d94:	4a07      	ldr	r2, [pc, #28]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d9a:	6053      	str	r3, [r2, #4]
 8005d9c:	e030      	b.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
 8005d9e:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	031b      	lsls	r3, r3, #12
 8005dac:	4901      	ldr	r1, [pc, #4]	@ (8005db4 <HAL_RCC_OscConfig+0x288>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	604b      	str	r3, [r1, #4]
 8005db2:	e025      	b.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
 8005db4:	58024400 	.word	0x58024400
 8005db8:	4b9a      	ldr	r3, [pc, #616]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	061b      	lsls	r3, r3, #24
 8005dc6:	4997      	ldr	r1, [pc, #604]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
 8005dcc:	e018      	b.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dce:	4b95      	ldr	r3, [pc, #596]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a94      	ldr	r2, [pc, #592]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fc f8d1 	bl	8001f80 <HAL_GetTick>
 8005dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de2:	f7fc f8cd 	bl	8001f80 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e2ed      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005df4:	4b8b      	ldr	r3, [pc, #556]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f0      	bne.n	8005de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80a9 	beq.w	8005f60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e0e:	4b85      	ldr	r3, [pc, #532]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e18:	4b82      	ldr	r3, [pc, #520]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d007      	beq.n	8005e34 <HAL_RCC_OscConfig+0x308>
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b18      	cmp	r3, #24
 8005e28:	d13a      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x374>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d135      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e34:	4b7b      	ldr	r3, [pc, #492]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_RCC_OscConfig+0x320>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b80      	cmp	r3, #128	@ 0x80
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e2c1      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e4c:	f7fc f8a4 	bl	8001f98 <HAL_GetREVID>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d817      	bhi.n	8005e8a <HAL_RCC_OscConfig+0x35e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d108      	bne.n	8005e74 <HAL_RCC_OscConfig+0x348>
 8005e62:	4b70      	ldr	r3, [pc, #448]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e72:	e075      	b.n	8005f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e74:	4b6b      	ldr	r3, [pc, #428]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	069b      	lsls	r3, r3, #26
 8005e82:	4968      	ldr	r1, [pc, #416]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e88:	e06a      	b.n	8005f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e8a:	4b66      	ldr	r3, [pc, #408]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	061b      	lsls	r3, r3, #24
 8005e98:	4962      	ldr	r1, [pc, #392]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e9e:	e05f      	b.n	8005f60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d042      	beq.n	8005f2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a5d      	ldr	r2, [pc, #372]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fc f864 	bl	8001f80 <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ebc:	f7fc f860 	bl	8001f80 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e280      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ece:	4b55      	ldr	r3, [pc, #340]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eda:	f7fc f85d 	bl	8001f98 <HAL_GetREVID>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d817      	bhi.n	8005f18 <HAL_RCC_OscConfig+0x3ec>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d108      	bne.n	8005f02 <HAL_RCC_OscConfig+0x3d6>
 8005ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005efa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005efe:	6053      	str	r3, [r2, #4]
 8005f00:	e02e      	b.n	8005f60 <HAL_RCC_OscConfig+0x434>
 8005f02:	4b48      	ldr	r3, [pc, #288]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	069b      	lsls	r3, r3, #26
 8005f10:	4944      	ldr	r1, [pc, #272]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	604b      	str	r3, [r1, #4]
 8005f16:	e023      	b.n	8005f60 <HAL_RCC_OscConfig+0x434>
 8005f18:	4b42      	ldr	r3, [pc, #264]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	061b      	lsls	r3, r3, #24
 8005f26:	493f      	ldr	r1, [pc, #252]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60cb      	str	r3, [r1, #12]
 8005f2c:	e018      	b.n	8005f60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a3c      	ldr	r2, [pc, #240]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fc f821 	bl	8001f80 <HAL_GetTick>
 8005f3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f42:	f7fc f81d 	bl	8001f80 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e23d      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f54:	4b33      	ldr	r3, [pc, #204]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d036      	beq.n	8005fda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d019      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f74:	4b2b      	ldr	r3, [pc, #172]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f78:	4a2a      	ldr	r2, [pc, #168]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f80:	f7fb fffe 	bl	8001f80 <HAL_GetTick>
 8005f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f88:	f7fb fffa 	bl	8001f80 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e21a      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f9a:	4b22      	ldr	r3, [pc, #136]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f0      	beq.n	8005f88 <HAL_RCC_OscConfig+0x45c>
 8005fa6:	e018      	b.n	8005fda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fac:	4a1d      	ldr	r2, [pc, #116]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb4:	f7fb ffe4 	bl	8001f80 <HAL_GetTick>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fbc:	f7fb ffe0 	bl	8001f80 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e200      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fce:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d039      	beq.n	800605a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01c      	beq.n	8006028 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fee:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8005ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ffa:	f7fb ffc1 	bl	8001f80 <HAL_GetTick>
 8005ffe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006002:	f7fb ffbd 	bl	8001f80 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e1dd      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006014:	4b03      	ldr	r3, [pc, #12]	@ (8006024 <HAL_RCC_OscConfig+0x4f8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <HAL_RCC_OscConfig+0x4d6>
 8006020:	e01b      	b.n	800605a <HAL_RCC_OscConfig+0x52e>
 8006022:	bf00      	nop
 8006024:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006028:	4b9b      	ldr	r3, [pc, #620]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a9a      	ldr	r2, [pc, #616]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800602e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006032:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006034:	f7fb ffa4 	bl	8001f80 <HAL_GetTick>
 8006038:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800603c:	f7fb ffa0 	bl	8001f80 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e1c0      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800604e:	4b92      	ldr	r3, [pc, #584]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f0      	bne.n	800603c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8081 	beq.w	800616a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006068:	4b8c      	ldr	r3, [pc, #560]	@ (800629c <HAL_RCC_OscConfig+0x770>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a8b      	ldr	r2, [pc, #556]	@ (800629c <HAL_RCC_OscConfig+0x770>)
 800606e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006074:	f7fb ff84 	bl	8001f80 <HAL_GetTick>
 8006078:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607c:	f7fb ff80 	bl	8001f80 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b64      	cmp	r3, #100	@ 0x64
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e1a0      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800608e:	4b83      	ldr	r3, [pc, #524]	@ (800629c <HAL_RCC_OscConfig+0x770>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d106      	bne.n	80060b0 <HAL_RCC_OscConfig+0x584>
 80060a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060a8:	f043 0301 	orr.w	r3, r3, #1
 80060ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ae:	e02d      	b.n	800610c <HAL_RCC_OscConfig+0x5e0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10c      	bne.n	80060d2 <HAL_RCC_OscConfig+0x5a6>
 80060b8:	4b77      	ldr	r3, [pc, #476]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060bc:	4a76      	ldr	r2, [pc, #472]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c4:	4b74      	ldr	r3, [pc, #464]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	4a73      	ldr	r2, [pc, #460]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060ca:	f023 0304 	bic.w	r3, r3, #4
 80060ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d0:	e01c      	b.n	800610c <HAL_RCC_OscConfig+0x5e0>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCC_OscConfig+0x5c8>
 80060da:	4b6f      	ldr	r3, [pc, #444]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	4a6e      	ldr	r2, [pc, #440]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060e0:	f043 0304 	orr.w	r3, r3, #4
 80060e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e6:	4b6c      	ldr	r3, [pc, #432]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	4a6b      	ldr	r2, [pc, #428]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f2:	e00b      	b.n	800610c <HAL_RCC_OscConfig+0x5e0>
 80060f4:	4b68      	ldr	r3, [pc, #416]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f8:	4a67      	ldr	r2, [pc, #412]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006100:	4b65      	ldr	r3, [pc, #404]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	4a64      	ldr	r2, [pc, #400]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006106:	f023 0304 	bic.w	r3, r3, #4
 800610a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fb ff34 	bl	8001f80 <HAL_GetTick>
 8006118:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800611a:	e00a      	b.n	8006132 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fb ff30 	bl	8001f80 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e14e      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006132:	4b59      	ldr	r3, [pc, #356]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ee      	beq.n	800611c <HAL_RCC_OscConfig+0x5f0>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006140:	f7fb ff1e 	bl	8001f80 <HAL_GetTick>
 8006144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006146:	e00a      	b.n	800615e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006148:	f7fb ff1a 	bl	8001f80 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e138      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800615e:	4b4e      	ldr	r3, [pc, #312]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ee      	bne.n	8006148 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 812d 	beq.w	80063ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006174:	4b48      	ldr	r3, [pc, #288]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800617c:	2b18      	cmp	r3, #24
 800617e:	f000 80bd 	beq.w	80062fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	2b02      	cmp	r3, #2
 8006188:	f040 809e 	bne.w	80062c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618c:	4b42      	ldr	r3, [pc, #264]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a41      	ldr	r2, [pc, #260]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fb fef2 	bl	8001f80 <HAL_GetTick>
 800619c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fb feee 	bl	8001f80 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e10e      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061b2:	4b39      	ldr	r3, [pc, #228]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061be:	4b36      	ldr	r3, [pc, #216]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80061c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061c2:	4b37      	ldr	r3, [pc, #220]	@ (80062a0 <HAL_RCC_OscConfig+0x774>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061ce:	0112      	lsls	r2, r2, #4
 80061d0:	430a      	orrs	r2, r1
 80061d2:	4931      	ldr	r1, [pc, #196]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	3b01      	subs	r3, #1
 80061de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e6:	3b01      	subs	r3, #1
 80061e8:	025b      	lsls	r3, r3, #9
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	3b01      	subs	r3, #1
 80061f4:	041b      	lsls	r3, r3, #16
 80061f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006200:	3b01      	subs	r3, #1
 8006202:	061b      	lsls	r3, r3, #24
 8006204:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006208:	4923      	ldr	r1, [pc, #140]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800620a:	4313      	orrs	r3, r2
 800620c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800620e:	4b22      	ldr	r3, [pc, #136]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	4a21      	ldr	r2, [pc, #132]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800621a:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800621c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800621e:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <HAL_RCC_OscConfig+0x778>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006226:	00d2      	lsls	r2, r2, #3
 8006228:	491b      	ldr	r1, [pc, #108]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800622e:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	f023 020c 	bic.w	r2, r3, #12
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	4917      	ldr	r1, [pc, #92]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800623c:	4313      	orrs	r3, r2
 800623e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006240:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	f023 0202 	bic.w	r2, r3, #2
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624c:	4912      	ldr	r1, [pc, #72]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800624e:	4313      	orrs	r3, r2
 8006250:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006252:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	4a10      	ldr	r2, [pc, #64]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800625c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625e:	4b0e      	ldr	r3, [pc, #56]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	4a0d      	ldr	r2, [pc, #52]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800626a:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800626c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626e:	4a0a      	ldr	r2, [pc, #40]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006276:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	4a07      	ldr	r2, [pc, #28]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006282:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a04      	ldr	r2, [pc, #16]	@ (8006298 <HAL_RCC_OscConfig+0x76c>)
 8006288:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800628c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628e:	f7fb fe77 	bl	8001f80 <HAL_GetTick>
 8006292:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006294:	e011      	b.n	80062ba <HAL_RCC_OscConfig+0x78e>
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	58024800 	.word	0x58024800
 80062a0:	fffffc0c 	.word	0xfffffc0c
 80062a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fb fe6a 	bl	8001f80 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e08a      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062ba:	4b47      	ldr	r3, [pc, #284]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f0      	beq.n	80062a8 <HAL_RCC_OscConfig+0x77c>
 80062c6:	e082      	b.n	80063ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c8:	4b43      	ldr	r3, [pc, #268]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a42      	ldr	r2, [pc, #264]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80062ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fb fe54 	bl	8001f80 <HAL_GetTick>
 80062d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062dc:	f7fb fe50 	bl	8001f80 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e070      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ee:	4b3a      	ldr	r3, [pc, #232]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x7b0>
 80062fa:	e068      	b.n	80063ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062fc:	4b36      	ldr	r3, [pc, #216]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80062fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006300:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006302:	4b35      	ldr	r3, [pc, #212]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006306:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	2b01      	cmp	r3, #1
 800630e:	d031      	beq.n	8006374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f003 0203 	and.w	r2, r3, #3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800631a:	429a      	cmp	r2, r3
 800631c:	d12a      	bne.n	8006374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800632a:	429a      	cmp	r2, r3
 800632c:	d122      	bne.n	8006374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800633a:	429a      	cmp	r2, r3
 800633c:	d11a      	bne.n	8006374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	0a5b      	lsrs	r3, r3, #9
 8006342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800634c:	429a      	cmp	r2, r3
 800634e:	d111      	bne.n	8006374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d108      	bne.n	8006374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	0e1b      	lsrs	r3, r3, #24
 8006366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006370:	429a      	cmp	r2, r3
 8006372:	d001      	beq.n	8006378 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e02b      	b.n	80063d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006378:	4b17      	ldr	r3, [pc, #92]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 800637a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637c:	08db      	lsrs	r3, r3, #3
 800637e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006382:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	429a      	cmp	r2, r3
 800638c:	d01f      	beq.n	80063ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800638e:	4b12      	ldr	r3, [pc, #72]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	4a11      	ldr	r2, [pc, #68]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800639a:	f7fb fdf1 	bl	8001f80 <HAL_GetTick>
 800639e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80063a0:	bf00      	nop
 80063a2:	f7fb fded 	bl	8001f80 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d0f9      	beq.n	80063a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063ae:	4b0a      	ldr	r3, [pc, #40]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80063b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063b2:	4b0a      	ldr	r3, [pc, #40]	@ (80063dc <HAL_RCC_OscConfig+0x8b0>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063ba:	00d2      	lsls	r2, r2, #3
 80063bc:	4906      	ldr	r1, [pc, #24]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80063c2:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c6:	4a04      	ldr	r2, [pc, #16]	@ (80063d8 <HAL_RCC_OscConfig+0x8ac>)
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3730      	adds	r7, #48	@ 0x30
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	58024400 	.word	0x58024400
 80063dc:	ffff0007 	.word	0xffff0007

080063e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e19c      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f4:	4b8a      	ldr	r3, [pc, #552]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d910      	bls.n	8006424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006402:	4b87      	ldr	r3, [pc, #540]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 020f 	bic.w	r2, r3, #15
 800640a:	4985      	ldr	r1, [pc, #532]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006412:	4b83      	ldr	r3, [pc, #524]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e184      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d010      	beq.n	8006452 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	4b7b      	ldr	r3, [pc, #492]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800643c:	429a      	cmp	r2, r3
 800643e:	d908      	bls.n	8006452 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006440:	4b78      	ldr	r3, [pc, #480]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	4975      	ldr	r1, [pc, #468]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 800644e:	4313      	orrs	r3, r2
 8006450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d010      	beq.n	8006480 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	4b70      	ldr	r3, [pc, #448]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800646a:	429a      	cmp	r2, r3
 800646c:	d908      	bls.n	8006480 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800646e:	4b6d      	ldr	r3, [pc, #436]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	496a      	ldr	r1, [pc, #424]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 800647c:	4313      	orrs	r3, r2
 800647e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b00      	cmp	r3, #0
 800648a:	d010      	beq.n	80064ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	4b64      	ldr	r3, [pc, #400]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006498:	429a      	cmp	r2, r3
 800649a:	d908      	bls.n	80064ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800649c:	4b61      	ldr	r3, [pc, #388]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	495e      	ldr	r1, [pc, #376]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d010      	beq.n	80064dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69da      	ldr	r2, [r3, #28]
 80064be:	4b59      	ldr	r3, [pc, #356]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d908      	bls.n	80064dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064ca:	4b56      	ldr	r3, [pc, #344]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	4953      	ldr	r1, [pc, #332]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d908      	bls.n	800650a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f023 020f 	bic.w	r2, r3, #15
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	4947      	ldr	r1, [pc, #284]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006506:	4313      	orrs	r3, r2
 8006508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d055      	beq.n	80065c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006516:	4b43      	ldr	r3, [pc, #268]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	4940      	ldr	r1, [pc, #256]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006524:	4313      	orrs	r3, r2
 8006526:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d107      	bne.n	8006540 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006530:	4b3c      	ldr	r3, [pc, #240]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d121      	bne.n	8006580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0f6      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d107      	bne.n	8006558 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006548:	4b36      	ldr	r3, [pc, #216]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d115      	bne.n	8006580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0ea      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006560:	4b30      	ldr	r3, [pc, #192]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0de      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006570:	4b2c      	ldr	r3, [pc, #176]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0d6      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006580:	4b28      	ldr	r3, [pc, #160]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f023 0207 	bic.w	r2, r3, #7
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	4925      	ldr	r1, [pc, #148]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 800658e:	4313      	orrs	r3, r2
 8006590:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006592:	f7fb fcf5 	bl	8001f80 <HAL_GetTick>
 8006596:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006598:	e00a      	b.n	80065b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800659a:	f7fb fcf1 	bl	8001f80 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0be      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	429a      	cmp	r2, r3
 80065c0:	d1eb      	bne.n	800659a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	4b14      	ldr	r3, [pc, #80]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	429a      	cmp	r2, r3
 80065dc:	d208      	bcs.n	80065f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065de:	4b11      	ldr	r3, [pc, #68]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f023 020f 	bic.w	r2, r3, #15
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	490e      	ldr	r1, [pc, #56]	@ (8006624 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d214      	bcs.n	8006628 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b08      	ldr	r3, [pc, #32]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 020f 	bic.w	r2, r3, #15
 8006606:	4906      	ldr	r1, [pc, #24]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <HAL_RCC_ClockConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d005      	beq.n	8006628 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e086      	b.n	800672e <HAL_RCC_ClockConfig+0x34e>
 8006620:	52002000 	.word	0x52002000
 8006624:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	4b3f      	ldr	r3, [pc, #252]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006640:	429a      	cmp	r2, r3
 8006642:	d208      	bcs.n	8006656 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006644:	4b3c      	ldr	r3, [pc, #240]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	4939      	ldr	r1, [pc, #228]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 8006652:	4313      	orrs	r3, r2
 8006654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d010      	beq.n	8006684 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	4b34      	ldr	r3, [pc, #208]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800666e:	429a      	cmp	r2, r3
 8006670:	d208      	bcs.n	8006684 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006672:	4b31      	ldr	r3, [pc, #196]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	492e      	ldr	r1, [pc, #184]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 8006680:	4313      	orrs	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	d010      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699a      	ldr	r2, [r3, #24]
 8006694:	4b28      	ldr	r3, [pc, #160]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800669c:	429a      	cmp	r2, r3
 800669e:	d208      	bcs.n	80066b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066a0:	4b25      	ldr	r3, [pc, #148]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	4922      	ldr	r1, [pc, #136]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d010      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d208      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	4917      	ldr	r1, [pc, #92]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066e0:	f000 f834 	bl	800674c <HAL_RCC_GetSysClockFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b14      	ldr	r3, [pc, #80]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	4912      	ldr	r1, [pc, #72]	@ (800673c <HAL_RCC_ClockConfig+0x35c>)
 80066f2:	5ccb      	ldrb	r3, [r1, r3]
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
 80066fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <HAL_RCC_ClockConfig+0x358>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	4a0d      	ldr	r2, [pc, #52]	@ (800673c <HAL_RCC_ClockConfig+0x35c>)
 8006708:	5cd3      	ldrb	r3, [r2, r3]
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	fa22 f303 	lsr.w	r3, r2, r3
 8006714:	4a0a      	ldr	r2, [pc, #40]	@ (8006740 <HAL_RCC_ClockConfig+0x360>)
 8006716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006718:	4a0a      	ldr	r2, [pc, #40]	@ (8006744 <HAL_RCC_ClockConfig+0x364>)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800671e:	4b0a      	ldr	r3, [pc, #40]	@ (8006748 <HAL_RCC_ClockConfig+0x368>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7fa fd66 	bl	80011f4 <HAL_InitTick>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
 800673c:	08012e10 	.word	0x08012e10
 8006740:	24000004 	.word	0x24000004
 8006744:	24000000 	.word	0x24000000
 8006748:	24000008 	.word	0x24000008

0800674c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800674c:	b480      	push	{r7}
 800674e:	b089      	sub	sp, #36	@ 0x24
 8006750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006752:	4bb3      	ldr	r3, [pc, #716]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800675a:	2b18      	cmp	r3, #24
 800675c:	f200 8155 	bhi.w	8006a0a <HAL_RCC_GetSysClockFreq+0x2be>
 8006760:	a201      	add	r2, pc, #4	@ (adr r2, 8006768 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	080067cd 	.word	0x080067cd
 800676c:	08006a0b 	.word	0x08006a0b
 8006770:	08006a0b 	.word	0x08006a0b
 8006774:	08006a0b 	.word	0x08006a0b
 8006778:	08006a0b 	.word	0x08006a0b
 800677c:	08006a0b 	.word	0x08006a0b
 8006780:	08006a0b 	.word	0x08006a0b
 8006784:	08006a0b 	.word	0x08006a0b
 8006788:	080067f3 	.word	0x080067f3
 800678c:	08006a0b 	.word	0x08006a0b
 8006790:	08006a0b 	.word	0x08006a0b
 8006794:	08006a0b 	.word	0x08006a0b
 8006798:	08006a0b 	.word	0x08006a0b
 800679c:	08006a0b 	.word	0x08006a0b
 80067a0:	08006a0b 	.word	0x08006a0b
 80067a4:	08006a0b 	.word	0x08006a0b
 80067a8:	080067f9 	.word	0x080067f9
 80067ac:	08006a0b 	.word	0x08006a0b
 80067b0:	08006a0b 	.word	0x08006a0b
 80067b4:	08006a0b 	.word	0x08006a0b
 80067b8:	08006a0b 	.word	0x08006a0b
 80067bc:	08006a0b 	.word	0x08006a0b
 80067c0:	08006a0b 	.word	0x08006a0b
 80067c4:	08006a0b 	.word	0x08006a0b
 80067c8:	080067ff 	.word	0x080067ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067cc:	4b94      	ldr	r3, [pc, #592]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d8:	4b91      	ldr	r3, [pc, #580]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	08db      	lsrs	r3, r3, #3
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	4a90      	ldr	r2, [pc, #576]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
 80067e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067ea:	e111      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067ec:	4b8d      	ldr	r3, [pc, #564]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067ee:	61bb      	str	r3, [r7, #24]
      break;
 80067f0:	e10e      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067f4:	61bb      	str	r3, [r7, #24]
      break;
 80067f6:	e10b      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80067f8:	4b8c      	ldr	r3, [pc, #560]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067fa:	61bb      	str	r3, [r7, #24]
      break;
 80067fc:	e108      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067fe:	4b88      	ldr	r3, [pc, #544]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006808:	4b85      	ldr	r3, [pc, #532]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006814:	4b82      	ldr	r3, [pc, #520]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800681e:	4b80      	ldr	r3, [pc, #512]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006822:	08db      	lsrs	r3, r3, #3
 8006824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80e1 	beq.w	8006a04 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b02      	cmp	r3, #2
 8006846:	f000 8083 	beq.w	8006950 <HAL_RCC_GetSysClockFreq+0x204>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b02      	cmp	r3, #2
 800684e:	f200 80a1 	bhi.w	8006994 <HAL_RCC_GetSysClockFreq+0x248>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x114>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d056      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0x1c0>
 800685e:	e099      	b.n	8006994 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006860:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d02d      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800686c:	4b6c      	ldr	r3, [pc, #432]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	08db      	lsrs	r3, r3, #3
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	4a6b      	ldr	r2, [pc, #428]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
 800687c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006896:	4b62      	ldr	r3, [pc, #392]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068c6:	e087      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a34 <HAL_RCC_GetSysClockFreq+0x2e8>
 80068d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068da:	4b51      	ldr	r3, [pc, #324]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800690a:	e065      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006916:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b40      	ldr	r3, [pc, #256]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006932:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800694e:	e043      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a3c <HAL_RCC_GetSysClockFreq+0x2f0>
 800695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006962:	4b2f      	ldr	r3, [pc, #188]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a02 	vldr	s12, [r7, #8]
 8006976:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006992:	e021      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069d8:	4b11      	ldr	r3, [pc, #68]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069dc:	0a5b      	lsrs	r3, r3, #9
 80069de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069e2:	3301      	adds	r3, #1
 80069e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	ee07 3a90 	vmov	s15, r3
 80069ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069fc:	ee17 3a90 	vmov	r3, s15
 8006a00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a02:	e005      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
      break;
 8006a08:	e002      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a0a:	4b07      	ldr	r3, [pc, #28]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a0c:	61bb      	str	r3, [r7, #24]
      break;
 8006a0e:	bf00      	nop
  }

  return sysclockfreq;
 8006a10:	69bb      	ldr	r3, [r7, #24]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3724      	adds	r7, #36	@ 0x24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	58024400 	.word	0x58024400
 8006a24:	03d09000 	.word	0x03d09000
 8006a28:	003d0900 	.word	0x003d0900
 8006a2c:	017d7840 	.word	0x017d7840
 8006a30:	46000000 	.word	0x46000000
 8006a34:	4c742400 	.word	0x4c742400
 8006a38:	4a742400 	.word	0x4a742400
 8006a3c:	4bbebc20 	.word	0x4bbebc20

08006a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a46:	f7ff fe81 	bl	800674c <HAL_RCC_GetSysClockFreq>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b10      	ldr	r3, [pc, #64]	@ (8006a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	0a1b      	lsrs	r3, r3, #8
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	490f      	ldr	r1, [pc, #60]	@ (8006a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a58:	5ccb      	ldrb	r3, [r1, r3]
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a64:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	4a09      	ldr	r2, [pc, #36]	@ (8006a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a6e:	5cd3      	ldrb	r3, [r2, r3]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7a:	4a07      	ldr	r2, [pc, #28]	@ (8006a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a7e:	4a07      	ldr	r2, [pc, #28]	@ (8006a9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a84:	4b04      	ldr	r3, [pc, #16]	@ (8006a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a86:	681b      	ldr	r3, [r3, #0]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	58024400 	.word	0x58024400
 8006a94:	08012e10 	.word	0x08012e10
 8006a98:	24000004 	.word	0x24000004
 8006a9c:	24000000 	.word	0x24000000

08006aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006aa4:	f7ff ffcc 	bl	8006a40 <HAL_RCC_GetHCLKFreq>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	4904      	ldr	r1, [pc, #16]	@ (8006ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ab6:	5ccb      	ldrb	r3, [r1, r3]
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	08012e10 	.word	0x08012e10

08006acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ad0:	f7ff ffb6 	bl	8006a40 <HAL_RCC_GetHCLKFreq>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	4904      	ldr	r1, [pc, #16]	@ (8006af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ae2:	5ccb      	ldrb	r3, [r1, r3]
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	58024400 	.word	0x58024400
 8006af4:	08012e10 	.word	0x08012e10

08006af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	223f      	movs	r2, #63	@ 0x3f
 8006b06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b08:	4b1a      	ldr	r3, [pc, #104]	@ (8006b74 <HAL_RCC_GetClockConfig+0x7c>)
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f003 0207 	and.w	r2, r3, #7
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006b14:	4b17      	ldr	r3, [pc, #92]	@ (8006b74 <HAL_RCC_GetClockConfig+0x7c>)
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006b20:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <HAL_RCC_GetClockConfig+0x7c>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006b2c:	4b11      	ldr	r3, [pc, #68]	@ (8006b74 <HAL_RCC_GetClockConfig+0x7c>)
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006b38:	4b0e      	ldr	r3, [pc, #56]	@ (8006b74 <HAL_RCC_GetClockConfig+0x7c>)
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006b44:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <HAL_RCC_GetClockConfig+0x7c>)
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006b50:	4b08      	ldr	r3, [pc, #32]	@ (8006b74 <HAL_RCC_GetClockConfig+0x7c>)
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b5c:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <HAL_RCC_GetClockConfig+0x80>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 020f 	and.w	r2, r3, #15
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	601a      	str	r2, [r3, #0]
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	58024400 	.word	0x58024400
 8006b78:	52002000 	.word	0x52002000

08006b7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b80:	b0ca      	sub	sp, #296	@ 0x128
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006ba0:	2500      	movs	r5, #0
 8006ba2:	ea54 0305 	orrs.w	r3, r4, r5
 8006ba6:	d049      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bb2:	d02f      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006bb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bb8:	d828      	bhi.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006bba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bbe:	d01a      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006bc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bc4:	d822      	bhi.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bce:	d007      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bd0:	e01c      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd2:	4bb8      	ldr	r3, [pc, #736]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	4ab7      	ldr	r2, [pc, #732]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bde:	e01a      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	3308      	adds	r3, #8
 8006be6:	2102      	movs	r1, #2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f002 fb61 	bl	80092b0 <RCCEx_PLL2_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bf4:	e00f      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	3328      	adds	r3, #40	@ 0x28
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 fc08 	bl	8009414 <RCCEx_PLL3_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c0a:	e004      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c1e:	4ba5      	ldr	r3, [pc, #660]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c2c:	4aa1      	ldr	r2, [pc, #644]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006c48:	f04f 0900 	mov.w	r9, #0
 8006c4c:	ea58 0309 	orrs.w	r3, r8, r9
 8006c50:	d047      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d82a      	bhi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c79 	.word	0x08006c79
 8006c68:	08006c87 	.word	0x08006c87
 8006c6c:	08006c9d 	.word	0x08006c9d
 8006c70:	08006cbb 	.word	0x08006cbb
 8006c74:	08006cbb 	.word	0x08006cbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c78:	4b8e      	ldr	r3, [pc, #568]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	4a8d      	ldr	r2, [pc, #564]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c84:	e01a      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f002 fb0e 	bl	80092b0 <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c9a:	e00f      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca0:	3328      	adds	r3, #40	@ 0x28
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f002 fbb5 	bl	8009414 <RCCEx_PLL3_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cb0:	e004      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cb8:	e000      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cc4:	4b7b      	ldr	r3, [pc, #492]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc8:	f023 0107 	bic.w	r1, r3, #7
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd2:	4a78      	ldr	r2, [pc, #480]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cd8:	e003      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006cee:	f04f 0b00 	mov.w	fp, #0
 8006cf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006cf6:	d04c      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d02:	d030      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d08:	d829      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d0c:	d02d      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d10:	d825      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d12:	2b80      	cmp	r3, #128	@ 0x80
 8006d14:	d018      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006d16:	2b80      	cmp	r3, #128	@ 0x80
 8006d18:	d821      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006d1e:	2b40      	cmp	r3, #64	@ 0x40
 8006d20:	d007      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006d22:	e01c      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d24:	4b63      	ldr	r3, [pc, #396]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	4a62      	ldr	r2, [pc, #392]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d30:	e01c      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d36:	3308      	adds	r3, #8
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 fab8 	bl	80092b0 <RCCEx_PLL2_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d46:	e011      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4c:	3328      	adds	r3, #40	@ 0x28
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f002 fb5f 	bl	8009414 <RCCEx_PLL3_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d5c:	e006      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d64:	e002      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d66:	bf00      	nop
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d74:	4b4f      	ldr	r3, [pc, #316]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d78:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d82:	4a4c      	ldr	r2, [pc, #304]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d88:	e003      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006d9e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006da2:	2300      	movs	r3, #0
 8006da4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006da8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006dac:	460b      	mov	r3, r1
 8006dae:	4313      	orrs	r3, r2
 8006db0:	d053      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006dba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dbe:	d035      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006dc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dc4:	d82e      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dc6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dca:	d031      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dd0:	d828      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dd6:	d01a      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006dd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ddc:	d822      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006de6:	d007      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006de8:	e01c      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dea:	4b32      	ldr	r3, [pc, #200]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dee:	4a31      	ldr	r2, [pc, #196]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006df6:	e01c      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 fa55 	bl	80092b0 <RCCEx_PLL2_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e0c:	e011      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e12:	3328      	adds	r3, #40	@ 0x28
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f002 fafc 	bl	8009414 <RCCEx_PLL3_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e22:	e006      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e2a:	e002      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e2c:	bf00      	nop
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e50:	e003      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006e66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006e70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006e74:	460b      	mov	r3, r1
 8006e76:	4313      	orrs	r3, r2
 8006e78:	d056      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e86:	d038      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e8c:	d831      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e92:	d034      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006e94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e98:	d82b      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e9e:	d01d      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006ea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ea4:	d825      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d006      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eae:	d00a      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006eb0:	e01f      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006eb2:	bf00      	nop
 8006eb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb8:	4ba2      	ldr	r3, [pc, #648]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	4aa1      	ldr	r2, [pc, #644]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ec4:	e01c      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	3308      	adds	r3, #8
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 f9ee 	bl	80092b0 <RCCEx_PLL2_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006eda:	e011      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee0:	3328      	adds	r3, #40	@ 0x28
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f002 fa95 	bl	8009414 <RCCEx_PLL3_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e006      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ef8:	e002      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006efa:	bf00      	nop
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f08:	4b8e      	ldr	r3, [pc, #568]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f18:	4a8a      	ldr	r2, [pc, #552]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006f34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	d03a      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f4e:	2b30      	cmp	r3, #48	@ 0x30
 8006f50:	d01f      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006f52:	2b30      	cmp	r3, #48	@ 0x30
 8006f54:	d819      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d00c      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d815      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d019      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f62:	2b10      	cmp	r3, #16
 8006f64:	d111      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f66:	4b77      	ldr	r3, [pc, #476]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6a:	4a76      	ldr	r2, [pc, #472]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f72:	e011      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f78:	3308      	adds	r3, #8
 8006f7a:	2102      	movs	r1, #2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f002 f997 	bl	80092b0 <RCCEx_PLL2_Config>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f88:	e006      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f90:	e002      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f92:	bf00      	nop
 8006f94:	e000      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006fa0:	4b68      	ldr	r3, [pc, #416]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fae:	4a65      	ldr	r2, [pc, #404]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fb4:	e003      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006fca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	d051      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fe8:	d035      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fee:	d82e      	bhi.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ff0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ff4:	d031      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ff6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ffa:	d828      	bhi.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007000:	d01a      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007006:	d822      	bhi.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007010:	d007      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007012:	e01c      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007014:	4b4b      	ldr	r3, [pc, #300]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	4a4a      	ldr	r2, [pc, #296]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800701a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800701e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007020:	e01c      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007026:	3308      	adds	r3, #8
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f002 f940 	bl	80092b0 <RCCEx_PLL2_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007036:	e011      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703c:	3328      	adds	r3, #40	@ 0x28
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f002 f9e7 	bl	8009414 <RCCEx_PLL3_Config>
 8007046:	4603      	mov	r3, r0
 8007048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800704c:	e006      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007054:	e002      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800705a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007064:	4b37      	ldr	r3, [pc, #220]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007068:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007072:	4a34      	ldr	r2, [pc, #208]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007074:	430b      	orrs	r3, r1
 8007076:	6513      	str	r3, [r2, #80]	@ 0x50
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800708e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007092:	2300      	movs	r3, #0
 8007094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007098:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d056      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070ac:	d033      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80070ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070b2:	d82c      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070b8:	d02f      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80070ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070be:	d826      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070c4:	d02b      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80070c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070ca:	d820      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070d0:	d012      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80070d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070d6:	d81a      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d022      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80070dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070e0:	d115      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e6:	3308      	adds	r3, #8
 80070e8:	2101      	movs	r1, #1
 80070ea:	4618      	mov	r0, r3
 80070ec:	f002 f8e0 	bl	80092b0 <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070f6:	e015      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fc:	3328      	adds	r3, #40	@ 0x28
 80070fe:	2101      	movs	r1, #1
 8007100:	4618      	mov	r0, r3
 8007102:	f002 f987 	bl	8009414 <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800710c:	e00a      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007114:	e006      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007116:	bf00      	nop
 8007118:	e004      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800711a:	bf00      	nop
 800711c:	e002      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10d      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800712c:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007130:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800713a:	4a02      	ldr	r2, [pc, #8]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800713c:	430b      	orrs	r3, r1
 800713e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007140:	e006      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007142:	bf00      	nop
 8007144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800714c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800715c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007160:	2300      	movs	r3, #0
 8007162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007166:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d055      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800717c:	d033      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800717e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007182:	d82c      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007188:	d02f      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718e:	d826      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007190:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007194:	d02b      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800719a:	d820      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800719c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a0:	d012      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a6:	d81a      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d022      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80071ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b0:	d115      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b6:	3308      	adds	r3, #8
 80071b8:	2101      	movs	r1, #1
 80071ba:	4618      	mov	r0, r3
 80071bc:	f002 f878 	bl	80092b0 <RCCEx_PLL2_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071c6:	e015      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	3328      	adds	r3, #40	@ 0x28
 80071ce:	2101      	movs	r1, #1
 80071d0:	4618      	mov	r0, r3
 80071d2:	f002 f91f 	bl	8009414 <RCCEx_PLL3_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071dc:	e00a      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071e4:	e006      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071e6:	bf00      	nop
 80071e8:	e004      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ea:	bf00      	nop
 80071ec:	e002      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ee:	bf00      	nop
 80071f0:	e000      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071fc:	4ba3      	ldr	r3, [pc, #652]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007200:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800720c:	4a9f      	ldr	r2, [pc, #636]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800720e:	430b      	orrs	r3, r1
 8007210:	6593      	str	r3, [r2, #88]	@ 0x58
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d037      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007246:	d00e      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800724c:	d816      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d018      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007256:	d111      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007258:	4b8c      	ldr	r3, [pc, #560]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	4a8b      	ldr	r2, [pc, #556]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800725e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007264:	e00f      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3308      	adds	r3, #8
 800726c:	2101      	movs	r1, #1
 800726e:	4618      	mov	r0, r3
 8007270:	f002 f81e 	bl	80092b0 <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800727a:	e004      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007282:	e000      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800728e:	4b7f      	ldr	r3, [pc, #508]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007292:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729c:	4a7b      	ldr	r2, [pc, #492]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800729e:	430b      	orrs	r3, r1
 80072a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80072b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80072c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	d039      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d81c      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80072d6:	a201      	add	r2, pc, #4	@ (adr r2, 80072dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	08007319 	.word	0x08007319
 80072e0:	080072ed 	.word	0x080072ed
 80072e4:	080072fb 	.word	0x080072fb
 80072e8:	08007319 	.word	0x08007319
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ec:	4b67      	ldr	r3, [pc, #412]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	4a66      	ldr	r2, [pc, #408]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072f8:	e00f      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fe:	3308      	adds	r3, #8
 8007300:	2102      	movs	r1, #2
 8007302:	4618      	mov	r0, r3
 8007304:	f001 ffd4 	bl	80092b0 <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800730e:	e004      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007316:	e000      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007322:	4b5a      	ldr	r3, [pc, #360]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007326:	f023 0103 	bic.w	r1, r3, #3
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007330:	4a56      	ldr	r2, [pc, #344]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007332:	430b      	orrs	r3, r1
 8007334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007336:	e003      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800734c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007350:	2300      	movs	r3, #0
 8007352:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800735a:	460b      	mov	r3, r1
 800735c:	4313      	orrs	r3, r2
 800735e:	f000 809f 	beq.w	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007362:	4b4b      	ldr	r3, [pc, #300]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a4a      	ldr	r2, [pc, #296]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800736c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800736e:	f7fa fe07 	bl	8001f80 <HAL_GetTick>
 8007372:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007376:	e00b      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007378:	f7fa fe02 	bl	8001f80 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b64      	cmp	r3, #100	@ 0x64
 8007386:	d903      	bls.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800738e:	e005      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007390:	4b3f      	ldr	r3, [pc, #252]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0ed      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800739c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d179      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073a4:	4b39      	ldr	r3, [pc, #228]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073b0:	4053      	eors	r3, r2
 80073b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d015      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073ba:	4b34      	ldr	r3, [pc, #208]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073c6:	4b31      	ldr	r3, [pc, #196]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ca:	4a30      	ldr	r2, [pc, #192]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073d2:	4b2e      	ldr	r3, [pc, #184]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d6:	4a2d      	ldr	r2, [pc, #180]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073de:	4a2b      	ldr	r2, [pc, #172]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f2:	d118      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f4:	f7fa fdc4 	bl	8001f80 <HAL_GetTick>
 80073f8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073fc:	e00d      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fe:	f7fa fdbf 	bl	8001f80 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007408:	1ad2      	subs	r2, r2, r3
 800740a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800740e:	429a      	cmp	r2, r3
 8007410:	d903      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007418:	e005      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800741a:	4b1c      	ldr	r3, [pc, #112]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0eb      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742a:	2b00      	cmp	r3, #0
 800742c:	d129      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800743a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800743e:	d10e      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007440:	4b12      	ldr	r3, [pc, #72]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007450:	091a      	lsrs	r2, r3, #4
 8007452:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007454:	4013      	ands	r3, r2
 8007456:	4a0d      	ldr	r2, [pc, #52]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6113      	str	r3, [r2, #16]
 800745c:	e005      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800745e:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	4a0a      	ldr	r2, [pc, #40]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007464:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007468:	6113      	str	r3, [r2, #16]
 800746a:	4b08      	ldr	r3, [pc, #32]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800747a:	4a04      	ldr	r2, [pc, #16]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747c:	430b      	orrs	r3, r1
 800747e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007480:	e00e      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800748a:	e009      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800748c:	58024400 	.word	0x58024400
 8007490:	58024800 	.word	0x58024800
 8007494:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800749c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f002 0301 	and.w	r3, r2, #1
 80074ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074b0:	2300      	movs	r3, #0
 80074b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4313      	orrs	r3, r2
 80074be:	f000 8089 	beq.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074c8:	2b28      	cmp	r3, #40	@ 0x28
 80074ca:	d86b      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80074cc:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	080075ad 	.word	0x080075ad
 80074d8:	080075a5 	.word	0x080075a5
 80074dc:	080075a5 	.word	0x080075a5
 80074e0:	080075a5 	.word	0x080075a5
 80074e4:	080075a5 	.word	0x080075a5
 80074e8:	080075a5 	.word	0x080075a5
 80074ec:	080075a5 	.word	0x080075a5
 80074f0:	080075a5 	.word	0x080075a5
 80074f4:	08007579 	.word	0x08007579
 80074f8:	080075a5 	.word	0x080075a5
 80074fc:	080075a5 	.word	0x080075a5
 8007500:	080075a5 	.word	0x080075a5
 8007504:	080075a5 	.word	0x080075a5
 8007508:	080075a5 	.word	0x080075a5
 800750c:	080075a5 	.word	0x080075a5
 8007510:	080075a5 	.word	0x080075a5
 8007514:	0800758f 	.word	0x0800758f
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075a5 	.word	0x080075a5
 8007520:	080075a5 	.word	0x080075a5
 8007524:	080075a5 	.word	0x080075a5
 8007528:	080075a5 	.word	0x080075a5
 800752c:	080075a5 	.word	0x080075a5
 8007530:	080075a5 	.word	0x080075a5
 8007534:	080075ad 	.word	0x080075ad
 8007538:	080075a5 	.word	0x080075a5
 800753c:	080075a5 	.word	0x080075a5
 8007540:	080075a5 	.word	0x080075a5
 8007544:	080075a5 	.word	0x080075a5
 8007548:	080075a5 	.word	0x080075a5
 800754c:	080075a5 	.word	0x080075a5
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080075ad 	.word	0x080075ad
 8007558:	080075a5 	.word	0x080075a5
 800755c:	080075a5 	.word	0x080075a5
 8007560:	080075a5 	.word	0x080075a5
 8007564:	080075a5 	.word	0x080075a5
 8007568:	080075a5 	.word	0x080075a5
 800756c:	080075a5 	.word	0x080075a5
 8007570:	080075a5 	.word	0x080075a5
 8007574:	080075ad 	.word	0x080075ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	3308      	adds	r3, #8
 800757e:	2101      	movs	r1, #1
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fe95 	bl	80092b0 <RCCEx_PLL2_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800758c:	e00f      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	3328      	adds	r3, #40	@ 0x28
 8007594:	2101      	movs	r1, #1
 8007596:	4618      	mov	r0, r3
 8007598:	f001 ff3c 	bl	8009414 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80075a2:	e004      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80075ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80075b6:	4bbf      	ldr	r3, [pc, #764]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075c4:	4abb      	ldr	r2, [pc, #748]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075c6:	430b      	orrs	r3, r1
 80075c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80075ca:	e003      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f002 0302 	and.w	r3, r2, #2
 80075e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075e4:	2300      	movs	r3, #0
 80075e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80075ee:	460b      	mov	r3, r1
 80075f0:	4313      	orrs	r3, r2
 80075f2:	d041      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	d824      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80075fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007651 	.word	0x08007651
 8007608:	0800761d 	.word	0x0800761d
 800760c:	08007633 	.word	0x08007633
 8007610:	08007651 	.word	0x08007651
 8007614:	08007651 	.word	0x08007651
 8007618:	08007651 	.word	0x08007651
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007620:	3308      	adds	r3, #8
 8007622:	2101      	movs	r1, #1
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fe43 	bl	80092b0 <RCCEx_PLL2_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007630:	e00f      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007636:	3328      	adds	r3, #40	@ 0x28
 8007638:	2101      	movs	r1, #1
 800763a:	4618      	mov	r0, r3
 800763c:	f001 feea 	bl	8009414 <RCCEx_PLL3_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800765a:	4b96      	ldr	r3, [pc, #600]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765e:	f023 0107 	bic.w	r1, r3, #7
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007668:	4a92      	ldr	r2, [pc, #584]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800766a:	430b      	orrs	r3, r1
 800766c:	6553      	str	r3, [r2, #84]	@ 0x54
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f002 0304 	and.w	r3, r2, #4
 8007684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007688:	2300      	movs	r3, #0
 800768a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800768e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007692:	460b      	mov	r3, r1
 8007694:	4313      	orrs	r3, r2
 8007696:	d044      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076a0:	2b05      	cmp	r3, #5
 80076a2:	d825      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076f9 	.word	0x080076f9
 80076b0:	080076c5 	.word	0x080076c5
 80076b4:	080076db 	.word	0x080076db
 80076b8:	080076f9 	.word	0x080076f9
 80076bc:	080076f9 	.word	0x080076f9
 80076c0:	080076f9 	.word	0x080076f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c8:	3308      	adds	r3, #8
 80076ca:	2101      	movs	r1, #1
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 fdef 	bl	80092b0 <RCCEx_PLL2_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076d8:	e00f      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076de:	3328      	adds	r3, #40	@ 0x28
 80076e0:	2101      	movs	r1, #1
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fe96 	bl	8009414 <RCCEx_PLL3_Config>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076ee:	e004      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076f6:	e000      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80076f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10b      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007702:	4b6c      	ldr	r3, [pc, #432]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007706:	f023 0107 	bic.w	r1, r3, #7
 800770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007712:	4a68      	ldr	r2, [pc, #416]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007714:	430b      	orrs	r3, r1
 8007716:	6593      	str	r3, [r2, #88]	@ 0x58
 8007718:	e003      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800771e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f002 0320 	and.w	r3, r2, #32
 800772e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007732:	2300      	movs	r3, #0
 8007734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800773c:	460b      	mov	r3, r1
 800773e:	4313      	orrs	r3, r2
 8007740:	d055      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800774e:	d033      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007754:	d82c      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800775a:	d02f      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007760:	d826      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007762:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007766:	d02b      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007768:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800776c:	d820      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800776e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007772:	d012      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007778:	d81a      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d022      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800777e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007782:	d115      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007788:	3308      	adds	r3, #8
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f001 fd8f 	bl	80092b0 <RCCEx_PLL2_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007798:	e015      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779e:	3328      	adds	r3, #40	@ 0x28
 80077a0:	2102      	movs	r1, #2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 fe36 	bl	8009414 <RCCEx_PLL3_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80077ae:	e00a      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077b6:	e006      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077b8:	bf00      	nop
 80077ba:	e004      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077bc:	bf00      	nop
 80077be:	e002      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10b      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ce:	4b39      	ldr	r3, [pc, #228]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077de:	4a35      	ldr	r2, [pc, #212]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d058      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007816:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800781a:	d033      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800781c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007820:	d82c      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007826:	d02f      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800782c:	d826      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800782e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007832:	d02b      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007838:	d820      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800783a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800783e:	d012      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007844:	d81a      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d022      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800784a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800784e:	d115      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	3308      	adds	r3, #8
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f001 fd29 	bl	80092b0 <RCCEx_PLL2_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007864:	e015      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786a:	3328      	adds	r3, #40	@ 0x28
 800786c:	2102      	movs	r1, #2
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fdd0 	bl	8009414 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800787a:	e00a      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007882:	e006      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007884:	bf00      	nop
 8007886:	e004      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10e      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800789a:	4b06      	ldr	r3, [pc, #24]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800789c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800789e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078aa:	4a02      	ldr	r2, [pc, #8]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80078b0:	e006      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80078b2:	bf00      	nop
 80078b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80078cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d055      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078ec:	d033      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80078ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078f2:	d82c      	bhi.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f8:	d02f      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80078fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078fe:	d826      	bhi.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007900:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007904:	d02b      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007906:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800790a:	d820      	bhi.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800790c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007910:	d012      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007912:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007916:	d81a      	bhi.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d022      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800791c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007920:	d115      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007926:	3308      	adds	r3, #8
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fcc0 	bl	80092b0 <RCCEx_PLL2_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007936:	e015      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793c:	3328      	adds	r3, #40	@ 0x28
 800793e:	2102      	movs	r1, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fd67 	bl	8009414 <RCCEx_PLL3_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800794c:	e00a      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007954:	e006      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007956:	bf00      	nop
 8007958:	e004      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800795a:	bf00      	nop
 800795c:	e002      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800795e:	bf00      	nop
 8007960:	e000      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800796c:	4ba1      	ldr	r3, [pc, #644]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007970:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800797c:	4a9d      	ldr	r2, [pc, #628]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800797e:	430b      	orrs	r3, r1
 8007980:	6593      	str	r3, [r2, #88]	@ 0x58
 8007982:	e003      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f002 0308 	and.w	r3, r2, #8
 8007998:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800799c:	2300      	movs	r3, #0
 800799e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80079a6:	460b      	mov	r3, r1
 80079a8:	4313      	orrs	r3, r2
 80079aa:	d01e      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80079ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b8:	d10c      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	3328      	adds	r3, #40	@ 0x28
 80079c0:	2102      	movs	r1, #2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fd26 	bl	8009414 <RCCEx_PLL3_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079d4:	4b87      	ldr	r3, [pc, #540]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079e4:	4a83      	ldr	r2, [pc, #524]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079e6:	430b      	orrs	r3, r1
 80079e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f002 0310 	and.w	r3, r2, #16
 80079f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079fa:	2300      	movs	r3, #0
 80079fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007a04:	460b      	mov	r3, r1
 8007a06:	4313      	orrs	r3, r2
 8007a08:	d01e      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a16:	d10c      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	3328      	adds	r3, #40	@ 0x28
 8007a1e:	2102      	movs	r1, #2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 fcf7 	bl	8009414 <RCCEx_PLL3_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a32:	4b70      	ldr	r3, [pc, #448]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a42:	4a6c      	ldr	r2, [pc, #432]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007a62:	460b      	mov	r3, r1
 8007a64:	4313      	orrs	r3, r2
 8007a66:	d03e      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a74:	d022      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7a:	d81b      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a84:	d00b      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007a86:	e015      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 fc0d 	bl	80092b0 <RCCEx_PLL2_Config>
 8007a96:	4603      	mov	r3, r0
 8007a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a9c:	e00f      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	3328      	adds	r3, #40	@ 0x28
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 fcb4 	bl	8009414 <RCCEx_PLL3_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ab2:	e004      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aba:	e000      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10b      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ad6:	4a47      	ldr	r2, [pc, #284]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8007adc:	e003      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007af2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007af4:	2300      	movs	r3, #0
 8007af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007af8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007afc:	460b      	mov	r3, r1
 8007afe:	4313      	orrs	r3, r2
 8007b00:	d03b      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b0e:	d01f      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007b10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b14:	d818      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b1a:	d003      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007b1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b20:	d007      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007b22:	e011      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b24:	4b33      	ldr	r3, [pc, #204]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	4a32      	ldr	r2, [pc, #200]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b30:	e00f      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	3328      	adds	r3, #40	@ 0x28
 8007b38:	2101      	movs	r1, #1
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 fc6a 	bl	8009414 <RCCEx_PLL3_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b46:	e004      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b4e:	e000      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b5a:	4b26      	ldr	r3, [pc, #152]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6a:	4a22      	ldr	r2, [pc, #136]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b70:	e003      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b86:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b88:	2300      	movs	r3, #0
 8007b8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007b90:	460b      	mov	r3, r1
 8007b92:	4313      	orrs	r3, r2
 8007b94:	d034      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba4:	d007      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007ba6:	e011      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba8:	4b12      	ldr	r3, [pc, #72]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bac:	4a11      	ldr	r2, [pc, #68]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007bb4:	e00e      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bba:	3308      	adds	r3, #8
 8007bbc:	2102      	movs	r1, #2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 fb76 	bl	80092b0 <RCCEx_PLL2_Config>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007bca:	e003      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10d      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bdc:	4b05      	ldr	r3, [pc, #20]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bea:	4a02      	ldr	r2, [pc, #8]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007bf0:	e006      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007bf2:	bf00      	nop
 8007bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c0e:	2300      	movs	r3, #0
 8007c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007c16:	460b      	mov	r3, r1
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	d00c      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c20:	3328      	adds	r3, #40	@ 0x28
 8007c22:	2102      	movs	r1, #2
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 fbf5 	bl	8009414 <RCCEx_PLL3_Config>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c42:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c44:	2300      	movs	r3, #0
 8007c46:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	d038      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c5e:	d018      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007c60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c64:	d811      	bhi.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6a:	d014      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c70:	d80b      	bhi.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d011      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7a:	d106      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c7c:	4bc3      	ldr	r3, [pc, #780]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c80:	4ac2      	ldr	r2, [pc, #776]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c88:	e008      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c90:	e004      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10b      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ca4:	4bb9      	ldr	r3, [pc, #740]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb4:	4ab5      	ldr	r2, [pc, #724]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cba:	e003      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ce0:	4baa      	ldr	r3, [pc, #680]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cee:	4aa7      	ldr	r2, [pc, #668]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d02:	2300      	movs	r3, #0
 8007d04:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	d00a      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d10:	4b9e      	ldr	r3, [pc, #632]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d20:	4a9a      	ldr	r2, [pc, #616]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d22:	430b      	orrs	r3, r1
 8007d24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d34:	2300      	movs	r3, #0
 8007d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	d009      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d42:	4b92      	ldr	r3, [pc, #584]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d46:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d50:	4a8e      	ldr	r2, [pc, #568]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d52:	430b      	orrs	r3, r1
 8007d54:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007d62:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d64:	2300      	movs	r3, #0
 8007d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d72:	4b86      	ldr	r3, [pc, #536]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	4a85      	ldr	r2, [pc, #532]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d7c:	6113      	str	r3, [r2, #16]
 8007d7e:	4b83      	ldr	r3, [pc, #524]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d80:	6919      	ldr	r1, [r3, #16]
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d8a:	4a80      	ldr	r2, [pc, #512]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d9e:	2300      	movs	r3, #0
 8007da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007da2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007da6:	460b      	mov	r3, r1
 8007da8:	4313      	orrs	r3, r2
 8007daa:	d009      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007dac:	4b77      	ldr	r3, [pc, #476]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dba:	4a74      	ldr	r2, [pc, #464]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dce:	2300      	movs	r3, #0
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	d00a      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ddc:	4b6b      	ldr	r3, [pc, #428]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dec:	4a67      	ldr	r2, [pc, #412]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dee:	430b      	orrs	r3, r1
 8007df0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	d011      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e12:	3308      	adds	r3, #8
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fa4a 	bl	80092b0 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	6239      	str	r1, [r7, #32]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	d011      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	3308      	adds	r3, #8
 8007e54:	2101      	movs	r1, #1
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fa2a 	bl	80092b0 <RCCEx_PLL2_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	61b9      	str	r1, [r7, #24]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	d011      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e92:	3308      	adds	r3, #8
 8007e94:	2102      	movs	r1, #2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 fa0a 	bl	80092b0 <RCCEx_PLL2_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6139      	str	r1, [r7, #16]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	d011      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	3328      	adds	r3, #40	@ 0x28
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 fa9c 	bl	8009414 <RCCEx_PLL3_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	2100      	movs	r1, #0
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	f003 0310 	and.w	r3, r3, #16
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d011      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	3328      	adds	r3, #40	@ 0x28
 8007f14:	2101      	movs	r1, #1
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 fa7c 	bl	8009414 <RCCEx_PLL3_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	d011      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f52:	3328      	adds	r3, #40	@ 0x28
 8007f54:	2102      	movs	r1, #2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f001 fa5c 	bl	8009414 <RCCEx_PLL3_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007f72:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007f86:	46bd      	mov	sp, r7
 8007f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f8c:	58024400 	.word	0x58024400

08007f90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b090      	sub	sp, #64	@ 0x40
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f9e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	f040 8094 	bne.w	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007fa8:	4b9e      	ldr	r3, [pc, #632]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	f200 8087 	bhi.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007fba:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fd5 	.word	0x08007fd5
 8007fc4:	08007ffd 	.word	0x08007ffd
 8007fc8:	08008025 	.word	0x08008025
 8007fcc:	080080c1 	.word	0x080080c1
 8007fd0:	0800804d 	.word	0x0800804d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fd4:	4b93      	ldr	r3, [pc, #588]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fe0:	d108      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 f810 	bl	800900c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff0:	f000 bd45 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff8:	f000 bd41 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ffc:	4b89      	ldr	r3, [pc, #548]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008008:	d108      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800a:	f107 0318 	add.w	r3, r7, #24
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fd54 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008018:	f000 bd31 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008020:	f000 bd2d 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008024:	4b7f      	ldr	r3, [pc, #508]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800802c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008030:	d108      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008032:	f107 030c 	add.w	r3, r7, #12
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fe94 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008040:	f000 bd1d 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008048:	f000 bd19 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800804c:	4b75      	ldr	r3, [pc, #468]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800804e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008050:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008056:	4b73      	ldr	r3, [pc, #460]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b04      	cmp	r3, #4
 8008060:	d10c      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008068:	4b6e      	ldr	r3, [pc, #440]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	08db      	lsrs	r3, r3, #3
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	4a6d      	ldr	r2, [pc, #436]	@ (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
 8008078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800807a:	e01f      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800807c:	4b69      	ldr	r3, [pc, #420]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008088:	d106      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800808a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008090:	d102      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008092:	4b66      	ldr	r3, [pc, #408]	@ (800822c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008096:	e011      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008098:	4b62      	ldr	r3, [pc, #392]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080a4:	d106      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80080a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ac:	d102      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080ae:	4b60      	ldr	r3, [pc, #384]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b2:	e003      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80080b8:	f000 bce1 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080bc:	f000 bcdf 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080c0:	4b5c      	ldr	r3, [pc, #368]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80080c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c4:	f000 bcdb 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080cc:	f000 bcd7 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80080d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80080d8:	430b      	orrs	r3, r1
 80080da:	f040 80ad 	bne.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80080de:	4b51      	ldr	r3, [pc, #324]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80080e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ee:	d056      	beq.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f6:	f200 8090 	bhi.w	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80080fe:	f000 8088 	beq.w	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	2bc0      	cmp	r3, #192	@ 0xc0
 8008106:	f200 8088 	bhi.w	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	2b80      	cmp	r3, #128	@ 0x80
 800810e:	d032      	beq.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	2b80      	cmp	r3, #128	@ 0x80
 8008114:	f200 8081 	bhi.w	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	2b40      	cmp	r3, #64	@ 0x40
 8008122:	d014      	beq.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008124:	e079      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008126:	4b3f      	ldr	r3, [pc, #252]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008132:	d108      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008138:	4618      	mov	r0, r3
 800813a:	f000 ff67 	bl	800900c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008142:	f000 bc9c 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814a:	f000 bc98 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800814e:	4b35      	ldr	r3, [pc, #212]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800815a:	d108      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800815c:	f107 0318 	add.w	r3, r7, #24
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fcab 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800816a:	f000 bc88 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008172:	f000 bc84 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008176:	4b2b      	ldr	r3, [pc, #172]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800817e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008182:	d108      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fdeb 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008192:	f000 bc74 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819a:	f000 bc70 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800819e:	4b21      	ldr	r3, [pc, #132]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d10c      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80081b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	08db      	lsrs	r3, r3, #3
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	4a18      	ldr	r2, [pc, #96]	@ (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081c6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081cc:	e01f      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081ce:	4b15      	ldr	r3, [pc, #84]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081da:	d106      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80081dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081e2:	d102      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081e4:	4b11      	ldr	r3, [pc, #68]	@ (800822c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e8:	e011      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081f6:	d106      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80081f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081fe:	d102      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008200:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008204:	e003      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800820a:	f000 bc38 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800820e:	f000 bc36 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008212:	4b08      	ldr	r3, [pc, #32]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008216:	f000 bc32 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821e:	f000 bc2e 	b.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008222:	bf00      	nop
 8008224:	58024400 	.word	0x58024400
 8008228:	03d09000 	.word	0x03d09000
 800822c:	003d0900 	.word	0x003d0900
 8008230:	017d7840 	.word	0x017d7840
 8008234:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800823c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008240:	430b      	orrs	r3, r1
 8008242:	f040 809c 	bne.w	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008246:	4b9e      	ldr	r3, [pc, #632]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800824e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008256:	d054      	beq.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800825e:	f200 808b 	bhi.w	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008268:	f000 8083 	beq.w	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008272:	f200 8081 	bhi.w	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800827c:	d02f      	beq.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008284:	d878      	bhi.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	2b00      	cmp	r3, #0
 800828a:	d004      	beq.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800828c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008292:	d012      	beq.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008294:	e070      	b.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008296:	4b8a      	ldr	r3, [pc, #552]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800829e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082a2:	d107      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 feaf 	bl	800900c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b2:	e3e4      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b8:	e3e1      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082ba:	4b81      	ldr	r3, [pc, #516]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082c6:	d107      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c8:	f107 0318 	add.w	r3, r7, #24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fbf5 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d6:	e3d2      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082dc:	e3cf      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082de:	4b78      	ldr	r3, [pc, #480]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ea:	d107      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fd37 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082fa:	e3c0      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008300:	e3bd      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008302:	4b6f      	ldr	r3, [pc, #444]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008306:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800830a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800830c:	4b6c      	ldr	r3, [pc, #432]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d10c      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800831e:	4b68      	ldr	r3, [pc, #416]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	08db      	lsrs	r3, r3, #3
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	4a66      	ldr	r2, [pc, #408]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800832a:	fa22 f303 	lsr.w	r3, r2, r3
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008330:	e01e      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008332:	4b63      	ldr	r3, [pc, #396]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800833a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800833e:	d106      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008346:	d102      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008348:	4b5f      	ldr	r3, [pc, #380]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800834c:	e010      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800834e:	4b5c      	ldr	r3, [pc, #368]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800835a:	d106      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800835c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008362:	d102      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008364:	4b59      	ldr	r3, [pc, #356]	@ (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008368:	e002      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800836e:	e386      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008370:	e385      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008372:	4b57      	ldr	r3, [pc, #348]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008376:	e382      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800837c:	e37f      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800837e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008382:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008386:	430b      	orrs	r3, r1
 8008388:	f040 80a7 	bne.w	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800838c:	4b4c      	ldr	r3, [pc, #304]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800838e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008390:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008394:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800839c:	d055      	beq.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80083a4:	f200 8096 	bhi.w	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80083ae:	f000 8084 	beq.w	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80083b8:	f200 808c 	bhi.w	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083c2:	d030      	beq.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80083c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083ca:	f200 8083 	bhi.w	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083da:	d012      	beq.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80083dc:	e07a      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083de:	4b38      	ldr	r3, [pc, #224]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083ea:	d107      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fe0b 	bl	800900c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083fa:	e340      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008400:	e33d      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008402:	4b2f      	ldr	r3, [pc, #188]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800840a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800840e:	d107      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008410:	f107 0318 	add.w	r3, r7, #24
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fb51 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841e:	e32e      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008424:	e32b      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008426:	4b26      	ldr	r3, [pc, #152]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800842e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008432:	d107      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008434:	f107 030c 	add.w	r3, r7, #12
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fc93 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008442:	e31c      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e319      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800844a:	4b1d      	ldr	r3, [pc, #116]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800844c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008452:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008454:	4b1a      	ldr	r3, [pc, #104]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	2b04      	cmp	r3, #4
 800845e:	d10c      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008462:	2b00      	cmp	r3, #0
 8008464:	d109      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008466:	4b16      	ldr	r3, [pc, #88]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	08db      	lsrs	r3, r3, #3
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	4a14      	ldr	r2, [pc, #80]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008472:	fa22 f303 	lsr.w	r3, r2, r3
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008478:	e01e      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800847a:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008486:	d106      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800848e:	d102      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008490:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008494:	e010      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008496:	4b0a      	ldr	r3, [pc, #40]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800849e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084a2:	d106      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80084a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084aa:	d102      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084ac:	4b07      	ldr	r3, [pc, #28]	@ (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80084ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084b0:	e002      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084b6:	e2e2      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084b8:	e2e1      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084ba:	4b05      	ldr	r3, [pc, #20]	@ (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084be:	e2de      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084c0:	58024400 	.word	0x58024400
 80084c4:	03d09000 	.word	0x03d09000
 80084c8:	003d0900 	.word	0x003d0900
 80084cc:	017d7840 	.word	0x017d7840
 80084d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d8:	e2d1      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80084da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084de:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80084e2:	430b      	orrs	r3, r1
 80084e4:	f040 809c 	bne.w	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80084e8:	4b93      	ldr	r3, [pc, #588]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80084f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084f8:	d054      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008500:	f200 808b 	bhi.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008506:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800850a:	f000 8083 	beq.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800850e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008510:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008514:	f200 8081 	bhi.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800851e:	d02f      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008526:	d878      	bhi.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008534:	d012      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008536:	e070      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008538:	4b7f      	ldr	r3, [pc, #508]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008540:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008544:	d107      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fd5e 	bl	800900c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008554:	e293      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855a:	e290      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800855c:	4b76      	ldr	r3, [pc, #472]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008568:	d107      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800856a:	f107 0318 	add.w	r3, r7, #24
 800856e:	4618      	mov	r0, r3
 8008570:	f000 faa4 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008578:	e281      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857e:	e27e      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008580:	4b6d      	ldr	r3, [pc, #436]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800858c:	d107      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800858e:	f107 030c 	add.w	r3, r7, #12
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fbe6 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859c:	e26f      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800859e:	2300      	movs	r3, #0
 80085a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a2:	e26c      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085a4:	4b64      	ldr	r3, [pc, #400]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085ae:	4b62      	ldr	r3, [pc, #392]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d10c      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80085ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d109      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	08db      	lsrs	r3, r3, #3
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	4a5c      	ldr	r2, [pc, #368]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80085cc:	fa22 f303 	lsr.w	r3, r2, r3
 80085d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d2:	e01e      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085d4:	4b58      	ldr	r3, [pc, #352]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e0:	d106      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80085e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085e8:	d102      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085ea:	4b55      	ldr	r3, [pc, #340]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ee:	e010      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085f0:	4b51      	ldr	r3, [pc, #324]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085fc:	d106      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80085fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008604:	d102      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008606:	4b4f      	ldr	r3, [pc, #316]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800860a:	e002      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008610:	e235      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008612:	e234      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008614:	4b4c      	ldr	r3, [pc, #304]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008618:	e231      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861e:	e22e      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008624:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008628:	430b      	orrs	r3, r1
 800862a:	f040 808f 	bne.w	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800862e:	4b42      	ldr	r3, [pc, #264]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008632:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008636:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800863e:	d06b      	beq.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008646:	d874      	bhi.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800864e:	d056      	beq.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008652:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008656:	d86c      	bhi.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800865e:	d03b      	beq.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008662:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008666:	d864      	bhi.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800866e:	d021      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008676:	d85c      	bhi.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800867e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008684:	d004      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008686:	e054      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008688:	f7fe fa0a 	bl	8006aa0 <HAL_RCC_GetPCLK1Freq>
 800868c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800868e:	e1f6      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008690:	4b29      	ldr	r3, [pc, #164]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869e:	f107 0318 	add.w	r3, r7, #24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fa0a 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e1e7      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b2:	e1e4      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086b4:	4b20      	ldr	r3, [pc, #128]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c0:	d107      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c2:	f107 030c 	add.w	r3, r7, #12
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fb4c 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d0:	e1d5      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d6:	e1d2      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086d8:	4b17      	ldr	r3, [pc, #92]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d109      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e4:	4b14      	ldr	r3, [pc, #80]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	08db      	lsrs	r3, r3, #3
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	4a13      	ldr	r2, [pc, #76]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f6:	e1c2      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086fc:	e1bf      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870a:	d102      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800870c:	4b0c      	ldr	r3, [pc, #48]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008710:	e1b5      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008716:	e1b2      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008718:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008724:	d102      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008726:	4b07      	ldr	r3, [pc, #28]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800872a:	e1a8      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008730:	e1a5      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008736:	e1a2      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008738:	58024400 	.word	0x58024400
 800873c:	03d09000 	.word	0x03d09000
 8008740:	003d0900 	.word	0x003d0900
 8008744:	017d7840 	.word	0x017d7840
 8008748:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800874c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008750:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008754:	430b      	orrs	r3, r1
 8008756:	d173      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008758:	4b9c      	ldr	r3, [pc, #624]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800875a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800875c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008760:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008768:	d02f      	beq.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008770:	d863      	bhi.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	2b00      	cmp	r3, #0
 8008776:	d004      	beq.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800877e:	d012      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008780:	e05b      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008782:	4b92      	ldr	r3, [pc, #584]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800878a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800878e:	d107      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008790:	f107 0318 	add.w	r3, r7, #24
 8008794:	4618      	mov	r0, r3
 8008796:	f000 f991 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800879e:	e16e      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a4:	e16b      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087a6:	4b89      	ldr	r3, [pc, #548]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b2:	d107      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087b4:	f107 030c 	add.w	r3, r7, #12
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fad3 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c2:	e15c      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c8:	e159      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087ca:	4b80      	ldr	r3, [pc, #512]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087d4:	4b7d      	ldr	r3, [pc, #500]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d10c      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80087e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087e6:	4b79      	ldr	r3, [pc, #484]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	08db      	lsrs	r3, r3, #3
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	4a77      	ldr	r2, [pc, #476]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087f2:	fa22 f303 	lsr.w	r3, r2, r3
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f8:	e01e      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087fa:	4b74      	ldr	r3, [pc, #464]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008806:	d106      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800880e:	d102      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008810:	4b70      	ldr	r3, [pc, #448]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008814:	e010      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008816:	4b6d      	ldr	r3, [pc, #436]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800881e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008822:	d106      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800882a:	d102      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800882c:	4b6a      	ldr	r3, [pc, #424]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800882e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008830:	e002      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008836:	e122      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008838:	e121      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800883e:	e11e      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008844:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008848:	430b      	orrs	r3, r1
 800884a:	d133      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800884c:	4b5f      	ldr	r3, [pc, #380]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800884e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008854:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800885c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008862:	d012      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008864:	e023      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008866:	4b59      	ldr	r3, [pc, #356]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800886e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008872:	d107      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fbc7 	bl	800900c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008882:	e0fc      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	e0f9      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800888a:	4b50      	ldr	r3, [pc, #320]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008896:	d107      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008898:	f107 0318 	add.w	r3, r7, #24
 800889c:	4618      	mov	r0, r3
 800889e:	f000 f90d 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a6:	e0ea      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ac:	e0e7      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b2:	e0e4      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80088b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80088bc:	430b      	orrs	r3, r1
 80088be:	f040 808d 	bne.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80088c2:	4b42      	ldr	r3, [pc, #264]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088c6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80088ca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088d2:	d06b      	beq.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088da:	d874      	bhi.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e2:	d056      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ea:	d86c      	bhi.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088f2:	d03b      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80088f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088fa:	d864      	bhi.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008902:	d021      	beq.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800890a:	d85c      	bhi.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008918:	d004      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800891a:	e054      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800891c:	f000 f8b8 	bl	8008a90 <HAL_RCCEx_GetD3PCLK1Freq>
 8008920:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008922:	e0ac      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008924:	4b29      	ldr	r3, [pc, #164]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800892c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008930:	d107      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008932:	f107 0318 	add.w	r3, r7, #24
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f8c0 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008940:	e09d      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008946:	e09a      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008948:	4b20      	ldr	r3, [pc, #128]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008954:	d107      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008956:	f107 030c 	add.w	r3, r7, #12
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fa02 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008964:	e08b      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896a:	e088      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800896c:	4b17      	ldr	r3, [pc, #92]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b04      	cmp	r3, #4
 8008976:	d109      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008978:	4b14      	ldr	r3, [pc, #80]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	08db      	lsrs	r3, r3, #3
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	4a13      	ldr	r2, [pc, #76]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008984:	fa22 f303 	lsr.w	r3, r2, r3
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898a:	e078      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008990:	e075      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008992:	4b0e      	ldr	r3, [pc, #56]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800899e:	d102      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80089a0:	4b0c      	ldr	r3, [pc, #48]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a4:	e06b      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089aa:	e068      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089ac:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b8:	d102      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80089ba:	4b07      	ldr	r3, [pc, #28]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80089bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089be:	e05e      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c4:	e05b      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ca:	e058      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089cc:	58024400 	.word	0x58024400
 80089d0:	03d09000 	.word	0x03d09000
 80089d4:	003d0900 	.word	0x003d0900
 80089d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80089dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80089e4:	430b      	orrs	r3, r1
 80089e6:	d148      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80089e8:	4b27      	ldr	r3, [pc, #156]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f8:	d02a      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a00:	d838      	bhi.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d004      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a0e:	d00d      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008a10:	e030      	b.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a12:	4b1d      	ldr	r3, [pc, #116]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a1e:	d102      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008a20:	4b1a      	ldr	r3, [pc, #104]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a24:	e02b      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2a:	e028      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a2c:	4b16      	ldr	r3, [pc, #88]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a38:	d107      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fae4 	bl	800900c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a48:	e019      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4e:	e016      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a50:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a5c:	d107      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5e:	f107 0318 	add.w	r3, r7, #24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f82a 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6c:	e007      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a72:	e004      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a78:	e001      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3740      	adds	r7, #64	@ 0x40
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	017d7840 	.word	0x017d7840

08008a90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a94:	f7fd ffd4 	bl	8006a40 <HAL_RCC_GetHCLKFreq>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	4b06      	ldr	r3, [pc, #24]	@ (8008ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	091b      	lsrs	r3, r3, #4
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	4904      	ldr	r1, [pc, #16]	@ (8008ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008aa6:	5ccb      	ldrb	r3, [r1, r3]
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	08012e10 	.word	0x08012e10

08008abc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b089      	sub	sp, #36	@ 0x24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008ace:	4b9f      	ldr	r3, [pc, #636]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	0b1b      	lsrs	r3, r3, #12
 8008ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ad8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ada:	4b9c      	ldr	r3, [pc, #624]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ade:	091b      	lsrs	r3, r3, #4
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ae6:	4b99      	ldr	r3, [pc, #612]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aea:	08db      	lsrs	r3, r3, #3
 8008aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	fb02 f303 	mul.w	r3, r2, r3
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8111 	beq.w	8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	f000 8083 	beq.w	8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	f200 80a1 	bhi.w	8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d056      	beq.n	8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b26:	e099      	b.n	8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b28:	4b88      	ldr	r3, [pc, #544]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d02d      	beq.n	8008b90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b34:	4b85      	ldr	r3, [pc, #532]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	08db      	lsrs	r3, r3, #3
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	4a84      	ldr	r2, [pc, #528]	@ (8008d50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b40:	fa22 f303 	lsr.w	r3, r2, r3
 8008b44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b8e:	e087      	b.n	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bd2:	e065      	b.n	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be6:	4b59      	ldr	r3, [pc, #356]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c16:	e043      	b.n	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2a:	4b48      	ldr	r3, [pc, #288]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c5a:	e021      	b.n	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6e:	4b37      	ldr	r3, [pc, #220]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca4:	0a5b      	lsrs	r3, r3, #9
 8008ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc6:	ee17 2a90 	vmov	r2, s15
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008cce:	4b1f      	ldr	r3, [pc, #124]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	0c1b      	lsrs	r3, r3, #16
 8008cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd8:	ee07 3a90 	vmov	s15, r3
 8008cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf4:	ee17 2a90 	vmov	r2, s15
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008cfc:	4b13      	ldr	r3, [pc, #76]	@ (8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d00:	0e1b      	lsrs	r3, r3, #24
 8008d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d22:	ee17 2a90 	vmov	r2, s15
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d2a:	e008      	b.n	8008d3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	609a      	str	r2, [r3, #8]
}
 8008d3e:	bf00      	nop
 8008d40:	3724      	adds	r7, #36	@ 0x24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	03d09000 	.word	0x03d09000
 8008d54:	46000000 	.word	0x46000000
 8008d58:	4c742400 	.word	0x4c742400
 8008d5c:	4a742400 	.word	0x4a742400
 8008d60:	4bbebc20 	.word	0x4bbebc20

08008d64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b089      	sub	sp, #36	@ 0x24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d6c:	4ba1      	ldr	r3, [pc, #644]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d76:	4b9f      	ldr	r3, [pc, #636]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7a:	0d1b      	lsrs	r3, r3, #20
 8008d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d82:	4b9c      	ldr	r3, [pc, #624]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	0a1b      	lsrs	r3, r3, #8
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d8e:	4b99      	ldr	r3, [pc, #612]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d92:	08db      	lsrs	r3, r3, #3
 8008d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8111 	beq.w	8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	f000 8083 	beq.w	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	f200 80a1 	bhi.w	8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d056      	beq.n	8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008dce:	e099      	b.n	8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dd0:	4b88      	ldr	r3, [pc, #544]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d02d      	beq.n	8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ddc:	4b85      	ldr	r3, [pc, #532]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	08db      	lsrs	r3, r3, #3
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	4a84      	ldr	r2, [pc, #528]	@ (8008ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	ee07 3a90 	vmov	s15, r3
 8008df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b7b      	ldr	r3, [pc, #492]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e36:	e087      	b.n	8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e7a:	e065      	b.n	8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8e:	4b59      	ldr	r3, [pc, #356]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ebe:	e043      	b.n	8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed2:	4b48      	ldr	r3, [pc, #288]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f02:	e021      	b.n	8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f16:	4b37      	ldr	r3, [pc, #220]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008f48:	4b2a      	ldr	r3, [pc, #168]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4c:	0a5b      	lsrs	r3, r3, #9
 8008f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6e:	ee17 2a90 	vmov	r2, s15
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f76:	4b1f      	ldr	r3, [pc, #124]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7a:	0c1b      	lsrs	r3, r3, #16
 8008f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f80:	ee07 3a90 	vmov	s15, r3
 8008f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f9c:	ee17 2a90 	vmov	r2, s15
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008fa4:	4b13      	ldr	r3, [pc, #76]	@ (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa8:	0e1b      	lsrs	r3, r3, #24
 8008faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fca:	ee17 2a90 	vmov	r2, s15
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	609a      	str	r2, [r3, #8]
}
 8008fe6:	bf00      	nop
 8008fe8:	3724      	adds	r7, #36	@ 0x24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	58024400 	.word	0x58024400
 8008ff8:	03d09000 	.word	0x03d09000
 8008ffc:	46000000 	.word	0x46000000
 8009000:	4c742400 	.word	0x4c742400
 8009004:	4a742400 	.word	0x4a742400
 8009008:	4bbebc20 	.word	0x4bbebc20

0800900c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800900c:	b480      	push	{r7}
 800900e:	b089      	sub	sp, #36	@ 0x24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009014:	4ba0      	ldr	r3, [pc, #640]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800901e:	4b9e      	ldr	r3, [pc, #632]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	091b      	lsrs	r3, r3, #4
 8009024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009028:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800902a:	4b9b      	ldr	r3, [pc, #620]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009034:	4b98      	ldr	r3, [pc, #608]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009038:	08db      	lsrs	r3, r3, #3
 800903a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	fb02 f303 	mul.w	r3, r2, r3
 8009044:	ee07 3a90 	vmov	s15, r3
 8009048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 8111 	beq.w	800927a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2b02      	cmp	r3, #2
 800905c:	f000 8083 	beq.w	8009166 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	2b02      	cmp	r3, #2
 8009064:	f200 80a1 	bhi.w	80091aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d056      	beq.n	8009122 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009074:	e099      	b.n	80091aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009076:	4b88      	ldr	r3, [pc, #544]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d02d      	beq.n	80090de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009082:	4b85      	ldr	r3, [pc, #532]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	08db      	lsrs	r3, r3, #3
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	4a83      	ldr	r2, [pc, #524]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800908e:	fa22 f303 	lsr.w	r3, r2, r3
 8009092:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ac:	4b7a      	ldr	r3, [pc, #488]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090dc:	e087      	b.n	80091ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80092a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f0:	4b69      	ldr	r3, [pc, #420]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f8:	ee07 3a90 	vmov	s15, r3
 80090fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009100:	ed97 6a03 	vldr	s12, [r7, #12]
 8009104:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009120:	e065      	b.n	80091ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	ee07 3a90 	vmov	s15, r3
 8009128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80092a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009134:	4b58      	ldr	r3, [pc, #352]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009144:	ed97 6a03 	vldr	s12, [r7, #12]
 8009148:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800914c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009164:	e043      	b.n	80091ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	ee07 3a90 	vmov	s15, r3
 800916c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009170:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009178:	4b47      	ldr	r3, [pc, #284]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009188:	ed97 6a03 	vldr	s12, [r7, #12]
 800918c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800919c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a8:	e021      	b.n	80091ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	ee07 3a90 	vmov	s15, r3
 80091b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80092a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091bc:	4b36      	ldr	r3, [pc, #216]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c4:	ee07 3a90 	vmov	s15, r3
 80091c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80091ee:	4b2a      	ldr	r3, [pc, #168]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f2:	0a5b      	lsrs	r3, r3, #9
 80091f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009208:	edd7 6a07 	vldr	s13, [r7, #28]
 800920c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009214:	ee17 2a90 	vmov	r2, s15
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800921c:	4b1e      	ldr	r3, [pc, #120]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	0c1b      	lsrs	r3, r3, #16
 8009222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009236:	edd7 6a07 	vldr	s13, [r7, #28]
 800923a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009242:	ee17 2a90 	vmov	r2, s15
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800924a:	4b13      	ldr	r3, [pc, #76]	@ (8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800924c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924e:	0e1b      	lsrs	r3, r3, #24
 8009250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009264:	edd7 6a07 	vldr	s13, [r7, #28]
 8009268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800926c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009270:	ee17 2a90 	vmov	r2, s15
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009278:	e008      	b.n	800928c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	609a      	str	r2, [r3, #8]
}
 800928c:	bf00      	nop
 800928e:	3724      	adds	r7, #36	@ 0x24
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	58024400 	.word	0x58024400
 800929c:	03d09000 	.word	0x03d09000
 80092a0:	46000000 	.word	0x46000000
 80092a4:	4c742400 	.word	0x4c742400
 80092a8:	4a742400 	.word	0x4a742400
 80092ac:	4bbebc20 	.word	0x4bbebc20

080092b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092be:	4b53      	ldr	r3, [pc, #332]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80092c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d101      	bne.n	80092ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e099      	b.n	8009402 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80092ce:	4b4f      	ldr	r3, [pc, #316]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a4e      	ldr	r2, [pc, #312]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80092d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092da:	f7f8 fe51 	bl	8001f80 <HAL_GetTick>
 80092de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092e0:	e008      	b.n	80092f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092e2:	f7f8 fe4d 	bl	8001f80 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d901      	bls.n	80092f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e086      	b.n	8009402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092f4:	4b45      	ldr	r3, [pc, #276]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1f0      	bne.n	80092e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009300:	4b42      	ldr	r3, [pc, #264]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009304:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	031b      	lsls	r3, r3, #12
 800930e:	493f      	ldr	r1, [pc, #252]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009310:	4313      	orrs	r3, r2
 8009312:	628b      	str	r3, [r1, #40]	@ 0x28
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	3b01      	subs	r3, #1
 800931a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	3b01      	subs	r3, #1
 8009324:	025b      	lsls	r3, r3, #9
 8009326:	b29b      	uxth	r3, r3
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	3b01      	subs	r3, #1
 8009330:	041b      	lsls	r3, r3, #16
 8009332:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	3b01      	subs	r3, #1
 800933e:	061b      	lsls	r3, r3, #24
 8009340:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009344:	4931      	ldr	r1, [pc, #196]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009346:	4313      	orrs	r3, r2
 8009348:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800934a:	4b30      	ldr	r3, [pc, #192]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 800934c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	492d      	ldr	r1, [pc, #180]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009358:	4313      	orrs	r3, r2
 800935a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800935c:	4b2b      	ldr	r3, [pc, #172]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 800935e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009360:	f023 0220 	bic.w	r2, r3, #32
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	4928      	ldr	r1, [pc, #160]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 800936a:	4313      	orrs	r3, r2
 800936c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800936e:	4b27      	ldr	r3, [pc, #156]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009372:	4a26      	ldr	r2, [pc, #152]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009374:	f023 0310 	bic.w	r3, r3, #16
 8009378:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800937a:	4b24      	ldr	r3, [pc, #144]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 800937c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800937e:	4b24      	ldr	r3, [pc, #144]	@ (8009410 <RCCEx_PLL2_Config+0x160>)
 8009380:	4013      	ands	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	69d2      	ldr	r2, [r2, #28]
 8009386:	00d2      	lsls	r2, r2, #3
 8009388:	4920      	ldr	r1, [pc, #128]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 800938a:	4313      	orrs	r3, r2
 800938c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800938e:	4b1f      	ldr	r3, [pc, #124]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009392:	4a1e      	ldr	r2, [pc, #120]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 8009394:	f043 0310 	orr.w	r3, r3, #16
 8009398:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093a0:	4b1a      	ldr	r3, [pc, #104]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a4:	4a19      	ldr	r2, [pc, #100]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093ac:	e00f      	b.n	80093ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d106      	bne.n	80093c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093b4:	4b15      	ldr	r3, [pc, #84]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b8:	4a14      	ldr	r2, [pc, #80]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093c0:	e005      	b.n	80093ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093c2:	4b12      	ldr	r3, [pc, #72]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c6:	4a11      	ldr	r2, [pc, #68]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80093cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80093ce:	4b0f      	ldr	r3, [pc, #60]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a0e      	ldr	r2, [pc, #56]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80093d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093da:	f7f8 fdd1 	bl	8001f80 <HAL_GetTick>
 80093de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093e0:	e008      	b.n	80093f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093e2:	f7f8 fdcd 	bl	8001f80 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d901      	bls.n	80093f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e006      	b.n	8009402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093f4:	4b05      	ldr	r3, [pc, #20]	@ (800940c <RCCEx_PLL2_Config+0x15c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0f0      	beq.n	80093e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	58024400 	.word	0x58024400
 8009410:	ffff0007 	.word	0xffff0007

08009414 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009422:	4b53      	ldr	r3, [pc, #332]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	2b03      	cmp	r3, #3
 800942c:	d101      	bne.n	8009432 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e099      	b.n	8009566 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009432:	4b4f      	ldr	r3, [pc, #316]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a4e      	ldr	r2, [pc, #312]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800943c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800943e:	f7f8 fd9f 	bl	8001f80 <HAL_GetTick>
 8009442:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009444:	e008      	b.n	8009458 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009446:	f7f8 fd9b 	bl	8001f80 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d901      	bls.n	8009458 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e086      	b.n	8009566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009458:	4b45      	ldr	r3, [pc, #276]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1f0      	bne.n	8009446 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009464:	4b42      	ldr	r3, [pc, #264]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009468:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	051b      	lsls	r3, r3, #20
 8009472:	493f      	ldr	r1, [pc, #252]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009474:	4313      	orrs	r3, r2
 8009476:	628b      	str	r3, [r1, #40]	@ 0x28
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	3b01      	subs	r3, #1
 800947e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	3b01      	subs	r3, #1
 8009488:	025b      	lsls	r3, r3, #9
 800948a:	b29b      	uxth	r3, r3
 800948c:	431a      	orrs	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	3b01      	subs	r3, #1
 8009494:	041b      	lsls	r3, r3, #16
 8009496:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	061b      	lsls	r3, r3, #24
 80094a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094a8:	4931      	ldr	r1, [pc, #196]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094ae:	4b30      	ldr	r3, [pc, #192]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	492d      	ldr	r1, [pc, #180]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80094c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	4928      	ldr	r1, [pc, #160]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80094d2:	4b27      	ldr	r3, [pc, #156]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	4a26      	ldr	r2, [pc, #152]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80094de:	4b24      	ldr	r3, [pc, #144]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094e2:	4b24      	ldr	r3, [pc, #144]	@ (8009574 <RCCEx_PLL3_Config+0x160>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	69d2      	ldr	r2, [r2, #28]
 80094ea:	00d2      	lsls	r2, r2, #3
 80094ec:	4920      	ldr	r1, [pc, #128]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 80094f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d106      	bne.n	8009512 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009504:	4b1a      	ldr	r3, [pc, #104]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009508:	4a19      	ldr	r2, [pc, #100]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 800950a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800950e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009510:	e00f      	b.n	8009532 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d106      	bne.n	8009526 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009518:	4b15      	ldr	r3, [pc, #84]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 800951a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951c:	4a14      	ldr	r2, [pc, #80]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 800951e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009522:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009524:	e005      	b.n	8009532 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009526:	4b12      	ldr	r3, [pc, #72]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952a:	4a11      	ldr	r2, [pc, #68]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 800952c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009530:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009532:	4b0f      	ldr	r3, [pc, #60]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a0e      	ldr	r2, [pc, #56]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 8009538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800953c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800953e:	f7f8 fd1f 	bl	8001f80 <HAL_GetTick>
 8009542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009544:	e008      	b.n	8009558 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009546:	f7f8 fd1b 	bl	8001f80 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d901      	bls.n	8009558 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e006      	b.n	8009566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009558:	4b05      	ldr	r3, [pc, #20]	@ (8009570 <RCCEx_PLL3_Config+0x15c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0f0      	beq.n	8009546 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	58024400 	.word	0x58024400
 8009574:	ffff0007 	.word	0xffff0007

08009578 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e10f      	b.n	80097aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a87      	ldr	r2, [pc, #540]	@ (80097b4 <HAL_SPI_Init+0x23c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d00f      	beq.n	80095ba <HAL_SPI_Init+0x42>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a86      	ldr	r2, [pc, #536]	@ (80097b8 <HAL_SPI_Init+0x240>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d00a      	beq.n	80095ba <HAL_SPI_Init+0x42>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a84      	ldr	r2, [pc, #528]	@ (80097bc <HAL_SPI_Init+0x244>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d005      	beq.n	80095ba <HAL_SPI_Init+0x42>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	2b0f      	cmp	r3, #15
 80095b4:	d901      	bls.n	80095ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e0f7      	b.n	80097aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f900 	bl	80097c0 <SPI_GetPacketSize>
 80095c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a7b      	ldr	r2, [pc, #492]	@ (80097b4 <HAL_SPI_Init+0x23c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00c      	beq.n	80095e6 <HAL_SPI_Init+0x6e>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a79      	ldr	r2, [pc, #484]	@ (80097b8 <HAL_SPI_Init+0x240>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d007      	beq.n	80095e6 <HAL_SPI_Init+0x6e>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a78      	ldr	r2, [pc, #480]	@ (80097bc <HAL_SPI_Init+0x244>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d002      	beq.n	80095e6 <HAL_SPI_Init+0x6e>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b08      	cmp	r3, #8
 80095e4:	d811      	bhi.n	800960a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095ea:	4a72      	ldr	r2, [pc, #456]	@ (80097b4 <HAL_SPI_Init+0x23c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d009      	beq.n	8009604 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a70      	ldr	r2, [pc, #448]	@ (80097b8 <HAL_SPI_Init+0x240>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d004      	beq.n	8009604 <HAL_SPI_Init+0x8c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a6f      	ldr	r2, [pc, #444]	@ (80097bc <HAL_SPI_Init+0x244>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d104      	bne.n	800960e <HAL_SPI_Init+0x96>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b10      	cmp	r3, #16
 8009608:	d901      	bls.n	800960e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e0cd      	b.n	80097aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d106      	bne.n	8009628 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7f7 fd4c 	bl	80010c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0201 	bic.w	r2, r2, #1
 800963e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800964a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009654:	d119      	bne.n	800968a <HAL_SPI_Init+0x112>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800965e:	d103      	bne.n	8009668 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009664:	2b00      	cmp	r3, #0
 8009666:	d008      	beq.n	800967a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10c      	bne.n	800968a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009678:	d107      	bne.n	800968a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009688:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00f      	beq.n	80096b6 <HAL_SPI_Init+0x13e>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	2b06      	cmp	r3, #6
 800969c:	d90b      	bls.n	80096b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	e007      	b.n	80096c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	69da      	ldr	r2, [r3, #28]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ce:	431a      	orrs	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d8:	ea42 0103 	orr.w	r1, r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	430a      	orrs	r2, r1
 80096e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f0:	431a      	orrs	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	431a      	orrs	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800971a:	431a      	orrs	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	431a      	orrs	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009726:	ea42 0103 	orr.w	r1, r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d113      	bne.n	8009766 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009750:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009764:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00a      	beq.n	8009798 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40013000 	.word	0x40013000
 80097b8:	40003800 	.word	0x40003800
 80097bc:	40003c00 	.word	0x40003c00

080097c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	3301      	adds	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	3301      	adds	r3, #1
 80097d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	3307      	adds	r3, #7
 80097de:	08db      	lsrs	r3, r3, #3
 80097e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e049      	b.n	800989c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7f8 f94b 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2202      	movs	r2, #2
 8009826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3304      	adds	r3, #4
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f000 fd49 	bl	800a2cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d001      	beq.n	80098bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e054      	b.n	8009966 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0201 	orr.w	r2, r2, #1
 80098d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a26      	ldr	r2, [pc, #152]	@ (8009974 <HAL_TIM_Base_Start_IT+0xd0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d022      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098e6:	d01d      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a22      	ldr	r2, [pc, #136]	@ (8009978 <HAL_TIM_Base_Start_IT+0xd4>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d018      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a21      	ldr	r2, [pc, #132]	@ (800997c <HAL_TIM_Base_Start_IT+0xd8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d013      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a1f      	ldr	r2, [pc, #124]	@ (8009980 <HAL_TIM_Base_Start_IT+0xdc>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d00e      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a1e      	ldr	r2, [pc, #120]	@ (8009984 <HAL_TIM_Base_Start_IT+0xe0>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d009      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a1c      	ldr	r2, [pc, #112]	@ (8009988 <HAL_TIM_Base_Start_IT+0xe4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d004      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a1b      	ldr	r2, [pc, #108]	@ (800998c <HAL_TIM_Base_Start_IT+0xe8>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d115      	bne.n	8009950 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	4b19      	ldr	r3, [pc, #100]	@ (8009990 <HAL_TIM_Base_Start_IT+0xec>)
 800992c:	4013      	ands	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b06      	cmp	r3, #6
 8009934:	d015      	beq.n	8009962 <HAL_TIM_Base_Start_IT+0xbe>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800993c:	d011      	beq.n	8009962 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f042 0201 	orr.w	r2, r2, #1
 800994c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994e:	e008      	b.n	8009962 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 0201 	orr.w	r2, r2, #1
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	e000      	b.n	8009964 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40010000 	.word	0x40010000
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	40000c00 	.word	0x40000c00
 8009984:	40010400 	.word	0x40010400
 8009988:	40001800 	.word	0x40001800
 800998c:	40014000 	.word	0x40014000
 8009990:	00010007 	.word	0x00010007

08009994 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 0201 	bic.w	r2, r2, #1
 80099aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6a1a      	ldr	r2, [r3, #32]
 80099b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80099b6:	4013      	ands	r3, r2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10f      	bne.n	80099dc <HAL_TIM_Base_Stop_IT+0x48>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a1a      	ldr	r2, [r3, #32]
 80099c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80099c6:	4013      	ands	r3, r2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d107      	bne.n	80099dc <HAL_TIM_Base_Stop_IT+0x48>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0201 	bic.w	r2, r2, #1
 80099da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e049      	b.n	8009a98 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d106      	bne.n	8009a1e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f841 	bl	8009aa0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2202      	movs	r2, #2
 8009a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f000 fc4b 	bl	800a2cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e049      	b.n	8009b5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7f7 ffca 	bl	8001a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f000 fbea 	bl	800a2cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d020      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01b      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f06f 0202 	mvn.w	r2, #2
 8009b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	f003 0303 	and.w	r3, r3, #3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fb6f 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009bb2:	e005      	b.n	8009bc0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fb61 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fb72 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d020      	beq.n	8009c12 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f003 0304 	and.w	r3, r3, #4
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01b      	beq.n	8009c12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f06f 0204 	mvn.w	r2, #4
 8009be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fb49 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009bfe:	e005      	b.n	8009c0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fb3b 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fb4c 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f003 0308 	and.w	r3, r3, #8
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d020      	beq.n	8009c5e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f003 0308 	and.w	r3, r3, #8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d01b      	beq.n	8009c5e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f06f 0208 	mvn.w	r2, #8
 8009c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2204      	movs	r2, #4
 8009c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fb23 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009c4a:	e005      	b.n	8009c58 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fb15 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fb26 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d020      	beq.n	8009caa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f003 0310 	and.w	r3, r3, #16
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d01b      	beq.n	8009caa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f06f 0210 	mvn.w	r2, #16
 8009c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2208      	movs	r2, #8
 8009c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fafd 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009c96:	e005      	b.n	8009ca4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 faef 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fb00 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f06f 0201 	mvn.w	r2, #1
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7f7 f967 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d104      	bne.n	8009ce2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00c      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 f812 	bl	800ad20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00c      	beq.n	8009d20 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f80a 	bl	800ad34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00c      	beq.n	8009d44 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 faba 	bl	800a2b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00c      	beq.n	8009d68 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f003 0320 	and.w	r3, r3, #32
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0220 	mvn.w	r2, #32
 8009d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 ffd2 	bl	800ad0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d68:	bf00      	nop
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d101      	bne.n	8009d8e <HAL_TIM_OC_ConfigChannel+0x1e>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e066      	b.n	8009e5c <HAL_TIM_OC_ConfigChannel+0xec>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b14      	cmp	r3, #20
 8009d9a:	d857      	bhi.n	8009e4c <HAL_TIM_OC_ConfigChannel+0xdc>
 8009d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009da4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009df9 	.word	0x08009df9
 8009da8:	08009e4d 	.word	0x08009e4d
 8009dac:	08009e4d 	.word	0x08009e4d
 8009db0:	08009e4d 	.word	0x08009e4d
 8009db4:	08009e07 	.word	0x08009e07
 8009db8:	08009e4d 	.word	0x08009e4d
 8009dbc:	08009e4d 	.word	0x08009e4d
 8009dc0:	08009e4d 	.word	0x08009e4d
 8009dc4:	08009e15 	.word	0x08009e15
 8009dc8:	08009e4d 	.word	0x08009e4d
 8009dcc:	08009e4d 	.word	0x08009e4d
 8009dd0:	08009e4d 	.word	0x08009e4d
 8009dd4:	08009e23 	.word	0x08009e23
 8009dd8:	08009e4d 	.word	0x08009e4d
 8009ddc:	08009e4d 	.word	0x08009e4d
 8009de0:	08009e4d 	.word	0x08009e4d
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009e4d 	.word	0x08009e4d
 8009dec:	08009e4d 	.word	0x08009e4d
 8009df0:	08009e4d 	.word	0x08009e4d
 8009df4:	08009e3f 	.word	0x08009e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fb04 	bl	800a40c <TIM_OC1_SetConfig>
      break;
 8009e04:	e025      	b.n	8009e52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fb8d 	bl	800a52c <TIM_OC2_SetConfig>
      break;
 8009e12:	e01e      	b.n	8009e52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fc10 	bl	800a640 <TIM_OC3_SetConfig>
      break;
 8009e20:	e017      	b.n	8009e52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fc91 	bl	800a750 <TIM_OC4_SetConfig>
      break;
 8009e2e:	e010      	b.n	8009e52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68b9      	ldr	r1, [r7, #8]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fcf4 	bl	800a824 <TIM_OC5_SetConfig>
      break;
 8009e3c:	e009      	b.n	8009e52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fd51 	bl	800a8ec <TIM_OC6_SetConfig>
      break;
 8009e4a:	e002      	b.n	8009e52 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d101      	bne.n	8009e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e0ff      	b.n	800a082 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b14      	cmp	r3, #20
 8009e8e:	f200 80f0 	bhi.w	800a072 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009e92:	a201      	add	r2, pc, #4	@ (adr r2, 8009e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009eed 	.word	0x08009eed
 8009e9c:	0800a073 	.word	0x0800a073
 8009ea0:	0800a073 	.word	0x0800a073
 8009ea4:	0800a073 	.word	0x0800a073
 8009ea8:	08009f2d 	.word	0x08009f2d
 8009eac:	0800a073 	.word	0x0800a073
 8009eb0:	0800a073 	.word	0x0800a073
 8009eb4:	0800a073 	.word	0x0800a073
 8009eb8:	08009f6f 	.word	0x08009f6f
 8009ebc:	0800a073 	.word	0x0800a073
 8009ec0:	0800a073 	.word	0x0800a073
 8009ec4:	0800a073 	.word	0x0800a073
 8009ec8:	08009faf 	.word	0x08009faf
 8009ecc:	0800a073 	.word	0x0800a073
 8009ed0:	0800a073 	.word	0x0800a073
 8009ed4:	0800a073 	.word	0x0800a073
 8009ed8:	08009ff1 	.word	0x08009ff1
 8009edc:	0800a073 	.word	0x0800a073
 8009ee0:	0800a073 	.word	0x0800a073
 8009ee4:	0800a073 	.word	0x0800a073
 8009ee8:	0800a031 	.word	0x0800a031
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68b9      	ldr	r1, [r7, #8]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 fa8a 	bl	800a40c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0208 	orr.w	r2, r2, #8
 8009f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0204 	bic.w	r2, r2, #4
 8009f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6999      	ldr	r1, [r3, #24]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	691a      	ldr	r2, [r3, #16]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	619a      	str	r2, [r3, #24]
      break;
 8009f2a:	e0a5      	b.n	800a078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fafa 	bl	800a52c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6999      	ldr	r1, [r3, #24]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	021a      	lsls	r2, r3, #8
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	619a      	str	r2, [r3, #24]
      break;
 8009f6c:	e084      	b.n	800a078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fb63 	bl	800a640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69da      	ldr	r2, [r3, #28]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0208 	orr.w	r2, r2, #8
 8009f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69da      	ldr	r2, [r3, #28]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0204 	bic.w	r2, r2, #4
 8009f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69d9      	ldr	r1, [r3, #28]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	61da      	str	r2, [r3, #28]
      break;
 8009fac:	e064      	b.n	800a078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fbcb 	bl	800a750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69da      	ldr	r2, [r3, #28]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69da      	ldr	r2, [r3, #28]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	69d9      	ldr	r1, [r3, #28]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	021a      	lsls	r2, r3, #8
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	61da      	str	r2, [r3, #28]
      break;
 8009fee:	e043      	b.n	800a078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68b9      	ldr	r1, [r7, #8]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 fc14 	bl	800a824 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0208 	orr.w	r2, r2, #8
 800a00a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0204 	bic.w	r2, r2, #4
 800a01a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	691a      	ldr	r2, [r3, #16]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	430a      	orrs	r2, r1
 800a02c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a02e:	e023      	b.n	800a078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fc58 	bl	800a8ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a04a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a05a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	021a      	lsls	r2, r3, #8
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a070:	e002      	b.n	800a078 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]
      break;
 800a076:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a080:	7dfb      	ldrb	r3, [r7, #23]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop

0800a08c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d101      	bne.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1c>
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	e0dc      	b.n	800a262 <HAL_TIM_ConfigClockSource+0x1d6>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	4b6a      	ldr	r3, [pc, #424]	@ (800a26c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a64      	ldr	r2, [pc, #400]	@ (800a270 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	f000 80a9 	beq.w	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0e4:	4a62      	ldr	r2, [pc, #392]	@ (800a270 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	f200 80ae 	bhi.w	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ec:	4a61      	ldr	r2, [pc, #388]	@ (800a274 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	f000 80a1 	beq.w	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0f4:	4a5f      	ldr	r2, [pc, #380]	@ (800a274 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	f200 80a6 	bhi.w	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0fc:	4a5e      	ldr	r2, [pc, #376]	@ (800a278 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	f000 8099 	beq.w	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a104:	4a5c      	ldr	r2, [pc, #368]	@ (800a278 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a106:	4293      	cmp	r3, r2
 800a108:	f200 809e 	bhi.w	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a10c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a110:	f000 8091 	beq.w	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a114:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a118:	f200 8096 	bhi.w	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a11c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a120:	f000 8089 	beq.w	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a128:	f200 808e 	bhi.w	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a12c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a130:	d03e      	beq.n	800a1b0 <HAL_TIM_ConfigClockSource+0x124>
 800a132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a136:	f200 8087 	bhi.w	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a13e:	f000 8086 	beq.w	800a24e <HAL_TIM_ConfigClockSource+0x1c2>
 800a142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a146:	d87f      	bhi.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a148:	2b70      	cmp	r3, #112	@ 0x70
 800a14a:	d01a      	beq.n	800a182 <HAL_TIM_ConfigClockSource+0xf6>
 800a14c:	2b70      	cmp	r3, #112	@ 0x70
 800a14e:	d87b      	bhi.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a150:	2b60      	cmp	r3, #96	@ 0x60
 800a152:	d050      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x16a>
 800a154:	2b60      	cmp	r3, #96	@ 0x60
 800a156:	d877      	bhi.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a158:	2b50      	cmp	r3, #80	@ 0x50
 800a15a:	d03c      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x14a>
 800a15c:	2b50      	cmp	r3, #80	@ 0x50
 800a15e:	d873      	bhi.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a160:	2b40      	cmp	r3, #64	@ 0x40
 800a162:	d058      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x18a>
 800a164:	2b40      	cmp	r3, #64	@ 0x40
 800a166:	d86f      	bhi.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a168:	2b30      	cmp	r3, #48	@ 0x30
 800a16a:	d064      	beq.n	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a16c:	2b30      	cmp	r3, #48	@ 0x30
 800a16e:	d86b      	bhi.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a170:	2b20      	cmp	r3, #32
 800a172:	d060      	beq.n	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a174:	2b20      	cmp	r3, #32
 800a176:	d867      	bhi.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d05c      	beq.n	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a17c:	2b10      	cmp	r3, #16
 800a17e:	d05a      	beq.n	800a236 <HAL_TIM_ConfigClockSource+0x1aa>
 800a180:	e062      	b.n	800a248 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a192:	f000 fc8f 	bl	800aab4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a1a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	609a      	str	r2, [r3, #8]
      break;
 800a1ae:	e04f      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1c0:	f000 fc78 	bl	800aab4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1d2:	609a      	str	r2, [r3, #8]
      break;
 800a1d4:	e03c      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f000 fbe8 	bl	800a9b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2150      	movs	r1, #80	@ 0x50
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fc42 	bl	800aa78 <TIM_ITRx_SetConfig>
      break;
 800a1f4:	e02c      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a202:	461a      	mov	r2, r3
 800a204:	f000 fc07 	bl	800aa16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2160      	movs	r1, #96	@ 0x60
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fc32 	bl	800aa78 <TIM_ITRx_SetConfig>
      break;
 800a214:	e01c      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a222:	461a      	mov	r2, r3
 800a224:	f000 fbc8 	bl	800a9b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2140      	movs	r1, #64	@ 0x40
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fc22 	bl	800aa78 <TIM_ITRx_SetConfig>
      break;
 800a234:	e00c      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4619      	mov	r1, r3
 800a240:	4610      	mov	r0, r2
 800a242:	f000 fc19 	bl	800aa78 <TIM_ITRx_SetConfig>
      break;
 800a246:	e003      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
      break;
 800a24c:	e000      	b.n	800a250 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a24e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a260:	7bfb      	ldrb	r3, [r7, #15]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	ffceff88 	.word	0xffceff88
 800a270:	00100040 	.word	0x00100040
 800a274:	00100030 	.word	0x00100030
 800a278:	00100020 	.word	0x00100020

0800a27c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a43      	ldr	r2, [pc, #268]	@ (800a3ec <TIM_Base_SetConfig+0x120>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d013      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ea:	d00f      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a40      	ldr	r2, [pc, #256]	@ (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00b      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a3f      	ldr	r2, [pc, #252]	@ (800a3f4 <TIM_Base_SetConfig+0x128>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d007      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a3e      	ldr	r2, [pc, #248]	@ (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d003      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a3d      	ldr	r2, [pc, #244]	@ (800a3fc <TIM_Base_SetConfig+0x130>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d108      	bne.n	800a31e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a32      	ldr	r2, [pc, #200]	@ (800a3ec <TIM_Base_SetConfig+0x120>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d01f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a32c:	d01b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a2f      	ldr	r2, [pc, #188]	@ (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d017      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a2e      	ldr	r2, [pc, #184]	@ (800a3f4 <TIM_Base_SetConfig+0x128>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d013      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a2d      	ldr	r2, [pc, #180]	@ (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d00f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a2c      	ldr	r2, [pc, #176]	@ (800a3fc <TIM_Base_SetConfig+0x130>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a2b      	ldr	r2, [pc, #172]	@ (800a400 <TIM_Base_SetConfig+0x134>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d007      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a2a      	ldr	r2, [pc, #168]	@ (800a404 <TIM_Base_SetConfig+0x138>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d003      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a29      	ldr	r2, [pc, #164]	@ (800a408 <TIM_Base_SetConfig+0x13c>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d108      	bne.n	800a378 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a36c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a14      	ldr	r2, [pc, #80]	@ (800a3ec <TIM_Base_SetConfig+0x120>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d00f      	beq.n	800a3be <TIM_Base_SetConfig+0xf2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a16      	ldr	r2, [pc, #88]	@ (800a3fc <TIM_Base_SetConfig+0x130>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d00b      	beq.n	800a3be <TIM_Base_SetConfig+0xf2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a15      	ldr	r2, [pc, #84]	@ (800a400 <TIM_Base_SetConfig+0x134>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d007      	beq.n	800a3be <TIM_Base_SetConfig+0xf2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a14      	ldr	r2, [pc, #80]	@ (800a404 <TIM_Base_SetConfig+0x138>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d003      	beq.n	800a3be <TIM_Base_SetConfig+0xf2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a13      	ldr	r2, [pc, #76]	@ (800a408 <TIM_Base_SetConfig+0x13c>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d103      	bne.n	800a3c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	691a      	ldr	r2, [r3, #16]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f043 0204 	orr.w	r2, r3, #4
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	601a      	str	r2, [r3, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	40010000 	.word	0x40010000
 800a3f0:	40000400 	.word	0x40000400
 800a3f4:	40000800 	.word	0x40000800
 800a3f8:	40000c00 	.word	0x40000c00
 800a3fc:	40010400 	.word	0x40010400
 800a400:	40014000 	.word	0x40014000
 800a404:	40014400 	.word	0x40014400
 800a408:	40014800 	.word	0x40014800

0800a40c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	f023 0201 	bic.w	r2, r3, #1
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4b37      	ldr	r3, [pc, #220]	@ (800a514 <TIM_OC1_SetConfig+0x108>)
 800a438:	4013      	ands	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f023 0303 	bic.w	r3, r3, #3
 800a442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f023 0302 	bic.w	r3, r3, #2
 800a454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a2d      	ldr	r2, [pc, #180]	@ (800a518 <TIM_OC1_SetConfig+0x10c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d00f      	beq.n	800a488 <TIM_OC1_SetConfig+0x7c>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a2c      	ldr	r2, [pc, #176]	@ (800a51c <TIM_OC1_SetConfig+0x110>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d00b      	beq.n	800a488 <TIM_OC1_SetConfig+0x7c>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a2b      	ldr	r2, [pc, #172]	@ (800a520 <TIM_OC1_SetConfig+0x114>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d007      	beq.n	800a488 <TIM_OC1_SetConfig+0x7c>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a2a      	ldr	r2, [pc, #168]	@ (800a524 <TIM_OC1_SetConfig+0x118>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d003      	beq.n	800a488 <TIM_OC1_SetConfig+0x7c>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a29      	ldr	r2, [pc, #164]	@ (800a528 <TIM_OC1_SetConfig+0x11c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d10c      	bne.n	800a4a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f023 0308 	bic.w	r3, r3, #8
 800a48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	4313      	orrs	r3, r2
 800a498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f023 0304 	bic.w	r3, r3, #4
 800a4a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a518 <TIM_OC1_SetConfig+0x10c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00f      	beq.n	800a4ca <TIM_OC1_SetConfig+0xbe>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a51c <TIM_OC1_SetConfig+0x110>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00b      	beq.n	800a4ca <TIM_OC1_SetConfig+0xbe>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a1a      	ldr	r2, [pc, #104]	@ (800a520 <TIM_OC1_SetConfig+0x114>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d007      	beq.n	800a4ca <TIM_OC1_SetConfig+0xbe>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a19      	ldr	r2, [pc, #100]	@ (800a524 <TIM_OC1_SetConfig+0x118>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d003      	beq.n	800a4ca <TIM_OC1_SetConfig+0xbe>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a18      	ldr	r2, [pc, #96]	@ (800a528 <TIM_OC1_SetConfig+0x11c>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d111      	bne.n	800a4ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	621a      	str	r2, [r3, #32]
}
 800a508:	bf00      	nop
 800a50a:	371c      	adds	r7, #28
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	fffeff8f 	.word	0xfffeff8f
 800a518:	40010000 	.word	0x40010000
 800a51c:	40010400 	.word	0x40010400
 800a520:	40014000 	.word	0x40014000
 800a524:	40014400 	.word	0x40014400
 800a528:	40014800 	.word	0x40014800

0800a52c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	f023 0210 	bic.w	r2, r3, #16
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	4b34      	ldr	r3, [pc, #208]	@ (800a628 <TIM_OC2_SetConfig+0xfc>)
 800a558:	4013      	ands	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	021b      	lsls	r3, r3, #8
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f023 0320 	bic.w	r3, r3, #32
 800a576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	011b      	lsls	r3, r3, #4
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4313      	orrs	r3, r2
 800a582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a29      	ldr	r2, [pc, #164]	@ (800a62c <TIM_OC2_SetConfig+0x100>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d003      	beq.n	800a594 <TIM_OC2_SetConfig+0x68>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a28      	ldr	r2, [pc, #160]	@ (800a630 <TIM_OC2_SetConfig+0x104>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d10d      	bne.n	800a5b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	011b      	lsls	r3, r3, #4
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a1e      	ldr	r2, [pc, #120]	@ (800a62c <TIM_OC2_SetConfig+0x100>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00f      	beq.n	800a5d8 <TIM_OC2_SetConfig+0xac>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a1d      	ldr	r2, [pc, #116]	@ (800a630 <TIM_OC2_SetConfig+0x104>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00b      	beq.n	800a5d8 <TIM_OC2_SetConfig+0xac>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a1c      	ldr	r2, [pc, #112]	@ (800a634 <TIM_OC2_SetConfig+0x108>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d007      	beq.n	800a5d8 <TIM_OC2_SetConfig+0xac>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a638 <TIM_OC2_SetConfig+0x10c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d003      	beq.n	800a5d8 <TIM_OC2_SetConfig+0xac>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a63c <TIM_OC2_SetConfig+0x110>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d113      	bne.n	800a600 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a5de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	621a      	str	r2, [r3, #32]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	feff8fff 	.word	0xfeff8fff
 800a62c:	40010000 	.word	0x40010000
 800a630:	40010400 	.word	0x40010400
 800a634:	40014000 	.word	0x40014000
 800a638:	40014400 	.word	0x40014400
 800a63c:	40014800 	.word	0x40014800

0800a640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4b33      	ldr	r3, [pc, #204]	@ (800a738 <TIM_OC3_SetConfig+0xf8>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f023 0303 	bic.w	r3, r3, #3
 800a676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	4313      	orrs	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	021b      	lsls	r3, r3, #8
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	4313      	orrs	r3, r2
 800a694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a28      	ldr	r2, [pc, #160]	@ (800a73c <TIM_OC3_SetConfig+0xfc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d003      	beq.n	800a6a6 <TIM_OC3_SetConfig+0x66>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a27      	ldr	r2, [pc, #156]	@ (800a740 <TIM_OC3_SetConfig+0x100>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d10d      	bne.n	800a6c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a73c <TIM_OC3_SetConfig+0xfc>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00f      	beq.n	800a6ea <TIM_OC3_SetConfig+0xaa>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a1c      	ldr	r2, [pc, #112]	@ (800a740 <TIM_OC3_SetConfig+0x100>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d00b      	beq.n	800a6ea <TIM_OC3_SetConfig+0xaa>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a1b      	ldr	r2, [pc, #108]	@ (800a744 <TIM_OC3_SetConfig+0x104>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d007      	beq.n	800a6ea <TIM_OC3_SetConfig+0xaa>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a1a      	ldr	r2, [pc, #104]	@ (800a748 <TIM_OC3_SetConfig+0x108>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d003      	beq.n	800a6ea <TIM_OC3_SetConfig+0xaa>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a19      	ldr	r2, [pc, #100]	@ (800a74c <TIM_OC3_SetConfig+0x10c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d113      	bne.n	800a712 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	011b      	lsls	r3, r3, #4
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	4313      	orrs	r3, r2
 800a710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	621a      	str	r2, [r3, #32]
}
 800a72c:	bf00      	nop
 800a72e:	371c      	adds	r7, #28
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	fffeff8f 	.word	0xfffeff8f
 800a73c:	40010000 	.word	0x40010000
 800a740:	40010400 	.word	0x40010400
 800a744:	40014000 	.word	0x40014000
 800a748:	40014400 	.word	0x40014400
 800a74c:	40014800 	.word	0x40014800

0800a750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	4b24      	ldr	r3, [pc, #144]	@ (800a80c <TIM_OC4_SetConfig+0xbc>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	021b      	lsls	r3, r3, #8
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	4313      	orrs	r3, r2
 800a792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a79a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	031b      	lsls	r3, r3, #12
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a19      	ldr	r2, [pc, #100]	@ (800a810 <TIM_OC4_SetConfig+0xc0>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d00f      	beq.n	800a7d0 <TIM_OC4_SetConfig+0x80>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a18      	ldr	r2, [pc, #96]	@ (800a814 <TIM_OC4_SetConfig+0xc4>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d00b      	beq.n	800a7d0 <TIM_OC4_SetConfig+0x80>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a17      	ldr	r2, [pc, #92]	@ (800a818 <TIM_OC4_SetConfig+0xc8>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d007      	beq.n	800a7d0 <TIM_OC4_SetConfig+0x80>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a16      	ldr	r2, [pc, #88]	@ (800a81c <TIM_OC4_SetConfig+0xcc>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d003      	beq.n	800a7d0 <TIM_OC4_SetConfig+0x80>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a15      	ldr	r2, [pc, #84]	@ (800a820 <TIM_OC4_SetConfig+0xd0>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d109      	bne.n	800a7e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	019b      	lsls	r3, r3, #6
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	621a      	str	r2, [r3, #32]
}
 800a7fe:	bf00      	nop
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	feff8fff 	.word	0xfeff8fff
 800a810:	40010000 	.word	0x40010000
 800a814:	40010400 	.word	0x40010400
 800a818:	40014000 	.word	0x40014000
 800a81c:	40014400 	.word	0x40014400
 800a820:	40014800 	.word	0x40014800

0800a824 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	4b21      	ldr	r3, [pc, #132]	@ (800a8d4 <TIM_OC5_SetConfig+0xb0>)
 800a850:	4013      	ands	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	041b      	lsls	r3, r3, #16
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	4313      	orrs	r3, r2
 800a870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a18      	ldr	r2, [pc, #96]	@ (800a8d8 <TIM_OC5_SetConfig+0xb4>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d00f      	beq.n	800a89a <TIM_OC5_SetConfig+0x76>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a17      	ldr	r2, [pc, #92]	@ (800a8dc <TIM_OC5_SetConfig+0xb8>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d00b      	beq.n	800a89a <TIM_OC5_SetConfig+0x76>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a16      	ldr	r2, [pc, #88]	@ (800a8e0 <TIM_OC5_SetConfig+0xbc>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d007      	beq.n	800a89a <TIM_OC5_SetConfig+0x76>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a15      	ldr	r2, [pc, #84]	@ (800a8e4 <TIM_OC5_SetConfig+0xc0>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d003      	beq.n	800a89a <TIM_OC5_SetConfig+0x76>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a14      	ldr	r2, [pc, #80]	@ (800a8e8 <TIM_OC5_SetConfig+0xc4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d109      	bne.n	800a8ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	621a      	str	r2, [r3, #32]
}
 800a8c8:	bf00      	nop
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	fffeff8f 	.word	0xfffeff8f
 800a8d8:	40010000 	.word	0x40010000
 800a8dc:	40010400 	.word	0x40010400
 800a8e0:	40014000 	.word	0x40014000
 800a8e4:	40014400 	.word	0x40014400
 800a8e8:	40014800 	.word	0x40014800

0800a8ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4b22      	ldr	r3, [pc, #136]	@ (800a9a0 <TIM_OC6_SetConfig+0xb4>)
 800a918:	4013      	ands	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	021b      	lsls	r3, r3, #8
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	4313      	orrs	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a92e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	051b      	lsls	r3, r3, #20
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	4313      	orrs	r3, r2
 800a93a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a19      	ldr	r2, [pc, #100]	@ (800a9a4 <TIM_OC6_SetConfig+0xb8>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d00f      	beq.n	800a964 <TIM_OC6_SetConfig+0x78>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a18      	ldr	r2, [pc, #96]	@ (800a9a8 <TIM_OC6_SetConfig+0xbc>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00b      	beq.n	800a964 <TIM_OC6_SetConfig+0x78>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a17      	ldr	r2, [pc, #92]	@ (800a9ac <TIM_OC6_SetConfig+0xc0>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d007      	beq.n	800a964 <TIM_OC6_SetConfig+0x78>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a16      	ldr	r2, [pc, #88]	@ (800a9b0 <TIM_OC6_SetConfig+0xc4>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d003      	beq.n	800a964 <TIM_OC6_SetConfig+0x78>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a15      	ldr	r2, [pc, #84]	@ (800a9b4 <TIM_OC6_SetConfig+0xc8>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d109      	bne.n	800a978 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a96a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	029b      	lsls	r3, r3, #10
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	4313      	orrs	r3, r2
 800a976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	621a      	str	r2, [r3, #32]
}
 800a992:	bf00      	nop
 800a994:	371c      	adds	r7, #28
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	feff8fff 	.word	0xfeff8fff
 800a9a4:	40010000 	.word	0x40010000
 800a9a8:	40010400 	.word	0x40010400
 800a9ac:	40014000 	.word	0x40014000
 800a9b0:	40014400 	.word	0x40014400
 800a9b4:	40014800 	.word	0x40014800

0800a9b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f023 0201 	bic.w	r2, r3, #1
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a9e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f023 030a 	bic.w	r3, r3, #10
 800a9f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	621a      	str	r2, [r3, #32]
}
 800aa0a:	bf00      	nop
 800aa0c:	371c      	adds	r7, #28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b087      	sub	sp, #28
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	60f8      	str	r0, [r7, #12]
 800aa1e:	60b9      	str	r1, [r7, #8]
 800aa20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	f023 0210 	bic.w	r2, r3, #16
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aa40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	031b      	lsls	r3, r3, #12
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aa52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	011b      	lsls	r3, r3, #4
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	621a      	str	r2, [r3, #32]
}
 800aa6a:	bf00      	nop
 800aa6c:	371c      	adds	r7, #28
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
	...

0800aa78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	4b09      	ldr	r3, [pc, #36]	@ (800aab0 <TIM_ITRx_SetConfig+0x38>)
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	f043 0307 	orr.w	r3, r3, #7
 800aa9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	609a      	str	r2, [r3, #8]
}
 800aaa2:	bf00      	nop
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	ffcfff8f 	.word	0xffcfff8f

0800aab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	021a      	lsls	r2, r3, #8
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	431a      	orrs	r2, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	4313      	orrs	r3, r2
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	4313      	orrs	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	609a      	str	r2, [r3, #8]
}
 800aae8:	bf00      	nop
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d101      	bne.n	800ab0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	e06d      	b.n	800abe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a30      	ldr	r2, [pc, #192]	@ (800abf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d004      	beq.n	800ab40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a2f      	ldr	r2, [pc, #188]	@ (800abf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d108      	bne.n	800ab52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ab46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a20      	ldr	r2, [pc, #128]	@ (800abf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d022      	beq.n	800abbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab7e:	d01d      	beq.n	800abbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a1d      	ldr	r2, [pc, #116]	@ (800abfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d018      	beq.n	800abbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a1c      	ldr	r2, [pc, #112]	@ (800ac00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d013      	beq.n	800abbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a1a      	ldr	r2, [pc, #104]	@ (800ac04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d00e      	beq.n	800abbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a15      	ldr	r2, [pc, #84]	@ (800abf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d009      	beq.n	800abbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a16      	ldr	r2, [pc, #88]	@ (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d004      	beq.n	800abbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a15      	ldr	r2, [pc, #84]	@ (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d10c      	bne.n	800abd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	40010000 	.word	0x40010000
 800abf8:	40010400 	.word	0x40010400
 800abfc:	40000400 	.word	0x40000400
 800ac00:	40000800 	.word	0x40000800
 800ac04:	40000c00 	.word	0x40000c00
 800ac08:	40001800 	.word	0x40001800
 800ac0c:	40014000 	.word	0x40014000

0800ac10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d101      	bne.n	800ac2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac28:	2302      	movs	r3, #2
 800ac2a:	e065      	b.n	800acf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	695b      	ldr	r3, [r3, #20]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	041b      	lsls	r3, r3, #16
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a16      	ldr	r2, [pc, #88]	@ (800ad04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d004      	beq.n	800acba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a14      	ldr	r2, [pc, #80]	@ (800ad08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d115      	bne.n	800ace6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc4:	051b      	lsls	r3, r3, #20
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	40010000 	.word	0x40010000
 800ad08:	40010400 	.word	0x40010400

0800ad0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e042      	b.n	800ade0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7f7 f819 	bl	8001da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2224      	movs	r2, #36	@ 0x24
 800ad76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0201 	bic.w	r2, r2, #1
 800ad88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 f9c8 	bl	800c128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fc5d 	bl	800b658 <UART_SetConfig>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d101      	bne.n	800ada8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e01b      	b.n	800ade0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f042 0201 	orr.w	r2, r2, #1
 800add6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 fa47 	bl	800c26c <UART_CheckIdleState>
 800adde:	4603      	mov	r3, r0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08a      	sub	sp, #40	@ 0x28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4613      	mov	r3, r2
 800adf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adfc:	2b20      	cmp	r3, #32
 800adfe:	d137      	bne.n	800ae70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <HAL_UART_Receive_IT+0x24>
 800ae06:	88fb      	ldrh	r3, [r7, #6]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e030      	b.n	800ae72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a18      	ldr	r2, [pc, #96]	@ (800ae7c <HAL_UART_Receive_IT+0x94>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d01f      	beq.n	800ae60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d018      	beq.n	800ae60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	e853 3f00 	ldrex	r3, [r3]
 800ae3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae42:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	623b      	str	r3, [r7, #32]
 800ae4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	69f9      	ldr	r1, [r7, #28]
 800ae52:	6a3a      	ldr	r2, [r7, #32]
 800ae54:	e841 2300 	strex	r3, r2, [r1]
 800ae58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e6      	bne.n	800ae2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	461a      	mov	r2, r3
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f001 fb18 	bl	800c49c <UART_Start_Receive_IT>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	e000      	b.n	800ae72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ae70:	2302      	movs	r3, #2
  }
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3728      	adds	r7, #40	@ 0x28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	58000c00 	.word	0x58000c00

0800ae80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b0ba      	sub	sp, #232	@ 0xe8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	69db      	ldr	r3, [r3, #28]
 800ae8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aeaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aeae:	4013      	ands	r3, r2
 800aeb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aeb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d11b      	bne.n	800aef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aec0:	f003 0320 	and.w	r3, r3, #32
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d015      	beq.n	800aef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aecc:	f003 0320 	and.w	r3, r3, #32
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d105      	bne.n	800aee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d009      	beq.n	800aef4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 8393 	beq.w	800b610 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	4798      	blx	r3
      }
      return;
 800aef2:	e38d      	b.n	800b610 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 8123 	beq.w	800b144 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aefe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af02:	4b8d      	ldr	r3, [pc, #564]	@ (800b138 <HAL_UART_IRQHandler+0x2b8>)
 800af04:	4013      	ands	r3, r2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800af0e:	4b8b      	ldr	r3, [pc, #556]	@ (800b13c <HAL_UART_IRQHandler+0x2bc>)
 800af10:	4013      	ands	r3, r2
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 8116 	beq.w	800b144 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d011      	beq.n	800af48 <HAL_UART_IRQHandler+0xc8>
 800af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00b      	beq.n	800af48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2201      	movs	r2, #1
 800af36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af3e:	f043 0201 	orr.w	r2, r3, #1
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b00      	cmp	r3, #0
 800af52:	d011      	beq.n	800af78 <HAL_UART_IRQHandler+0xf8>
 800af54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2202      	movs	r2, #2
 800af66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af6e:	f043 0204 	orr.w	r2, r3, #4
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d011      	beq.n	800afa8 <HAL_UART_IRQHandler+0x128>
 800af84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00b      	beq.n	800afa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2204      	movs	r2, #4
 800af96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af9e:	f043 0202 	orr.w	r2, r3, #2
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800afa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afac:	f003 0308 	and.w	r3, r3, #8
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d017      	beq.n	800afe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800afb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afb8:	f003 0320 	and.w	r3, r3, #32
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d105      	bne.n	800afcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800afc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800afc4:	4b5c      	ldr	r3, [pc, #368]	@ (800b138 <HAL_UART_IRQHandler+0x2b8>)
 800afc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00b      	beq.n	800afe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2208      	movs	r2, #8
 800afd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afda:	f043 0208 	orr.w	r2, r3, #8
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800afe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afec:	2b00      	cmp	r3, #0
 800afee:	d012      	beq.n	800b016 <HAL_UART_IRQHandler+0x196>
 800aff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00c      	beq.n	800b016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b00c:	f043 0220 	orr.w	r2, r3, #32
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 82f9 	beq.w	800b614 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b026:	f003 0320 	and.w	r3, r3, #32
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d013      	beq.n	800b056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b00      	cmp	r3, #0
 800b038:	d105      	bne.n	800b046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b03a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b03e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d007      	beq.n	800b056 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b05c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b06a:	2b40      	cmp	r3, #64	@ 0x40
 800b06c:	d005      	beq.n	800b07a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b06e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b076:	2b00      	cmp	r3, #0
 800b078:	d054      	beq.n	800b124 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f001 fb30 	bl	800c6e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b08a:	2b40      	cmp	r3, #64	@ 0x40
 800b08c:	d146      	bne.n	800b11c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3308      	adds	r3, #8
 800b094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b09c:	e853 3f00 	ldrex	r3, [r3]
 800b0a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b0a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b0a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b0ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b0be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b0c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b0ca:	e841 2300 	strex	r3, r2, [r1]
 800b0ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b0d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1d9      	bne.n	800b08e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d017      	beq.n	800b114 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ea:	4a15      	ldr	r2, [pc, #84]	@ (800b140 <HAL_UART_IRQHandler+0x2c0>)
 800b0ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7f8 fe35 	bl	8003d64 <HAL_DMA_Abort_IT>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d019      	beq.n	800b134 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b10e:	4610      	mov	r0, r2
 800b110:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b112:	e00f      	b.n	800b134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7f5 fbdd 	bl	80008d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b11a:	e00b      	b.n	800b134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7f5 fbd9 	bl	80008d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b122:	e007      	b.n	800b134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7f5 fbd5 	bl	80008d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b132:	e26f      	b.n	800b614 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b134:	bf00      	nop
    return;
 800b136:	e26d      	b.n	800b614 <HAL_UART_IRQHandler+0x794>
 800b138:	10000001 	.word	0x10000001
 800b13c:	04000120 	.word	0x04000120
 800b140:	0800c7ad 	.word	0x0800c7ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b148:	2b01      	cmp	r3, #1
 800b14a:	f040 8203 	bne.w	800b554 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b152:	f003 0310 	and.w	r3, r3, #16
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 81fc 	beq.w	800b554 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 81f5 	beq.w	800b554 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2210      	movs	r2, #16
 800b170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b17c:	2b40      	cmp	r3, #64	@ 0x40
 800b17e:	f040 816d 	bne.w	800b45c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4aa4      	ldr	r2, [pc, #656]	@ (800b41c <HAL_UART_IRQHandler+0x59c>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d068      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4aa1      	ldr	r2, [pc, #644]	@ (800b420 <HAL_UART_IRQHandler+0x5a0>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d061      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a9f      	ldr	r2, [pc, #636]	@ (800b424 <HAL_UART_IRQHandler+0x5a4>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d05a      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a9c      	ldr	r2, [pc, #624]	@ (800b428 <HAL_UART_IRQHandler+0x5a8>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d053      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a9a      	ldr	r2, [pc, #616]	@ (800b42c <HAL_UART_IRQHandler+0x5ac>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d04c      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a97      	ldr	r2, [pc, #604]	@ (800b430 <HAL_UART_IRQHandler+0x5b0>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d045      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a95      	ldr	r2, [pc, #596]	@ (800b434 <HAL_UART_IRQHandler+0x5b4>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d03e      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a92      	ldr	r2, [pc, #584]	@ (800b438 <HAL_UART_IRQHandler+0x5b8>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d037      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a90      	ldr	r2, [pc, #576]	@ (800b43c <HAL_UART_IRQHandler+0x5bc>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d030      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a8d      	ldr	r2, [pc, #564]	@ (800b440 <HAL_UART_IRQHandler+0x5c0>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d029      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a8b      	ldr	r2, [pc, #556]	@ (800b444 <HAL_UART_IRQHandler+0x5c4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d022      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a88      	ldr	r2, [pc, #544]	@ (800b448 <HAL_UART_IRQHandler+0x5c8>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d01b      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a86      	ldr	r2, [pc, #536]	@ (800b44c <HAL_UART_IRQHandler+0x5cc>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d014      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a83      	ldr	r2, [pc, #524]	@ (800b450 <HAL_UART_IRQHandler+0x5d0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00d      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a81      	ldr	r2, [pc, #516]	@ (800b454 <HAL_UART_IRQHandler+0x5d4>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d006      	beq.n	800b262 <HAL_UART_IRQHandler+0x3e2>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a7e      	ldr	r2, [pc, #504]	@ (800b458 <HAL_UART_IRQHandler+0x5d8>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d106      	bne.n	800b270 <HAL_UART_IRQHandler+0x3f0>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	e005      	b.n	800b27c <HAL_UART_IRQHandler+0x3fc>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80ad 	beq.w	800b3e4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b290:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b294:	429a      	cmp	r2, r3
 800b296:	f080 80a5 	bcs.w	800b3e4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2b0:	f000 8087 	beq.w	800b3c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2c0:	e853 3f00 	ldrex	r3, [r3]
 800b2c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b2ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b2ee:	e841 2300 	strex	r3, r2, [r1]
 800b2f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1da      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b30e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b310:	f023 0301 	bic.w	r3, r3, #1
 800b314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3308      	adds	r3, #8
 800b31e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b322:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b326:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b328:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b32a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e1      	bne.n	800b2fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3308      	adds	r3, #8
 800b340:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b34a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b34c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3308      	adds	r3, #8
 800b35a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b35e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b360:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b364:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b36c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e3      	bne.n	800b33a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2220      	movs	r2, #32
 800b376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b38e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b390:	f023 0310 	bic.w	r3, r3, #16
 800b394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3aa:	e841 2300 	strex	r3, r2, [r1]
 800b3ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e4      	bne.n	800b380 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7f8 f9b3 	bl	8003728 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f92f 	bl	800b640 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b3e2:	e119      	b.n	800b618 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	f040 8112 	bne.w	800b618 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b400:	f040 810a 	bne.w	800b618 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2202      	movs	r2, #2
 800b408:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f914 	bl	800b640 <HAL_UARTEx_RxEventCallback>
      return;
 800b418:	e0fe      	b.n	800b618 <HAL_UART_IRQHandler+0x798>
 800b41a:	bf00      	nop
 800b41c:	40020010 	.word	0x40020010
 800b420:	40020028 	.word	0x40020028
 800b424:	40020040 	.word	0x40020040
 800b428:	40020058 	.word	0x40020058
 800b42c:	40020070 	.word	0x40020070
 800b430:	40020088 	.word	0x40020088
 800b434:	400200a0 	.word	0x400200a0
 800b438:	400200b8 	.word	0x400200b8
 800b43c:	40020410 	.word	0x40020410
 800b440:	40020428 	.word	0x40020428
 800b444:	40020440 	.word	0x40020440
 800b448:	40020458 	.word	0x40020458
 800b44c:	40020470 	.word	0x40020470
 800b450:	40020488 	.word	0x40020488
 800b454:	400204a0 	.word	0x400204a0
 800b458:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b468:	b29b      	uxth	r3, r3
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b476:	b29b      	uxth	r3, r3
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 80cf 	beq.w	800b61c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800b47e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 80ca 	beq.w	800b61c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b490:	e853 3f00 	ldrex	r3, [r3]
 800b494:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b49c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b4aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4b2:	e841 2300 	strex	r3, r2, [r1]
 800b4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1e4      	bne.n	800b488 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	623b      	str	r3, [r7, #32]
   return(result);
 800b4ce:	6a3a      	ldr	r2, [r7, #32]
 800b4d0:	4b55      	ldr	r3, [pc, #340]	@ (800b628 <HAL_UART_IRQHandler+0x7a8>)
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b4e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e3      	bne.n	800b4be <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	60fb      	str	r3, [r7, #12]
   return(result);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f023 0310 	bic.w	r3, r3, #16
 800b51e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b52c:	61fb      	str	r3, [r7, #28]
 800b52e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b530:	69b9      	ldr	r1, [r7, #24]
 800b532:	69fa      	ldr	r2, [r7, #28]
 800b534:	e841 2300 	strex	r3, r2, [r1]
 800b538:	617b      	str	r3, [r7, #20]
   return(result);
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1e4      	bne.n	800b50a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2202      	movs	r2, #2
 800b544:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f877 	bl	800b640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b552:	e063      	b.n	800b61c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00e      	beq.n	800b57e <HAL_UART_IRQHandler+0x6fe>
 800b560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d008      	beq.n	800b57e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f001 fe76 	bl	800d268 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b57c:	e051      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b586:	2b00      	cmp	r3, #0
 800b588:	d014      	beq.n	800b5b4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b592:	2b00      	cmp	r3, #0
 800b594:	d105      	bne.n	800b5a2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b59a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d008      	beq.n	800b5b4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d03a      	beq.n	800b620 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	4798      	blx	r3
    }
    return;
 800b5b2:	e035      	b.n	800b620 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d009      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x754>
 800b5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 f8ff 	bl	800c7d0 <UART_EndTransmit_IT>
    return;
 800b5d2:	e026      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d009      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x774>
 800b5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 fe4f 	bl	800d290 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5f2:	e016      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d010      	beq.n	800b622 <HAL_UART_IRQHandler+0x7a2>
 800b600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b604:	2b00      	cmp	r3, #0
 800b606:	da0c      	bge.n	800b622 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f001 fe37 	bl	800d27c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b60e:	e008      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
      return;
 800b610:	bf00      	nop
 800b612:	e006      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
    return;
 800b614:	bf00      	nop
 800b616:	e004      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
      return;
 800b618:	bf00      	nop
 800b61a:	e002      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
      return;
 800b61c:	bf00      	nop
 800b61e:	e000      	b.n	800b622 <HAL_UART_IRQHandler+0x7a2>
    return;
 800b620:	bf00      	nop
  }
}
 800b622:	37e8      	adds	r7, #232	@ 0xe8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	effffffe 	.word	0xeffffffe

0800b62c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b65c:	b092      	sub	sp, #72	@ 0x48
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	689a      	ldr	r2, [r3, #8]
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	431a      	orrs	r2, r3
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	431a      	orrs	r2, r3
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	4bbe      	ldr	r3, [pc, #760]	@ (800b980 <UART_SetConfig+0x328>)
 800b688:	4013      	ands	r3, r2
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	6812      	ldr	r2, [r2, #0]
 800b68e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b690:	430b      	orrs	r3, r1
 800b692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	68da      	ldr	r2, [r3, #12]
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4ab3      	ldr	r2, [pc, #716]	@ (800b984 <UART_SetConfig+0x32c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d004      	beq.n	800b6c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	689a      	ldr	r2, [r3, #8]
 800b6ca:	4baf      	ldr	r3, [pc, #700]	@ (800b988 <UART_SetConfig+0x330>)
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	6812      	ldr	r2, [r2, #0]
 800b6d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6de:	f023 010f 	bic.w	r1, r3, #15
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4aa6      	ldr	r2, [pc, #664]	@ (800b98c <UART_SetConfig+0x334>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d177      	bne.n	800b7e8 <UART_SetConfig+0x190>
 800b6f8:	4ba5      	ldr	r3, [pc, #660]	@ (800b990 <UART_SetConfig+0x338>)
 800b6fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b700:	2b28      	cmp	r3, #40	@ 0x28
 800b702:	d86d      	bhi.n	800b7e0 <UART_SetConfig+0x188>
 800b704:	a201      	add	r2, pc, #4	@ (adr r2, 800b70c <UART_SetConfig+0xb4>)
 800b706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70a:	bf00      	nop
 800b70c:	0800b7b1 	.word	0x0800b7b1
 800b710:	0800b7e1 	.word	0x0800b7e1
 800b714:	0800b7e1 	.word	0x0800b7e1
 800b718:	0800b7e1 	.word	0x0800b7e1
 800b71c:	0800b7e1 	.word	0x0800b7e1
 800b720:	0800b7e1 	.word	0x0800b7e1
 800b724:	0800b7e1 	.word	0x0800b7e1
 800b728:	0800b7e1 	.word	0x0800b7e1
 800b72c:	0800b7b9 	.word	0x0800b7b9
 800b730:	0800b7e1 	.word	0x0800b7e1
 800b734:	0800b7e1 	.word	0x0800b7e1
 800b738:	0800b7e1 	.word	0x0800b7e1
 800b73c:	0800b7e1 	.word	0x0800b7e1
 800b740:	0800b7e1 	.word	0x0800b7e1
 800b744:	0800b7e1 	.word	0x0800b7e1
 800b748:	0800b7e1 	.word	0x0800b7e1
 800b74c:	0800b7c1 	.word	0x0800b7c1
 800b750:	0800b7e1 	.word	0x0800b7e1
 800b754:	0800b7e1 	.word	0x0800b7e1
 800b758:	0800b7e1 	.word	0x0800b7e1
 800b75c:	0800b7e1 	.word	0x0800b7e1
 800b760:	0800b7e1 	.word	0x0800b7e1
 800b764:	0800b7e1 	.word	0x0800b7e1
 800b768:	0800b7e1 	.word	0x0800b7e1
 800b76c:	0800b7c9 	.word	0x0800b7c9
 800b770:	0800b7e1 	.word	0x0800b7e1
 800b774:	0800b7e1 	.word	0x0800b7e1
 800b778:	0800b7e1 	.word	0x0800b7e1
 800b77c:	0800b7e1 	.word	0x0800b7e1
 800b780:	0800b7e1 	.word	0x0800b7e1
 800b784:	0800b7e1 	.word	0x0800b7e1
 800b788:	0800b7e1 	.word	0x0800b7e1
 800b78c:	0800b7d1 	.word	0x0800b7d1
 800b790:	0800b7e1 	.word	0x0800b7e1
 800b794:	0800b7e1 	.word	0x0800b7e1
 800b798:	0800b7e1 	.word	0x0800b7e1
 800b79c:	0800b7e1 	.word	0x0800b7e1
 800b7a0:	0800b7e1 	.word	0x0800b7e1
 800b7a4:	0800b7e1 	.word	0x0800b7e1
 800b7a8:	0800b7e1 	.word	0x0800b7e1
 800b7ac:	0800b7d9 	.word	0x0800b7d9
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b6:	e222      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b7b8:	2304      	movs	r3, #4
 800b7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7be:	e21e      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b7c0:	2308      	movs	r3, #8
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c6:	e21a      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b7c8:	2310      	movs	r3, #16
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ce:	e216      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b7d0:	2320      	movs	r3, #32
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d6:	e212      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b7d8:	2340      	movs	r3, #64	@ 0x40
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7de:	e20e      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b7e0:	2380      	movs	r3, #128	@ 0x80
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7e6:	e20a      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a69      	ldr	r2, [pc, #420]	@ (800b994 <UART_SetConfig+0x33c>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d130      	bne.n	800b854 <UART_SetConfig+0x1fc>
 800b7f2:	4b67      	ldr	r3, [pc, #412]	@ (800b990 <UART_SetConfig+0x338>)
 800b7f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b05      	cmp	r3, #5
 800b7fc:	d826      	bhi.n	800b84c <UART_SetConfig+0x1f4>
 800b7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b804 <UART_SetConfig+0x1ac>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b81d 	.word	0x0800b81d
 800b808:	0800b825 	.word	0x0800b825
 800b80c:	0800b82d 	.word	0x0800b82d
 800b810:	0800b835 	.word	0x0800b835
 800b814:	0800b83d 	.word	0x0800b83d
 800b818:	0800b845 	.word	0x0800b845
 800b81c:	2300      	movs	r3, #0
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b822:	e1ec      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b824:	2304      	movs	r3, #4
 800b826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82a:	e1e8      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b82c:	2308      	movs	r3, #8
 800b82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b832:	e1e4      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b834:	2310      	movs	r3, #16
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83a:	e1e0      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b83c:	2320      	movs	r3, #32
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b842:	e1dc      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b844:	2340      	movs	r3, #64	@ 0x40
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84a:	e1d8      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b84c:	2380      	movs	r3, #128	@ 0x80
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b852:	e1d4      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a4f      	ldr	r2, [pc, #316]	@ (800b998 <UART_SetConfig+0x340>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d130      	bne.n	800b8c0 <UART_SetConfig+0x268>
 800b85e:	4b4c      	ldr	r3, [pc, #304]	@ (800b990 <UART_SetConfig+0x338>)
 800b860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b862:	f003 0307 	and.w	r3, r3, #7
 800b866:	2b05      	cmp	r3, #5
 800b868:	d826      	bhi.n	800b8b8 <UART_SetConfig+0x260>
 800b86a:	a201      	add	r2, pc, #4	@ (adr r2, 800b870 <UART_SetConfig+0x218>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b889 	.word	0x0800b889
 800b874:	0800b891 	.word	0x0800b891
 800b878:	0800b899 	.word	0x0800b899
 800b87c:	0800b8a1 	.word	0x0800b8a1
 800b880:	0800b8a9 	.word	0x0800b8a9
 800b884:	0800b8b1 	.word	0x0800b8b1
 800b888:	2300      	movs	r3, #0
 800b88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88e:	e1b6      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b890:	2304      	movs	r3, #4
 800b892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b896:	e1b2      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b898:	2308      	movs	r3, #8
 800b89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89e:	e1ae      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a6:	e1aa      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b8a8:	2320      	movs	r3, #32
 800b8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ae:	e1a6      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b8b0:	2340      	movs	r3, #64	@ 0x40
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b6:	e1a2      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b8b8:	2380      	movs	r3, #128	@ 0x80
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8be:	e19e      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a35      	ldr	r2, [pc, #212]	@ (800b99c <UART_SetConfig+0x344>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d130      	bne.n	800b92c <UART_SetConfig+0x2d4>
 800b8ca:	4b31      	ldr	r3, [pc, #196]	@ (800b990 <UART_SetConfig+0x338>)
 800b8cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	2b05      	cmp	r3, #5
 800b8d4:	d826      	bhi.n	800b924 <UART_SetConfig+0x2cc>
 800b8d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b8dc <UART_SetConfig+0x284>)
 800b8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8dc:	0800b8f5 	.word	0x0800b8f5
 800b8e0:	0800b8fd 	.word	0x0800b8fd
 800b8e4:	0800b905 	.word	0x0800b905
 800b8e8:	0800b90d 	.word	0x0800b90d
 800b8ec:	0800b915 	.word	0x0800b915
 800b8f0:	0800b91d 	.word	0x0800b91d
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fa:	e180      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b8fc:	2304      	movs	r3, #4
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b902:	e17c      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b904:	2308      	movs	r3, #8
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90a:	e178      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b90c:	2310      	movs	r3, #16
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b912:	e174      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b914:	2320      	movs	r3, #32
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91a:	e170      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b91c:	2340      	movs	r3, #64	@ 0x40
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e16c      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b924:	2380      	movs	r3, #128	@ 0x80
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e168      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a1b      	ldr	r2, [pc, #108]	@ (800b9a0 <UART_SetConfig+0x348>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d142      	bne.n	800b9bc <UART_SetConfig+0x364>
 800b936:	4b16      	ldr	r3, [pc, #88]	@ (800b990 <UART_SetConfig+0x338>)
 800b938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	2b05      	cmp	r3, #5
 800b940:	d838      	bhi.n	800b9b4 <UART_SetConfig+0x35c>
 800b942:	a201      	add	r2, pc, #4	@ (adr r2, 800b948 <UART_SetConfig+0x2f0>)
 800b944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b948:	0800b961 	.word	0x0800b961
 800b94c:	0800b969 	.word	0x0800b969
 800b950:	0800b971 	.word	0x0800b971
 800b954:	0800b979 	.word	0x0800b979
 800b958:	0800b9a5 	.word	0x0800b9a5
 800b95c:	0800b9ad 	.word	0x0800b9ad
 800b960:	2300      	movs	r3, #0
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e14a      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b968:	2304      	movs	r3, #4
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e146      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b970:	2308      	movs	r3, #8
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e142      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b978:	2310      	movs	r3, #16
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e13e      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b980:	cfff69f3 	.word	0xcfff69f3
 800b984:	58000c00 	.word	0x58000c00
 800b988:	11fff4ff 	.word	0x11fff4ff
 800b98c:	40011000 	.word	0x40011000
 800b990:	58024400 	.word	0x58024400
 800b994:	40004400 	.word	0x40004400
 800b998:	40004800 	.word	0x40004800
 800b99c:	40004c00 	.word	0x40004c00
 800b9a0:	40005000 	.word	0x40005000
 800b9a4:	2320      	movs	r3, #32
 800b9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9aa:	e128      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b9ac:	2340      	movs	r3, #64	@ 0x40
 800b9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9b2:	e124      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b9b4:	2380      	movs	r3, #128	@ 0x80
 800b9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ba:	e120      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4acb      	ldr	r2, [pc, #812]	@ (800bcf0 <UART_SetConfig+0x698>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d176      	bne.n	800bab4 <UART_SetConfig+0x45c>
 800b9c6:	4bcb      	ldr	r3, [pc, #812]	@ (800bcf4 <UART_SetConfig+0x69c>)
 800b9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9ce:	2b28      	cmp	r3, #40	@ 0x28
 800b9d0:	d86c      	bhi.n	800baac <UART_SetConfig+0x454>
 800b9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d8 <UART_SetConfig+0x380>)
 800b9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d8:	0800ba7d 	.word	0x0800ba7d
 800b9dc:	0800baad 	.word	0x0800baad
 800b9e0:	0800baad 	.word	0x0800baad
 800b9e4:	0800baad 	.word	0x0800baad
 800b9e8:	0800baad 	.word	0x0800baad
 800b9ec:	0800baad 	.word	0x0800baad
 800b9f0:	0800baad 	.word	0x0800baad
 800b9f4:	0800baad 	.word	0x0800baad
 800b9f8:	0800ba85 	.word	0x0800ba85
 800b9fc:	0800baad 	.word	0x0800baad
 800ba00:	0800baad 	.word	0x0800baad
 800ba04:	0800baad 	.word	0x0800baad
 800ba08:	0800baad 	.word	0x0800baad
 800ba0c:	0800baad 	.word	0x0800baad
 800ba10:	0800baad 	.word	0x0800baad
 800ba14:	0800baad 	.word	0x0800baad
 800ba18:	0800ba8d 	.word	0x0800ba8d
 800ba1c:	0800baad 	.word	0x0800baad
 800ba20:	0800baad 	.word	0x0800baad
 800ba24:	0800baad 	.word	0x0800baad
 800ba28:	0800baad 	.word	0x0800baad
 800ba2c:	0800baad 	.word	0x0800baad
 800ba30:	0800baad 	.word	0x0800baad
 800ba34:	0800baad 	.word	0x0800baad
 800ba38:	0800ba95 	.word	0x0800ba95
 800ba3c:	0800baad 	.word	0x0800baad
 800ba40:	0800baad 	.word	0x0800baad
 800ba44:	0800baad 	.word	0x0800baad
 800ba48:	0800baad 	.word	0x0800baad
 800ba4c:	0800baad 	.word	0x0800baad
 800ba50:	0800baad 	.word	0x0800baad
 800ba54:	0800baad 	.word	0x0800baad
 800ba58:	0800ba9d 	.word	0x0800ba9d
 800ba5c:	0800baad 	.word	0x0800baad
 800ba60:	0800baad 	.word	0x0800baad
 800ba64:	0800baad 	.word	0x0800baad
 800ba68:	0800baad 	.word	0x0800baad
 800ba6c:	0800baad 	.word	0x0800baad
 800ba70:	0800baad 	.word	0x0800baad
 800ba74:	0800baad 	.word	0x0800baad
 800ba78:	0800baa5 	.word	0x0800baa5
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba82:	e0bc      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800ba84:	2304      	movs	r3, #4
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8a:	e0b8      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba92:	e0b4      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800ba94:	2310      	movs	r3, #16
 800ba96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba9a:	e0b0      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800ba9c:	2320      	movs	r3, #32
 800ba9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baa2:	e0ac      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800baa4:	2340      	movs	r3, #64	@ 0x40
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baaa:	e0a8      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800baac:	2380      	movs	r3, #128	@ 0x80
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e0a4      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a8f      	ldr	r2, [pc, #572]	@ (800bcf8 <UART_SetConfig+0x6a0>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d130      	bne.n	800bb20 <UART_SetConfig+0x4c8>
 800babe:	4b8d      	ldr	r3, [pc, #564]	@ (800bcf4 <UART_SetConfig+0x69c>)
 800bac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	d826      	bhi.n	800bb18 <UART_SetConfig+0x4c0>
 800baca:	a201      	add	r2, pc, #4	@ (adr r2, 800bad0 <UART_SetConfig+0x478>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae9 	.word	0x0800bae9
 800bad4:	0800baf1 	.word	0x0800baf1
 800bad8:	0800baf9 	.word	0x0800baf9
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb09 	.word	0x0800bb09
 800bae4:	0800bb11 	.word	0x0800bb11
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baee:	e086      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800baf0:	2304      	movs	r3, #4
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf6:	e082      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800baf8:	2308      	movs	r3, #8
 800bafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bafe:	e07e      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb00:	2310      	movs	r3, #16
 800bb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb06:	e07a      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0e:	e076      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb10:	2340      	movs	r3, #64	@ 0x40
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e072      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb18:	2380      	movs	r3, #128	@ 0x80
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e06e      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a75      	ldr	r2, [pc, #468]	@ (800bcfc <UART_SetConfig+0x6a4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d130      	bne.n	800bb8c <UART_SetConfig+0x534>
 800bb2a:	4b72      	ldr	r3, [pc, #456]	@ (800bcf4 <UART_SetConfig+0x69c>)
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb2e:	f003 0307 	and.w	r3, r3, #7
 800bb32:	2b05      	cmp	r3, #5
 800bb34:	d826      	bhi.n	800bb84 <UART_SetConfig+0x52c>
 800bb36:	a201      	add	r2, pc, #4	@ (adr r2, 800bb3c <UART_SetConfig+0x4e4>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bb55 	.word	0x0800bb55
 800bb40:	0800bb5d 	.word	0x0800bb5d
 800bb44:	0800bb65 	.word	0x0800bb65
 800bb48:	0800bb6d 	.word	0x0800bb6d
 800bb4c:	0800bb75 	.word	0x0800bb75
 800bb50:	0800bb7d 	.word	0x0800bb7d
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	e050      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb5c:	2304      	movs	r3, #4
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e04c      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb64:	2308      	movs	r3, #8
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6a:	e048      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb6c:	2310      	movs	r3, #16
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb72:	e044      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb74:	2320      	movs	r3, #32
 800bb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7a:	e040      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb7c:	2340      	movs	r3, #64	@ 0x40
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb82:	e03c      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb84:	2380      	movs	r3, #128	@ 0x80
 800bb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8a:	e038      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a5b      	ldr	r2, [pc, #364]	@ (800bd00 <UART_SetConfig+0x6a8>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d130      	bne.n	800bbf8 <UART_SetConfig+0x5a0>
 800bb96:	4b57      	ldr	r3, [pc, #348]	@ (800bcf4 <UART_SetConfig+0x69c>)
 800bb98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb9a:	f003 0307 	and.w	r3, r3, #7
 800bb9e:	2b05      	cmp	r3, #5
 800bba0:	d826      	bhi.n	800bbf0 <UART_SetConfig+0x598>
 800bba2:	a201      	add	r2, pc, #4	@ (adr r2, 800bba8 <UART_SetConfig+0x550>)
 800bba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba8:	0800bbc1 	.word	0x0800bbc1
 800bbac:	0800bbc9 	.word	0x0800bbc9
 800bbb0:	0800bbd1 	.word	0x0800bbd1
 800bbb4:	0800bbd9 	.word	0x0800bbd9
 800bbb8:	0800bbe1 	.word	0x0800bbe1
 800bbbc:	0800bbe9 	.word	0x0800bbe9
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc6:	e01a      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bbc8:	2304      	movs	r3, #4
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbce:	e016      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd6:	e012      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbde:	e00e      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe6:	e00a      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bbe8:	2340      	movs	r3, #64	@ 0x40
 800bbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbee:	e006      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bbf0:	2380      	movs	r3, #128	@ 0x80
 800bbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf6:	e002      	b.n	800bbfe <UART_SetConfig+0x5a6>
 800bbf8:	2380      	movs	r3, #128	@ 0x80
 800bbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a3f      	ldr	r2, [pc, #252]	@ (800bd00 <UART_SetConfig+0x6a8>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	f040 80f8 	bne.w	800bdfa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc0e:	2b20      	cmp	r3, #32
 800bc10:	dc46      	bgt.n	800bca0 <UART_SetConfig+0x648>
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	f2c0 8082 	blt.w	800bd1c <UART_SetConfig+0x6c4>
 800bc18:	3b02      	subs	r3, #2
 800bc1a:	2b1e      	cmp	r3, #30
 800bc1c:	d87e      	bhi.n	800bd1c <UART_SetConfig+0x6c4>
 800bc1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc24 <UART_SetConfig+0x5cc>)
 800bc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc24:	0800bca7 	.word	0x0800bca7
 800bc28:	0800bd1d 	.word	0x0800bd1d
 800bc2c:	0800bcaf 	.word	0x0800bcaf
 800bc30:	0800bd1d 	.word	0x0800bd1d
 800bc34:	0800bd1d 	.word	0x0800bd1d
 800bc38:	0800bd1d 	.word	0x0800bd1d
 800bc3c:	0800bcbf 	.word	0x0800bcbf
 800bc40:	0800bd1d 	.word	0x0800bd1d
 800bc44:	0800bd1d 	.word	0x0800bd1d
 800bc48:	0800bd1d 	.word	0x0800bd1d
 800bc4c:	0800bd1d 	.word	0x0800bd1d
 800bc50:	0800bd1d 	.word	0x0800bd1d
 800bc54:	0800bd1d 	.word	0x0800bd1d
 800bc58:	0800bd1d 	.word	0x0800bd1d
 800bc5c:	0800bccf 	.word	0x0800bccf
 800bc60:	0800bd1d 	.word	0x0800bd1d
 800bc64:	0800bd1d 	.word	0x0800bd1d
 800bc68:	0800bd1d 	.word	0x0800bd1d
 800bc6c:	0800bd1d 	.word	0x0800bd1d
 800bc70:	0800bd1d 	.word	0x0800bd1d
 800bc74:	0800bd1d 	.word	0x0800bd1d
 800bc78:	0800bd1d 	.word	0x0800bd1d
 800bc7c:	0800bd1d 	.word	0x0800bd1d
 800bc80:	0800bd1d 	.word	0x0800bd1d
 800bc84:	0800bd1d 	.word	0x0800bd1d
 800bc88:	0800bd1d 	.word	0x0800bd1d
 800bc8c:	0800bd1d 	.word	0x0800bd1d
 800bc90:	0800bd1d 	.word	0x0800bd1d
 800bc94:	0800bd1d 	.word	0x0800bd1d
 800bc98:	0800bd1d 	.word	0x0800bd1d
 800bc9c:	0800bd0f 	.word	0x0800bd0f
 800bca0:	2b40      	cmp	r3, #64	@ 0x40
 800bca2:	d037      	beq.n	800bd14 <UART_SetConfig+0x6bc>
 800bca4:	e03a      	b.n	800bd1c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bca6:	f7fc fef3 	bl	8008a90 <HAL_RCCEx_GetD3PCLK1Freq>
 800bcaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcac:	e03c      	b.n	800bd28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fc ff02 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcbc:	e034      	b.n	800bd28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcbe:	f107 0318 	add.w	r3, r7, #24
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fd f84e 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bccc:	e02c      	b.n	800bd28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcce:	4b09      	ldr	r3, [pc, #36]	@ (800bcf4 <UART_SetConfig+0x69c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 0320 	and.w	r3, r3, #32
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d016      	beq.n	800bd08 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcda:	4b06      	ldr	r3, [pc, #24]	@ (800bcf4 <UART_SetConfig+0x69c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	08db      	lsrs	r3, r3, #3
 800bce0:	f003 0303 	and.w	r3, r3, #3
 800bce4:	4a07      	ldr	r2, [pc, #28]	@ (800bd04 <UART_SetConfig+0x6ac>)
 800bce6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcec:	e01c      	b.n	800bd28 <UART_SetConfig+0x6d0>
 800bcee:	bf00      	nop
 800bcf0:	40011400 	.word	0x40011400
 800bcf4:	58024400 	.word	0x58024400
 800bcf8:	40007800 	.word	0x40007800
 800bcfc:	40007c00 	.word	0x40007c00
 800bd00:	58000c00 	.word	0x58000c00
 800bd04:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bd08:	4b9d      	ldr	r3, [pc, #628]	@ (800bf80 <UART_SetConfig+0x928>)
 800bd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd0c:	e00c      	b.n	800bd28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd0e:	4b9d      	ldr	r3, [pc, #628]	@ (800bf84 <UART_SetConfig+0x92c>)
 800bd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd12:	e009      	b.n	800bd28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd1a:	e005      	b.n	800bd28 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 81de 	beq.w	800c0ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd34:	4a94      	ldr	r2, [pc, #592]	@ (800bf88 <UART_SetConfig+0x930>)
 800bd36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd42:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	005b      	lsls	r3, r3, #1
 800bd4c:	4413      	add	r3, r2
 800bd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d305      	bcc.n	800bd60 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d903      	bls.n	800bd68 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bd66:	e1c1      	b.n	800c0ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	60bb      	str	r3, [r7, #8]
 800bd6e:	60fa      	str	r2, [r7, #12]
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd74:	4a84      	ldr	r2, [pc, #528]	@ (800bf88 <UART_SetConfig+0x930>)
 800bd76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	607a      	str	r2, [r7, #4]
 800bd82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd8a:	f7f4 fb01 	bl	8000390 <__aeabi_uldivmod>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4610      	mov	r0, r2
 800bd94:	4619      	mov	r1, r3
 800bd96:	f04f 0200 	mov.w	r2, #0
 800bd9a:	f04f 0300 	mov.w	r3, #0
 800bd9e:	020b      	lsls	r3, r1, #8
 800bda0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bda4:	0202      	lsls	r2, r0, #8
 800bda6:	6979      	ldr	r1, [r7, #20]
 800bda8:	6849      	ldr	r1, [r1, #4]
 800bdaa:	0849      	lsrs	r1, r1, #1
 800bdac:	2000      	movs	r0, #0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	eb12 0804 	adds.w	r8, r2, r4
 800bdb6:	eb43 0905 	adc.w	r9, r3, r5
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	469a      	mov	sl, r3
 800bdc2:	4693      	mov	fp, r2
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	4640      	mov	r0, r8
 800bdca:	4649      	mov	r1, r9
 800bdcc:	f7f4 fae0 	bl	8000390 <__aeabi_uldivmod>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdde:	d308      	bcc.n	800bdf2 <UART_SetConfig+0x79a>
 800bde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bde6:	d204      	bcs.n	800bdf2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdee:	60da      	str	r2, [r3, #12]
 800bdf0:	e17c      	b.n	800c0ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bdf8:	e178      	b.n	800c0ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be02:	f040 80c5 	bne.w	800bf90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800be06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be0a:	2b20      	cmp	r3, #32
 800be0c:	dc48      	bgt.n	800bea0 <UART_SetConfig+0x848>
 800be0e:	2b00      	cmp	r3, #0
 800be10:	db7b      	blt.n	800bf0a <UART_SetConfig+0x8b2>
 800be12:	2b20      	cmp	r3, #32
 800be14:	d879      	bhi.n	800bf0a <UART_SetConfig+0x8b2>
 800be16:	a201      	add	r2, pc, #4	@ (adr r2, 800be1c <UART_SetConfig+0x7c4>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800bea7 	.word	0x0800bea7
 800be20:	0800beaf 	.word	0x0800beaf
 800be24:	0800bf0b 	.word	0x0800bf0b
 800be28:	0800bf0b 	.word	0x0800bf0b
 800be2c:	0800beb7 	.word	0x0800beb7
 800be30:	0800bf0b 	.word	0x0800bf0b
 800be34:	0800bf0b 	.word	0x0800bf0b
 800be38:	0800bf0b 	.word	0x0800bf0b
 800be3c:	0800bec7 	.word	0x0800bec7
 800be40:	0800bf0b 	.word	0x0800bf0b
 800be44:	0800bf0b 	.word	0x0800bf0b
 800be48:	0800bf0b 	.word	0x0800bf0b
 800be4c:	0800bf0b 	.word	0x0800bf0b
 800be50:	0800bf0b 	.word	0x0800bf0b
 800be54:	0800bf0b 	.word	0x0800bf0b
 800be58:	0800bf0b 	.word	0x0800bf0b
 800be5c:	0800bed7 	.word	0x0800bed7
 800be60:	0800bf0b 	.word	0x0800bf0b
 800be64:	0800bf0b 	.word	0x0800bf0b
 800be68:	0800bf0b 	.word	0x0800bf0b
 800be6c:	0800bf0b 	.word	0x0800bf0b
 800be70:	0800bf0b 	.word	0x0800bf0b
 800be74:	0800bf0b 	.word	0x0800bf0b
 800be78:	0800bf0b 	.word	0x0800bf0b
 800be7c:	0800bf0b 	.word	0x0800bf0b
 800be80:	0800bf0b 	.word	0x0800bf0b
 800be84:	0800bf0b 	.word	0x0800bf0b
 800be88:	0800bf0b 	.word	0x0800bf0b
 800be8c:	0800bf0b 	.word	0x0800bf0b
 800be90:	0800bf0b 	.word	0x0800bf0b
 800be94:	0800bf0b 	.word	0x0800bf0b
 800be98:	0800bf0b 	.word	0x0800bf0b
 800be9c:	0800befd 	.word	0x0800befd
 800bea0:	2b40      	cmp	r3, #64	@ 0x40
 800bea2:	d02e      	beq.n	800bf02 <UART_SetConfig+0x8aa>
 800bea4:	e031      	b.n	800bf0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bea6:	f7fa fdfb 	bl	8006aa0 <HAL_RCC_GetPCLK1Freq>
 800beaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800beac:	e033      	b.n	800bf16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800beae:	f7fa fe0d 	bl	8006acc <HAL_RCC_GetPCLK2Freq>
 800beb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800beb4:	e02f      	b.n	800bf16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fc fdfe 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bec4:	e027      	b.n	800bf16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bec6:	f107 0318 	add.w	r3, r7, #24
 800beca:	4618      	mov	r0, r3
 800becc:	f7fc ff4a 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bed4:	e01f      	b.n	800bf16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bed6:	4b2d      	ldr	r3, [pc, #180]	@ (800bf8c <UART_SetConfig+0x934>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0320 	and.w	r3, r3, #32
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d009      	beq.n	800bef6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bee2:	4b2a      	ldr	r3, [pc, #168]	@ (800bf8c <UART_SetConfig+0x934>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	08db      	lsrs	r3, r3, #3
 800bee8:	f003 0303 	and.w	r3, r3, #3
 800beec:	4a24      	ldr	r2, [pc, #144]	@ (800bf80 <UART_SetConfig+0x928>)
 800beee:	fa22 f303 	lsr.w	r3, r2, r3
 800bef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bef4:	e00f      	b.n	800bf16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bef6:	4b22      	ldr	r3, [pc, #136]	@ (800bf80 <UART_SetConfig+0x928>)
 800bef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800befa:	e00c      	b.n	800bf16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800befc:	4b21      	ldr	r3, [pc, #132]	@ (800bf84 <UART_SetConfig+0x92c>)
 800befe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf00:	e009      	b.n	800bf16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf08:	e005      	b.n	800bf16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bf14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 80e7 	beq.w	800c0ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf22:	4a19      	ldr	r2, [pc, #100]	@ (800bf88 <UART_SetConfig+0x930>)
 800bf24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf30:	005a      	lsls	r2, r3, #1
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	085b      	lsrs	r3, r3, #1
 800bf38:	441a      	add	r2, r3
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	d916      	bls.n	800bf78 <UART_SetConfig+0x920>
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf50:	d212      	bcs.n	800bf78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f023 030f 	bic.w	r3, r3, #15
 800bf5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f003 0307 	and.w	r3, r3, #7
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bf74:	60da      	str	r2, [r3, #12]
 800bf76:	e0b9      	b.n	800c0ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bf7e:	e0b5      	b.n	800c0ec <UART_SetConfig+0xa94>
 800bf80:	03d09000 	.word	0x03d09000
 800bf84:	003d0900 	.word	0x003d0900
 800bf88:	08012e28 	.word	0x08012e28
 800bf8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	dc49      	bgt.n	800c02c <UART_SetConfig+0x9d4>
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	db7c      	blt.n	800c096 <UART_SetConfig+0xa3e>
 800bf9c:	2b20      	cmp	r3, #32
 800bf9e:	d87a      	bhi.n	800c096 <UART_SetConfig+0xa3e>
 800bfa0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa8 <UART_SetConfig+0x950>)
 800bfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa6:	bf00      	nop
 800bfa8:	0800c033 	.word	0x0800c033
 800bfac:	0800c03b 	.word	0x0800c03b
 800bfb0:	0800c097 	.word	0x0800c097
 800bfb4:	0800c097 	.word	0x0800c097
 800bfb8:	0800c043 	.word	0x0800c043
 800bfbc:	0800c097 	.word	0x0800c097
 800bfc0:	0800c097 	.word	0x0800c097
 800bfc4:	0800c097 	.word	0x0800c097
 800bfc8:	0800c053 	.word	0x0800c053
 800bfcc:	0800c097 	.word	0x0800c097
 800bfd0:	0800c097 	.word	0x0800c097
 800bfd4:	0800c097 	.word	0x0800c097
 800bfd8:	0800c097 	.word	0x0800c097
 800bfdc:	0800c097 	.word	0x0800c097
 800bfe0:	0800c097 	.word	0x0800c097
 800bfe4:	0800c097 	.word	0x0800c097
 800bfe8:	0800c063 	.word	0x0800c063
 800bfec:	0800c097 	.word	0x0800c097
 800bff0:	0800c097 	.word	0x0800c097
 800bff4:	0800c097 	.word	0x0800c097
 800bff8:	0800c097 	.word	0x0800c097
 800bffc:	0800c097 	.word	0x0800c097
 800c000:	0800c097 	.word	0x0800c097
 800c004:	0800c097 	.word	0x0800c097
 800c008:	0800c097 	.word	0x0800c097
 800c00c:	0800c097 	.word	0x0800c097
 800c010:	0800c097 	.word	0x0800c097
 800c014:	0800c097 	.word	0x0800c097
 800c018:	0800c097 	.word	0x0800c097
 800c01c:	0800c097 	.word	0x0800c097
 800c020:	0800c097 	.word	0x0800c097
 800c024:	0800c097 	.word	0x0800c097
 800c028:	0800c089 	.word	0x0800c089
 800c02c:	2b40      	cmp	r3, #64	@ 0x40
 800c02e:	d02e      	beq.n	800c08e <UART_SetConfig+0xa36>
 800c030:	e031      	b.n	800c096 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c032:	f7fa fd35 	bl	8006aa0 <HAL_RCC_GetPCLK1Freq>
 800c036:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c038:	e033      	b.n	800c0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c03a:	f7fa fd47 	bl	8006acc <HAL_RCC_GetPCLK2Freq>
 800c03e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c040:	e02f      	b.n	800c0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c046:	4618      	mov	r0, r3
 800c048:	f7fc fd38 	bl	8008abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c050:	e027      	b.n	800c0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c052:	f107 0318 	add.w	r3, r7, #24
 800c056:	4618      	mov	r0, r3
 800c058:	f7fc fe84 	bl	8008d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c060:	e01f      	b.n	800c0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c062:	4b2d      	ldr	r3, [pc, #180]	@ (800c118 <UART_SetConfig+0xac0>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f003 0320 	and.w	r3, r3, #32
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d009      	beq.n	800c082 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c06e:	4b2a      	ldr	r3, [pc, #168]	@ (800c118 <UART_SetConfig+0xac0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	08db      	lsrs	r3, r3, #3
 800c074:	f003 0303 	and.w	r3, r3, #3
 800c078:	4a28      	ldr	r2, [pc, #160]	@ (800c11c <UART_SetConfig+0xac4>)
 800c07a:	fa22 f303 	lsr.w	r3, r2, r3
 800c07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c080:	e00f      	b.n	800c0a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c082:	4b26      	ldr	r3, [pc, #152]	@ (800c11c <UART_SetConfig+0xac4>)
 800c084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c086:	e00c      	b.n	800c0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c088:	4b25      	ldr	r3, [pc, #148]	@ (800c120 <UART_SetConfig+0xac8>)
 800c08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c08c:	e009      	b.n	800c0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c08e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c094:	e005      	b.n	800c0a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c096:	2300      	movs	r3, #0
 800c098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0a0:	bf00      	nop
    }

    if (pclk != 0U)
 800c0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d021      	beq.n	800c0ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ac:	4a1d      	ldr	r2, [pc, #116]	@ (800c124 <UART_SetConfig+0xacc>)
 800c0ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	085b      	lsrs	r3, r3, #1
 800c0c0:	441a      	add	r2, r3
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ce:	2b0f      	cmp	r3, #15
 800c0d0:	d909      	bls.n	800c0e6 <UART_SetConfig+0xa8e>
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0d8:	d205      	bcs.n	800c0e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	60da      	str	r2, [r3, #12]
 800c0e4:	e002      	b.n	800c0ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	2200      	movs	r2, #0
 800c100:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2200      	movs	r2, #0
 800c106:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c108:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3748      	adds	r7, #72	@ 0x48
 800c110:	46bd      	mov	sp, r7
 800c112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c116:	bf00      	nop
 800c118:	58024400 	.word	0x58024400
 800c11c:	03d09000 	.word	0x03d09000
 800c120:	003d0900 	.word	0x003d0900
 800c124:	08012e28 	.word	0x08012e28

0800c128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c134:	f003 0308 	and.w	r3, r3, #8
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00a      	beq.n	800c152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c178:	f003 0302 	and.w	r3, r3, #2
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00a      	beq.n	800c196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	430a      	orrs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c19a:	f003 0304 	and.w	r3, r3, #4
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00a      	beq.n	800c1b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	430a      	orrs	r2, r1
 800c1b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1bc:	f003 0310 	and.w	r3, r3, #16
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00a      	beq.n	800c1da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1de:	f003 0320 	and.w	r3, r3, #32
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00a      	beq.n	800c1fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c204:	2b00      	cmp	r3, #0
 800c206:	d01a      	beq.n	800c23e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	430a      	orrs	r2, r1
 800c21c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c226:	d10a      	bne.n	800c23e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	430a      	orrs	r2, r1
 800c23c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00a      	beq.n	800c260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	430a      	orrs	r2, r1
 800c25e:	605a      	str	r2, [r3, #4]
  }
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b098      	sub	sp, #96	@ 0x60
 800c270:	af02      	add	r7, sp, #8
 800c272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c27c:	f7f5 fe80 	bl	8001f80 <HAL_GetTick>
 800c280:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f003 0308 	and.w	r3, r3, #8
 800c28c:	2b08      	cmp	r3, #8
 800c28e:	d12f      	bne.n	800c2f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c298:	2200      	movs	r2, #0
 800c29a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f88e 	bl	800c3c0 <UART_WaitOnFlagUntilTimeout>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d022      	beq.n	800c2f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2be:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e6      	bne.n	800c2aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e063      	b.n	800c3b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0304 	and.w	r3, r3, #4
 800c2fa:	2b04      	cmp	r3, #4
 800c2fc:	d149      	bne.n	800c392 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c306:	2200      	movs	r2, #0
 800c308:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f857 	bl	800c3c0 <UART_WaitOnFlagUntilTimeout>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d03c      	beq.n	800c392 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c320:	e853 3f00 	ldrex	r3, [r3]
 800c324:	623b      	str	r3, [r7, #32]
   return(result);
 800c326:	6a3b      	ldr	r3, [r7, #32]
 800c328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c32c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	461a      	mov	r2, r3
 800c334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c336:	633b      	str	r3, [r7, #48]	@ 0x30
 800c338:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c33e:	e841 2300 	strex	r3, r2, [r1]
 800c342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1e6      	bne.n	800c318 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3308      	adds	r3, #8
 800c350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	e853 3f00 	ldrex	r3, [r3]
 800c358:	60fb      	str	r3, [r7, #12]
   return(result);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f023 0301 	bic.w	r3, r3, #1
 800c360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	3308      	adds	r3, #8
 800c368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c36a:	61fa      	str	r2, [r7, #28]
 800c36c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36e:	69b9      	ldr	r1, [r7, #24]
 800c370:	69fa      	ldr	r2, [r7, #28]
 800c372:	e841 2300 	strex	r3, r2, [r1]
 800c376:	617b      	str	r3, [r7, #20]
   return(result);
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1e5      	bne.n	800c34a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2220      	movs	r2, #32
 800c382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c38e:	2303      	movs	r3, #3
 800c390:	e012      	b.n	800c3b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2220      	movs	r2, #32
 800c396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2220      	movs	r2, #32
 800c39e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3758      	adds	r7, #88	@ 0x58
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	603b      	str	r3, [r7, #0]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3d0:	e04f      	b.n	800c472 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d8:	d04b      	beq.n	800c472 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3da:	f7f5 fdd1 	bl	8001f80 <HAL_GetTick>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	69ba      	ldr	r2, [r7, #24]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d302      	bcc.n	800c3f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d101      	bne.n	800c3f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e04e      	b.n	800c492 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0304 	and.w	r3, r3, #4
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d037      	beq.n	800c472 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b80      	cmp	r3, #128	@ 0x80
 800c406:	d034      	beq.n	800c472 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b40      	cmp	r3, #64	@ 0x40
 800c40c:	d031      	beq.n	800c472 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	69db      	ldr	r3, [r3, #28]
 800c414:	f003 0308 	and.w	r3, r3, #8
 800c418:	2b08      	cmp	r3, #8
 800c41a:	d110      	bne.n	800c43e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2208      	movs	r2, #8
 800c422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 f95b 	bl	800c6e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2208      	movs	r2, #8
 800c42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e029      	b.n	800c492 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	69db      	ldr	r3, [r3, #28]
 800c444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c44c:	d111      	bne.n	800c472 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 f941 	bl	800c6e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2220      	movs	r2, #32
 800c462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c46e:	2303      	movs	r3, #3
 800c470:	e00f      	b.n	800c492 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	69da      	ldr	r2, [r3, #28]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	4013      	ands	r3, r2
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	429a      	cmp	r2, r3
 800c480:	bf0c      	ite	eq
 800c482:	2301      	moveq	r3, #1
 800c484:	2300      	movne	r3, #0
 800c486:	b2db      	uxtb	r3, r3
 800c488:	461a      	mov	r2, r3
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d0a0      	beq.n	800c3d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b0a3      	sub	sp, #140	@ 0x8c
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	88fa      	ldrh	r2, [r7, #6]
 800c4b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	88fa      	ldrh	r2, [r7, #6]
 800c4bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4ce:	d10e      	bne.n	800c4ee <UART_Start_Receive_IT+0x52>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d105      	bne.n	800c4e4 <UART_Start_Receive_IT+0x48>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c4de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4e2:	e02d      	b.n	800c540 <UART_Start_Receive_IT+0xa4>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	22ff      	movs	r2, #255	@ 0xff
 800c4e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c4ec:	e028      	b.n	800c540 <UART_Start_Receive_IT+0xa4>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10d      	bne.n	800c512 <UART_Start_Receive_IT+0x76>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d104      	bne.n	800c508 <UART_Start_Receive_IT+0x6c>
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	22ff      	movs	r2, #255	@ 0xff
 800c502:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c506:	e01b      	b.n	800c540 <UART_Start_Receive_IT+0xa4>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	227f      	movs	r2, #127	@ 0x7f
 800c50c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c510:	e016      	b.n	800c540 <UART_Start_Receive_IT+0xa4>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c51a:	d10d      	bne.n	800c538 <UART_Start_Receive_IT+0x9c>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d104      	bne.n	800c52e <UART_Start_Receive_IT+0x92>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	227f      	movs	r2, #127	@ 0x7f
 800c528:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c52c:	e008      	b.n	800c540 <UART_Start_Receive_IT+0xa4>
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	223f      	movs	r2, #63	@ 0x3f
 800c532:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c536:	e003      	b.n	800c540 <UART_Start_Receive_IT+0xa4>
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2222      	movs	r2, #34	@ 0x22
 800c54c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3308      	adds	r3, #8
 800c556:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c55a:	e853 3f00 	ldrex	r3, [r3]
 800c55e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c560:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c562:	f043 0301 	orr.w	r3, r3, #1
 800c566:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c574:	673a      	str	r2, [r7, #112]	@ 0x70
 800c576:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c578:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c57a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c57c:	e841 2300 	strex	r3, r2, [r1]
 800c580:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c582:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1e3      	bne.n	800c550 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c58c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c590:	d14f      	bne.n	800c632 <UART_Start_Receive_IT+0x196>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c598:	88fa      	ldrh	r2, [r7, #6]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d349      	bcc.n	800c632 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5a6:	d107      	bne.n	800c5b8 <UART_Start_Receive_IT+0x11c>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4a47      	ldr	r2, [pc, #284]	@ (800c6d0 <UART_Start_Receive_IT+0x234>)
 800c5b4:	675a      	str	r2, [r3, #116]	@ 0x74
 800c5b6:	e002      	b.n	800c5be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4a46      	ldr	r2, [pc, #280]	@ (800c6d4 <UART_Start_Receive_IT+0x238>)
 800c5bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d01a      	beq.n	800c5fc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5ce:	e853 3f00 	ldrex	r3, [r3]
 800c5d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c5d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c5da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c5e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c5ea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c5ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c5f0:	e841 2300 	strex	r3, r2, [r1]
 800c5f4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e4      	bne.n	800c5c6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3308      	adds	r3, #8
 800c602:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c612:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3308      	adds	r3, #8
 800c61a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c61c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c61e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c620:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c624:	e841 2300 	strex	r3, r2, [r1]
 800c628:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c62a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1e5      	bne.n	800c5fc <UART_Start_Receive_IT+0x160>
 800c630:	e046      	b.n	800c6c0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c63a:	d107      	bne.n	800c64c <UART_Start_Receive_IT+0x1b0>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d103      	bne.n	800c64c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4a24      	ldr	r2, [pc, #144]	@ (800c6d8 <UART_Start_Receive_IT+0x23c>)
 800c648:	675a      	str	r2, [r3, #116]	@ 0x74
 800c64a:	e002      	b.n	800c652 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4a23      	ldr	r2, [pc, #140]	@ (800c6dc <UART_Start_Receive_IT+0x240>)
 800c650:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d019      	beq.n	800c68e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c662:	e853 3f00 	ldrex	r3, [r3]
 800c666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c66e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	461a      	mov	r2, r3
 800c676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c678:	637b      	str	r3, [r7, #52]	@ 0x34
 800c67a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c67e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e6      	bne.n	800c65a <UART_Start_Receive_IT+0x1be>
 800c68c:	e018      	b.n	800c6c0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	613b      	str	r3, [r7, #16]
   return(result);
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f043 0320 	orr.w	r3, r3, #32
 800c6a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6ac:	623b      	str	r3, [r7, #32]
 800c6ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b0:	69f9      	ldr	r1, [r7, #28]
 800c6b2:	6a3a      	ldr	r2, [r7, #32]
 800c6b4:	e841 2300 	strex	r3, r2, [r1]
 800c6b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1e6      	bne.n	800c68e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	378c      	adds	r7, #140	@ 0x8c
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	0800cefd 	.word	0x0800cefd
 800c6d4:	0800cb99 	.word	0x0800cb99
 800c6d8:	0800c9e1 	.word	0x0800c9e1
 800c6dc:	0800c829 	.word	0x0800c829

0800c6e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b095      	sub	sp, #84	@ 0x54
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f0:	e853 3f00 	ldrex	r3, [r3]
 800c6f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c706:	643b      	str	r3, [r7, #64]	@ 0x40
 800c708:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c70c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c70e:	e841 2300 	strex	r3, r2, [r1]
 800c712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1e6      	bne.n	800c6e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	e853 3f00 	ldrex	r3, [r3]
 800c728:	61fb      	str	r3, [r7, #28]
   return(result);
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	4b1e      	ldr	r3, [pc, #120]	@ (800c7a8 <UART_EndRxTransfer+0xc8>)
 800c72e:	4013      	ands	r3, r2
 800c730:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3308      	adds	r3, #8
 800c738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c73a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c73c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c742:	e841 2300 	strex	r3, r2, [r1]
 800c746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1e5      	bne.n	800c71a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c752:	2b01      	cmp	r3, #1
 800c754:	d118      	bne.n	800c788 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	60bb      	str	r3, [r7, #8]
   return(result);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	f023 0310 	bic.w	r3, r3, #16
 800c76a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	461a      	mov	r2, r3
 800c772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c774:	61bb      	str	r3, [r7, #24]
 800c776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c778:	6979      	ldr	r1, [r7, #20]
 800c77a:	69ba      	ldr	r2, [r7, #24]
 800c77c:	e841 2300 	strex	r3, r2, [r1]
 800c780:	613b      	str	r3, [r7, #16]
   return(result);
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1e6      	bne.n	800c756 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2220      	movs	r2, #32
 800c78c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c79c:	bf00      	nop
 800c79e:	3754      	adds	r7, #84	@ 0x54
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	effffffe 	.word	0xeffffffe

0800c7ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7f4 f886 	bl	80008d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7c8:	bf00      	nop
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7ec:	61fb      	str	r3, [r7, #28]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	61bb      	str	r3, [r7, #24]
 800c7f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fa:	6979      	ldr	r1, [r7, #20]
 800c7fc:	69ba      	ldr	r2, [r7, #24]
 800c7fe:	e841 2300 	strex	r3, r2, [r1]
 800c802:	613b      	str	r3, [r7, #16]
   return(result);
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e6      	bne.n	800c7d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2220      	movs	r2, #32
 800c80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fe ff07 	bl	800b62c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c81e:	bf00      	nop
 800c820:	3720      	adds	r7, #32
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b09c      	sub	sp, #112	@ 0x70
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c836:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c840:	2b22      	cmp	r3, #34	@ 0x22
 800c842:	f040 80be 	bne.w	800c9c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c850:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c854:	b2d9      	uxtb	r1, r3
 800c856:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c860:	400a      	ands	r2, r1
 800c862:	b2d2      	uxtb	r2, r2
 800c864:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c86a:	1c5a      	adds	r2, r3, #1
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c876:	b29b      	uxth	r3, r3
 800c878:	3b01      	subs	r3, #1
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f040 80a1 	bne.w	800c9d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c898:	e853 3f00 	ldrex	r3, [r3]
 800c89c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c89e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c8b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c8b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8b6:	e841 2300 	strex	r3, r2, [r1]
 800c8ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c8bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1e6      	bne.n	800c890 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8cc:	e853 3f00 	ldrex	r3, [r3]
 800c8d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d4:	f023 0301 	bic.w	r3, r3, #1
 800c8d8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3308      	adds	r3, #8
 800c8e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c8e2:	647a      	str	r2, [r7, #68]	@ 0x44
 800c8e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8ea:	e841 2300 	strex	r3, r2, [r1]
 800c8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e5      	bne.n	800c8c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a33      	ldr	r2, [pc, #204]	@ (800c9dc <UART_RxISR_8BIT+0x1b4>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d01f      	beq.n	800c954 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d018      	beq.n	800c954 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92a:	e853 3f00 	ldrex	r3, [r3]
 800c92e:	623b      	str	r3, [r7, #32]
   return(result);
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c936:	663b      	str	r3, [r7, #96]	@ 0x60
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c940:	633b      	str	r3, [r7, #48]	@ 0x30
 800c942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c948:	e841 2300 	strex	r3, r2, [r1]
 800c94c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1e6      	bne.n	800c922 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d12e      	bne.n	800c9ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	e853 3f00 	ldrex	r3, [r3]
 800c96e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f023 0310 	bic.w	r3, r3, #16
 800c976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	461a      	mov	r2, r3
 800c97e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c980:	61fb      	str	r3, [r7, #28]
 800c982:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c984:	69b9      	ldr	r1, [r7, #24]
 800c986:	69fa      	ldr	r2, [r7, #28]
 800c988:	e841 2300 	strex	r3, r2, [r1]
 800c98c:	617b      	str	r3, [r7, #20]
   return(result);
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1e6      	bne.n	800c962 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	f003 0310 	and.w	r3, r3, #16
 800c99e:	2b10      	cmp	r3, #16
 800c9a0:	d103      	bne.n	800c9aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2210      	movs	r2, #16
 800c9a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7fe fe44 	bl	800b640 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9b8:	e00b      	b.n	800c9d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7f3 ff24 	bl	8000808 <HAL_UART_RxCpltCallback>
}
 800c9c0:	e007      	b.n	800c9d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	699a      	ldr	r2, [r3, #24]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f042 0208 	orr.w	r2, r2, #8
 800c9d0:	619a      	str	r2, [r3, #24]
}
 800c9d2:	bf00      	nop
 800c9d4:	3770      	adds	r7, #112	@ 0x70
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	58000c00 	.word	0x58000c00

0800c9e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b09c      	sub	sp, #112	@ 0x70
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c9f8:	2b22      	cmp	r3, #34	@ 0x22
 800c9fa:	f040 80be 	bne.w	800cb7a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ca0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ca12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ca16:	4013      	ands	r3, r2
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca22:	1c9a      	adds	r2, r3, #2
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 80a1 	bne.w	800cb8a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca50:	e853 3f00 	ldrex	r3, [r3]
 800ca54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ca56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca5c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	461a      	mov	r2, r3
 800ca64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca66:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca6e:	e841 2300 	strex	r3, r2, [r1]
 800ca72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ca74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e6      	bne.n	800ca48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3308      	adds	r3, #8
 800ca80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca84:	e853 3f00 	ldrex	r3, [r3]
 800ca88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8c:	f023 0301 	bic.w	r3, r3, #1
 800ca90:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3308      	adds	r3, #8
 800ca98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca9a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ca9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800caa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800caa2:	e841 2300 	strex	r3, r2, [r1]
 800caa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800caa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1e5      	bne.n	800ca7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2220      	movs	r2, #32
 800cab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a33      	ldr	r2, [pc, #204]	@ (800cb94 <UART_RxISR_16BIT+0x1b4>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d01f      	beq.n	800cb0c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d018      	beq.n	800cb0c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	e853 3f00 	ldrex	r3, [r3]
 800cae6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800caee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	461a      	mov	r2, r3
 800caf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cafa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cafe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb00:	e841 2300 	strex	r3, r2, [r1]
 800cb04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1e6      	bne.n	800cada <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d12e      	bne.n	800cb72 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	e853 3f00 	ldrex	r3, [r3]
 800cb26:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	f023 0310 	bic.w	r3, r3, #16
 800cb2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	461a      	mov	r2, r3
 800cb36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb38:	61bb      	str	r3, [r7, #24]
 800cb3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	6979      	ldr	r1, [r7, #20]
 800cb3e:	69ba      	ldr	r2, [r7, #24]
 800cb40:	e841 2300 	strex	r3, r2, [r1]
 800cb44:	613b      	str	r3, [r7, #16]
   return(result);
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e6      	bne.n	800cb1a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	f003 0310 	and.w	r3, r3, #16
 800cb56:	2b10      	cmp	r3, #16
 800cb58:	d103      	bne.n	800cb62 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2210      	movs	r2, #16
 800cb60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7fe fd68 	bl	800b640 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb70:	e00b      	b.n	800cb8a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7f3 fe48 	bl	8000808 <HAL_UART_RxCpltCallback>
}
 800cb78:	e007      	b.n	800cb8a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	699a      	ldr	r2, [r3, #24]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f042 0208 	orr.w	r2, r2, #8
 800cb88:	619a      	str	r2, [r3, #24]
}
 800cb8a:	bf00      	nop
 800cb8c:	3770      	adds	r7, #112	@ 0x70
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	58000c00 	.word	0x58000c00

0800cb98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b0ac      	sub	sp, #176	@ 0xb0
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cba6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	69db      	ldr	r3, [r3, #28]
 800cbb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbce:	2b22      	cmp	r3, #34	@ 0x22
 800cbd0:	f040 8181 	bne.w	800ced6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cbda:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbde:	e124      	b.n	800ce2a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cbea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800cbee:	b2d9      	uxtb	r1, r3
 800cbf0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbfa:	400a      	ands	r2, r1
 800cbfc:	b2d2      	uxtb	r2, r2
 800cbfe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc04:	1c5a      	adds	r2, r3, #1
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	3b01      	subs	r3, #1
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cc26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc2a:	f003 0307 	and.w	r3, r3, #7
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d053      	beq.n	800ccda <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d011      	beq.n	800cc62 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cc3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00b      	beq.n	800cc62 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc58:	f043 0201 	orr.w	r2, r3, #1
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d011      	beq.n	800cc92 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cc6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00b      	beq.n	800cc92 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2202      	movs	r2, #2
 800cc80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc88:	f043 0204 	orr.w	r2, r3, #4
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc96:	f003 0304 	and.w	r3, r3, #4
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d011      	beq.n	800ccc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cc9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cca2:	f003 0301 	and.w	r3, r3, #1
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00b      	beq.n	800ccc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2204      	movs	r2, #4
 800ccb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb8:	f043 0202 	orr.w	r2, r3, #2
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d006      	beq.n	800ccda <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7f3 fe01 	bl	80008d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f040 80a1 	bne.w	800ce2a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ccf0:	e853 3f00 	ldrex	r3, [r3]
 800ccf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ccf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	461a      	mov	r2, r3
 800cd06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cd0c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cd10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cd12:	e841 2300 	strex	r3, r2, [r1]
 800cd16:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cd18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1e4      	bne.n	800cce8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3308      	adds	r3, #8
 800cd24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd28:	e853 3f00 	ldrex	r3, [r3]
 800cd2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cd2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd30:	4b6f      	ldr	r3, [pc, #444]	@ (800cef0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cd32:	4013      	ands	r3, r2
 800cd34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cd42:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cd44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cd48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cd4a:	e841 2300 	strex	r3, r2, [r1]
 800cd4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cd50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1e3      	bne.n	800cd1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2220      	movs	r2, #32
 800cd5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a61      	ldr	r2, [pc, #388]	@ (800cef4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d021      	beq.n	800cdb8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01a      	beq.n	800cdb8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd8a:	e853 3f00 	ldrex	r3, [r3]
 800cd8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cd90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cda4:	657b      	str	r3, [r7, #84]	@ 0x54
 800cda6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cdaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cdac:	e841 2300 	strex	r3, r2, [r1]
 800cdb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cdb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1e4      	bne.n	800cd82 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d130      	bne.n	800ce22 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdce:	e853 3f00 	ldrex	r3, [r3]
 800cdd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd6:	f023 0310 	bic.w	r3, r3, #16
 800cdda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cde8:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cdee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdf0:	e841 2300 	strex	r3, r2, [r1]
 800cdf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1e4      	bne.n	800cdc6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	69db      	ldr	r3, [r3, #28]
 800ce02:	f003 0310 	and.w	r3, r3, #16
 800ce06:	2b10      	cmp	r3, #16
 800ce08:	d103      	bne.n	800ce12 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2210      	movs	r2, #16
 800ce10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7fe fc10 	bl	800b640 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ce20:	e00e      	b.n	800ce40 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7f3 fcf0 	bl	8000808 <HAL_UART_RxCpltCallback>
        break;
 800ce28:	e00a      	b.n	800ce40 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce2a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d006      	beq.n	800ce40 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800ce32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce36:	f003 0320 	and.w	r3, r3, #32
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f47f aed0 	bne.w	800cbe0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce46:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ce4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d049      	beq.n	800cee6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ce58:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d242      	bcs.n	800cee6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	3308      	adds	r3, #8
 800ce66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	e853 3f00 	ldrex	r3, [r3]
 800ce6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3308      	adds	r3, #8
 800ce80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ce84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce8c:	e841 2300 	strex	r3, r2, [r1]
 800ce90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e3      	bne.n	800ce60 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a17      	ldr	r2, [pc, #92]	@ (800cef8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ce9c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	e853 3f00 	ldrex	r3, [r3]
 800ceaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	f043 0320 	orr.w	r3, r3, #32
 800ceb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cec0:	61bb      	str	r3, [r7, #24]
 800cec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec4:	6979      	ldr	r1, [r7, #20]
 800cec6:	69ba      	ldr	r2, [r7, #24]
 800cec8:	e841 2300 	strex	r3, r2, [r1]
 800cecc:	613b      	str	r3, [r7, #16]
   return(result);
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1e4      	bne.n	800ce9e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ced4:	e007      	b.n	800cee6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	699a      	ldr	r2, [r3, #24]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f042 0208 	orr.w	r2, r2, #8
 800cee4:	619a      	str	r2, [r3, #24]
}
 800cee6:	bf00      	nop
 800cee8:	37b0      	adds	r7, #176	@ 0xb0
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	effffffe 	.word	0xeffffffe
 800cef4:	58000c00 	.word	0x58000c00
 800cef8:	0800c829 	.word	0x0800c829

0800cefc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b0ae      	sub	sp, #184	@ 0xb8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf32:	2b22      	cmp	r3, #34	@ 0x22
 800cf34:	f040 8185 	bne.w	800d242 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cf3e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf42:	e128      	b.n	800d196 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cf56:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cf5a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cf5e:	4013      	ands	r3, r2
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf6c:	1c9a      	adds	r2, r3, #2
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	69db      	ldr	r3, [r3, #28]
 800cf8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cf8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf92:	f003 0307 	and.w	r3, r3, #7
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d053      	beq.n	800d042 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d011      	beq.n	800cfca <UART_RxISR_16BIT_FIFOEN+0xce>
 800cfa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00b      	beq.n	800cfca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfc0:	f043 0201 	orr.w	r2, r3, #1
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d011      	beq.n	800cffa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cfd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cfda:	f003 0301 	and.w	r3, r3, #1
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00b      	beq.n	800cffa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2202      	movs	r2, #2
 800cfe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cff0:	f043 0204 	orr.w	r2, r3, #4
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cffe:	f003 0304 	and.w	r3, r3, #4
 800d002:	2b00      	cmp	r3, #0
 800d004:	d011      	beq.n	800d02a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d00a:	f003 0301 	and.w	r3, r3, #1
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00b      	beq.n	800d02a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2204      	movs	r2, #4
 800d018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d020:	f043 0202 	orr.w	r2, r3, #2
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d030:	2b00      	cmp	r3, #0
 800d032:	d006      	beq.n	800d042 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7f3 fc4d 	bl	80008d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d048:	b29b      	uxth	r3, r3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f040 80a3 	bne.w	800d196 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d058:	e853 3f00 	ldrex	r3, [r3]
 800d05c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d05e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	461a      	mov	r2, r3
 800d06e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d072:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d076:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d07a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d07e:	e841 2300 	strex	r3, r2, [r1]
 800d082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1e2      	bne.n	800d050 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	3308      	adds	r3, #8
 800d090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d094:	e853 3f00 	ldrex	r3, [r3]
 800d098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d09a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d09c:	4b6f      	ldr	r3, [pc, #444]	@ (800d25c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d09e:	4013      	ands	r3, r2
 800d0a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3308      	adds	r3, #8
 800d0aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d0ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d0b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d0b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d0b6:	e841 2300 	strex	r3, r2, [r1]
 800d0ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d0bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1e3      	bne.n	800d08a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2220      	movs	r2, #32
 800d0c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a61      	ldr	r2, [pc, #388]	@ (800d260 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d021      	beq.n	800d124 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d01a      	beq.n	800d124 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0f6:	e853 3f00 	ldrex	r3, [r3]
 800d0fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	461a      	mov	r2, r3
 800d10c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d110:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d112:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d118:	e841 2300 	strex	r3, r2, [r1]
 800d11c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e4      	bne.n	800d0ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d130      	bne.n	800d18e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13a:	e853 3f00 	ldrex	r3, [r3]
 800d13e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d142:	f023 0310 	bic.w	r3, r3, #16
 800d146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d154:	647b      	str	r3, [r7, #68]	@ 0x44
 800d156:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d15c:	e841 2300 	strex	r3, r2, [r1]
 800d160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e4      	bne.n	800d132 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	f003 0310 	and.w	r3, r3, #16
 800d172:	2b10      	cmp	r3, #16
 800d174:	d103      	bne.n	800d17e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2210      	movs	r2, #16
 800d17c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d184:	4619      	mov	r1, r3
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7fe fa5a 	bl	800b640 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d18c:	e00e      	b.n	800d1ac <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7f3 fb3a 	bl	8000808 <HAL_UART_RxCpltCallback>
        break;
 800d194:	e00a      	b.n	800d1ac <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d196:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d006      	beq.n	800d1ac <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800d19e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d1a2:	f003 0320 	and.w	r3, r3, #32
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f47f aecc 	bne.w	800cf44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1b2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d1b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d049      	beq.n	800d252 <UART_RxISR_16BIT_FIFOEN+0x356>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d1c4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d242      	bcs.n	800d252 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d6:	e853 3f00 	ldrex	r3, [r3]
 800d1da:	623b      	str	r3, [r7, #32]
   return(result);
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d1e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3308      	adds	r3, #8
 800d1ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d1f0:	633a      	str	r2, [r7, #48]	@ 0x30
 800d1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1f8:	e841 2300 	strex	r3, r2, [r1]
 800d1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e3      	bne.n	800d1cc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a17      	ldr	r2, [pc, #92]	@ (800d264 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d208:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	e853 3f00 	ldrex	r3, [r3]
 800d216:	60fb      	str	r3, [r7, #12]
   return(result);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f043 0320 	orr.w	r3, r3, #32
 800d21e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d22c:	61fb      	str	r3, [r7, #28]
 800d22e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	69b9      	ldr	r1, [r7, #24]
 800d232:	69fa      	ldr	r2, [r7, #28]
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	617b      	str	r3, [r7, #20]
   return(result);
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e4      	bne.n	800d20a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d240:	e007      	b.n	800d252 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	699a      	ldr	r2, [r3, #24]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f042 0208 	orr.w	r2, r2, #8
 800d250:	619a      	str	r2, [r3, #24]
}
 800d252:	bf00      	nop
 800d254:	37b8      	adds	r7, #184	@ 0xb8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	effffffe 	.word	0xeffffffe
 800d260:	58000c00 	.word	0x58000c00
 800d264:	0800c9e1 	.word	0x0800c9e1

0800d268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d284:	bf00      	nop
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d101      	bne.n	800d2ba <HAL_UARTEx_DisableFifoMode+0x16>
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	e027      	b.n	800d30a <HAL_UARTEx_DisableFifoMode+0x66>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2224      	movs	r2, #36	@ 0x24
 800d2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f022 0201 	bic.w	r2, r2, #1
 800d2e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d2e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3714      	adds	r7, #20
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d326:	2b01      	cmp	r3, #1
 800d328:	d101      	bne.n	800d32e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d32a:	2302      	movs	r3, #2
 800d32c:	e02d      	b.n	800d38a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2201      	movs	r2, #1
 800d332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2224      	movs	r2, #36	@ 0x24
 800d33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f022 0201 	bic.w	r2, r2, #1
 800d354:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	430a      	orrs	r2, r1
 800d368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f850 	bl	800d410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2220      	movs	r2, #32
 800d37c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d392:	b580      	push	{r7, lr}
 800d394:	b084      	sub	sp, #16
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
 800d39a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d101      	bne.n	800d3aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	e02d      	b.n	800d406 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2224      	movs	r2, #36	@ 0x24
 800d3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f022 0201 	bic.w	r2, r2, #1
 800d3d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	430a      	orrs	r2, r1
 800d3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f812 	bl	800d410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2220      	movs	r2, #32
 800d3f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
	...

0800d410 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d108      	bne.n	800d432 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d430:	e031      	b.n	800d496 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d432:	2310      	movs	r3, #16
 800d434:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d436:	2310      	movs	r3, #16
 800d438:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	0e5b      	lsrs	r3, r3, #25
 800d442:	b2db      	uxtb	r3, r3
 800d444:	f003 0307 	and.w	r3, r3, #7
 800d448:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	0f5b      	lsrs	r3, r3, #29
 800d452:	b2db      	uxtb	r3, r3
 800d454:	f003 0307 	and.w	r3, r3, #7
 800d458:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d45a:	7bbb      	ldrb	r3, [r7, #14]
 800d45c:	7b3a      	ldrb	r2, [r7, #12]
 800d45e:	4911      	ldr	r1, [pc, #68]	@ (800d4a4 <UARTEx_SetNbDataToProcess+0x94>)
 800d460:	5c8a      	ldrb	r2, [r1, r2]
 800d462:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d466:	7b3a      	ldrb	r2, [r7, #12]
 800d468:	490f      	ldr	r1, [pc, #60]	@ (800d4a8 <UARTEx_SetNbDataToProcess+0x98>)
 800d46a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d46c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	7b7a      	ldrb	r2, [r7, #13]
 800d47c:	4909      	ldr	r1, [pc, #36]	@ (800d4a4 <UARTEx_SetNbDataToProcess+0x94>)
 800d47e:	5c8a      	ldrb	r2, [r1, r2]
 800d480:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d484:	7b7a      	ldrb	r2, [r7, #13]
 800d486:	4908      	ldr	r1, [pc, #32]	@ (800d4a8 <UARTEx_SetNbDataToProcess+0x98>)
 800d488:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d48a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d48e:	b29a      	uxth	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d496:	bf00      	nop
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	08012e40 	.word	0x08012e40
 800d4a8:	08012e48 	.word	0x08012e48

0800d4ac <__NVIC_SetPriority>:
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	6039      	str	r1, [r7, #0]
 800d4b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d4b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	db0a      	blt.n	800d4d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	490c      	ldr	r1, [pc, #48]	@ (800d4f8 <__NVIC_SetPriority+0x4c>)
 800d4c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4ca:	0112      	lsls	r2, r2, #4
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	440b      	add	r3, r1
 800d4d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d4d4:	e00a      	b.n	800d4ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	4908      	ldr	r1, [pc, #32]	@ (800d4fc <__NVIC_SetPriority+0x50>)
 800d4dc:	88fb      	ldrh	r3, [r7, #6]
 800d4de:	f003 030f 	and.w	r3, r3, #15
 800d4e2:	3b04      	subs	r3, #4
 800d4e4:	0112      	lsls	r2, r2, #4
 800d4e6:	b2d2      	uxtb	r2, r2
 800d4e8:	440b      	add	r3, r1
 800d4ea:	761a      	strb	r2, [r3, #24]
}
 800d4ec:	bf00      	nop
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	e000e100 	.word	0xe000e100
 800d4fc:	e000ed00 	.word	0xe000ed00

0800d500 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d500:	b580      	push	{r7, lr}
 800d502:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d504:	4b05      	ldr	r3, [pc, #20]	@ (800d51c <SysTick_Handler+0x1c>)
 800d506:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d508:	f001 ff06 	bl	800f318 <xTaskGetSchedulerState>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d001      	beq.n	800d516 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d512:	f002 fd01 	bl	800ff18 <xPortSysTickHandler>
  }
}
 800d516:	bf00      	nop
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	e000e010 	.word	0xe000e010

0800d520 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d520:	b580      	push	{r7, lr}
 800d522:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d524:	2100      	movs	r1, #0
 800d526:	f06f 0004 	mvn.w	r0, #4
 800d52a:	f7ff ffbf 	bl	800d4ac <__NVIC_SetPriority>
#endif
}
 800d52e:	bf00      	nop
 800d530:	bd80      	pop	{r7, pc}
	...

0800d534 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d53a:	f3ef 8305 	mrs	r3, IPSR
 800d53e:	603b      	str	r3, [r7, #0]
  return(result);
 800d540:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d542:	2b00      	cmp	r3, #0
 800d544:	d003      	beq.n	800d54e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d546:	f06f 0305 	mvn.w	r3, #5
 800d54a:	607b      	str	r3, [r7, #4]
 800d54c:	e00c      	b.n	800d568 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d54e:	4b0a      	ldr	r3, [pc, #40]	@ (800d578 <osKernelInitialize+0x44>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d105      	bne.n	800d562 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d556:	4b08      	ldr	r3, [pc, #32]	@ (800d578 <osKernelInitialize+0x44>)
 800d558:	2201      	movs	r2, #1
 800d55a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	607b      	str	r3, [r7, #4]
 800d560:	e002      	b.n	800d568 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d562:	f04f 33ff 	mov.w	r3, #4294967295
 800d566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d568:	687b      	ldr	r3, [r7, #4]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	370c      	adds	r7, #12
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	24009030 	.word	0x24009030

0800d57c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d582:	f3ef 8305 	mrs	r3, IPSR
 800d586:	603b      	str	r3, [r7, #0]
  return(result);
 800d588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d58e:	f06f 0305 	mvn.w	r3, #5
 800d592:	607b      	str	r3, [r7, #4]
 800d594:	e010      	b.n	800d5b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d596:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c4 <osKernelStart+0x48>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d109      	bne.n	800d5b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d59e:	f7ff ffbf 	bl	800d520 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d5a2:	4b08      	ldr	r3, [pc, #32]	@ (800d5c4 <osKernelStart+0x48>)
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d5a8:	f001 fa52 	bl	800ea50 <vTaskStartScheduler>
      stat = osOK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	607b      	str	r3, [r7, #4]
 800d5b0:	e002      	b.n	800d5b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d5b8:	687b      	ldr	r3, [r7, #4]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	24009030 	.word	0x24009030

0800d5c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08e      	sub	sp, #56	@ 0x38
 800d5cc:	af04      	add	r7, sp, #16
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5d8:	f3ef 8305 	mrs	r3, IPSR
 800d5dc:	617b      	str	r3, [r7, #20]
  return(result);
 800d5de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d17e      	bne.n	800d6e2 <osThreadNew+0x11a>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d07b      	beq.n	800d6e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d5ea:	2380      	movs	r3, #128	@ 0x80
 800d5ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d5ee:	2318      	movs	r3, #24
 800d5f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d045      	beq.n	800d68e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <osThreadNew+0x48>
        name = attr->name;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d008      	beq.n	800d636 <osThreadNew+0x6e>
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	2b38      	cmp	r3, #56	@ 0x38
 800d628:	d805      	bhi.n	800d636 <osThreadNew+0x6e>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <osThreadNew+0x72>
        return (NULL);
 800d636:	2300      	movs	r3, #0
 800d638:	e054      	b.n	800d6e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	695b      	ldr	r3, [r3, #20]
 800d646:	089b      	lsrs	r3, r3, #2
 800d648:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00e      	beq.n	800d670 <osThreadNew+0xa8>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	2ba7      	cmp	r3, #167	@ 0xa7
 800d658:	d90a      	bls.n	800d670 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d006      	beq.n	800d670 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d002      	beq.n	800d670 <osThreadNew+0xa8>
        mem = 1;
 800d66a:	2301      	movs	r3, #1
 800d66c:	61bb      	str	r3, [r7, #24]
 800d66e:	e010      	b.n	800d692 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10c      	bne.n	800d692 <osThreadNew+0xca>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d108      	bne.n	800d692 <osThreadNew+0xca>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d104      	bne.n	800d692 <osThreadNew+0xca>
          mem = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	61bb      	str	r3, [r7, #24]
 800d68c:	e001      	b.n	800d692 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d110      	bne.n	800d6ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d6a0:	9202      	str	r2, [sp, #8]
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	6a3a      	ldr	r2, [r7, #32]
 800d6ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f001 f810 	bl	800e6d4 <xTaskCreateStatic>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	613b      	str	r3, [r7, #16]
 800d6b8:	e013      	b.n	800d6e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d110      	bne.n	800d6e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d6c0:	6a3b      	ldr	r3, [r7, #32]
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	f107 0310 	add.w	r3, r7, #16
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f001 f85e 	bl	800e794 <xTaskCreate>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d001      	beq.n	800d6e2 <osThreadNew+0x11a>
            hTask = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d6e2:	693b      	ldr	r3, [r7, #16]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3728      	adds	r7, #40	@ 0x28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08a      	sub	sp, #40	@ 0x28
 800d6f0:	af02      	add	r7, sp, #8
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6fc:	f3ef 8305 	mrs	r3, IPSR
 800d700:	613b      	str	r3, [r7, #16]
  return(result);
 800d702:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d704:	2b00      	cmp	r3, #0
 800d706:	d175      	bne.n	800d7f4 <osSemaphoreNew+0x108>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d072      	beq.n	800d7f4 <osSemaphoreNew+0x108>
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	429a      	cmp	r2, r3
 800d714:	d86e      	bhi.n	800d7f4 <osSemaphoreNew+0x108>
    mem = -1;
 800d716:	f04f 33ff 	mov.w	r3, #4294967295
 800d71a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d015      	beq.n	800d74e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d006      	beq.n	800d738 <osSemaphoreNew+0x4c>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	2b4f      	cmp	r3, #79	@ 0x4f
 800d730:	d902      	bls.n	800d738 <osSemaphoreNew+0x4c>
        mem = 1;
 800d732:	2301      	movs	r3, #1
 800d734:	61bb      	str	r3, [r7, #24]
 800d736:	e00c      	b.n	800d752 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d108      	bne.n	800d752 <osSemaphoreNew+0x66>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d104      	bne.n	800d752 <osSemaphoreNew+0x66>
          mem = 0;
 800d748:	2300      	movs	r3, #0
 800d74a:	61bb      	str	r3, [r7, #24]
 800d74c:	e001      	b.n	800d752 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d758:	d04c      	beq.n	800d7f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d128      	bne.n	800d7b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d10a      	bne.n	800d77c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	2203      	movs	r2, #3
 800d76c:	9200      	str	r2, [sp, #0]
 800d76e:	2200      	movs	r2, #0
 800d770:	2100      	movs	r1, #0
 800d772:	2001      	movs	r0, #1
 800d774:	f000 f996 	bl	800daa4 <xQueueGenericCreateStatic>
 800d778:	61f8      	str	r0, [r7, #28]
 800d77a:	e005      	b.n	800d788 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d77c:	2203      	movs	r2, #3
 800d77e:	2100      	movs	r1, #0
 800d780:	2001      	movs	r0, #1
 800d782:	f000 fa0c 	bl	800db9e <xQueueGenericCreate>
 800d786:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d022      	beq.n	800d7d4 <osSemaphoreNew+0xe8>
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d01f      	beq.n	800d7d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d794:	2300      	movs	r3, #0
 800d796:	2200      	movs	r2, #0
 800d798:	2100      	movs	r1, #0
 800d79a:	69f8      	ldr	r0, [r7, #28]
 800d79c:	f000 facc 	bl	800dd38 <xQueueGenericSend>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d016      	beq.n	800d7d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d7a6:	69f8      	ldr	r0, [r7, #28]
 800d7a8:	f000 fdd8 	bl	800e35c <vQueueDelete>
            hSemaphore = NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	61fb      	str	r3, [r7, #28]
 800d7b0:	e010      	b.n	800d7d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d108      	bne.n	800d7ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	68b9      	ldr	r1, [r7, #8]
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f000 fa4a 	bl	800dc5a <xQueueCreateCountingSemaphoreStatic>
 800d7c6:	61f8      	str	r0, [r7, #28]
 800d7c8:	e004      	b.n	800d7d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f000 fa7d 	bl	800dccc <xQueueCreateCountingSemaphore>
 800d7d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00c      	beq.n	800d7f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	617b      	str	r3, [r7, #20]
 800d7e6:	e001      	b.n	800d7ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d7ec:	6979      	ldr	r1, [r7, #20]
 800d7ee:	69f8      	ldr	r0, [r7, #28]
 800d7f0:	f000 fee8 	bl	800e5c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d7f4:	69fb      	ldr	r3, [r7, #28]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3720      	adds	r7, #32
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
	...

0800d800 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4a07      	ldr	r2, [pc, #28]	@ (800d82c <vApplicationGetIdleTaskMemory+0x2c>)
 800d810:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	4a06      	ldr	r2, [pc, #24]	@ (800d830 <vApplicationGetIdleTaskMemory+0x30>)
 800d816:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2280      	movs	r2, #128	@ 0x80
 800d81c:	601a      	str	r2, [r3, #0]
}
 800d81e:	bf00      	nop
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	24009034 	.word	0x24009034
 800d830:	240090dc 	.word	0x240090dc

0800d834 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a07      	ldr	r2, [pc, #28]	@ (800d860 <vApplicationGetTimerTaskMemory+0x2c>)
 800d844:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	4a06      	ldr	r2, [pc, #24]	@ (800d864 <vApplicationGetTimerTaskMemory+0x30>)
 800d84a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d852:	601a      	str	r2, [r3, #0]
}
 800d854:	bf00      	nop
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	240092dc 	.word	0x240092dc
 800d864:	24009384 	.word	0x24009384

0800d868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f103 0208 	add.w	r2, r3, #8
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f04f 32ff 	mov.w	r2, #4294967295
 800d880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f103 0208 	add.w	r2, r3, #8
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f103 0208 	add.w	r2, r3, #8
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d8b6:	bf00      	nop
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b085      	sub	sp, #20
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	689a      	ldr	r2, [r3, #8]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	1c5a      	adds	r2, r3, #1
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	601a      	str	r2, [r3, #0]
}
 800d8fe:	bf00      	nop
 800d900:	3714      	adds	r7, #20
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d90a:	b480      	push	{r7}
 800d90c:	b085      	sub	sp, #20
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d920:	d103      	bne.n	800d92a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e00c      	b.n	800d944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	3308      	adds	r3, #8
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	e002      	b.n	800d938 <vListInsert+0x2e>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	429a      	cmp	r2, r3
 800d942:	d2f6      	bcs.n	800d932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	683a      	ldr	r2, [r7, #0]
 800d952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	601a      	str	r2, [r3, #0]
}
 800d970:	bf00      	nop
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	6892      	ldr	r2, [r2, #8]
 800d992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	6852      	ldr	r2, [r2, #4]
 800d99c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d103      	bne.n	800d9b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	689a      	ldr	r2, [r3, #8]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	1e5a      	subs	r2, r3, #1
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10b      	bne.n	800d9fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d9f6:	bf00      	nop
 800d9f8:	bf00      	nop
 800d9fa:	e7fd      	b.n	800d9f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d9fc:	f002 f9fc 	bl	800fdf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da08:	68f9      	ldr	r1, [r7, #12]
 800da0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800da0c:	fb01 f303 	mul.w	r3, r1, r3
 800da10:	441a      	add	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da2c:	3b01      	subs	r3, #1
 800da2e:	68f9      	ldr	r1, [r7, #12]
 800da30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800da32:	fb01 f303 	mul.w	r3, r1, r3
 800da36:	441a      	add	r2, r3
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	22ff      	movs	r2, #255	@ 0xff
 800da40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	22ff      	movs	r2, #255	@ 0xff
 800da48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d114      	bne.n	800da7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d01a      	beq.n	800da90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3310      	adds	r3, #16
 800da5e:	4618      	mov	r0, r3
 800da60:	f001 fa94 	bl	800ef8c <xTaskRemoveFromEventList>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d012      	beq.n	800da90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800da6a:	4b0d      	ldr	r3, [pc, #52]	@ (800daa0 <xQueueGenericReset+0xd0>)
 800da6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da70:	601a      	str	r2, [r3, #0]
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	e009      	b.n	800da90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	3310      	adds	r3, #16
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff fef1 	bl	800d868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	3324      	adds	r3, #36	@ 0x24
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7ff feec 	bl	800d868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da90:	f002 f9e4 	bl	800fe5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da94:	2301      	movs	r3, #1
}
 800da96:	4618      	mov	r0, r3
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	e000ed04 	.word	0xe000ed04

0800daa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08e      	sub	sp, #56	@ 0x38
 800daa8:	af02      	add	r7, sp, #8
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10b      	bne.n	800dad0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800daca:	bf00      	nop
 800dacc:	bf00      	nop
 800dace:	e7fd      	b.n	800dacc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10b      	bne.n	800daee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800dad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dae8:	bf00      	nop
 800daea:	bf00      	nop
 800daec:	e7fd      	b.n	800daea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <xQueueGenericCreateStatic+0x56>
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <xQueueGenericCreateStatic+0x5a>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e000      	b.n	800db00 <xQueueGenericCreateStatic+0x5c>
 800dafe:	2300      	movs	r3, #0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10b      	bne.n	800db1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	623b      	str	r3, [r7, #32]
}
 800db16:	bf00      	nop
 800db18:	bf00      	nop
 800db1a:	e7fd      	b.n	800db18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <xQueueGenericCreateStatic+0x84>
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <xQueueGenericCreateStatic+0x88>
 800db28:	2301      	movs	r3, #1
 800db2a:	e000      	b.n	800db2e <xQueueGenericCreateStatic+0x8a>
 800db2c:	2300      	movs	r3, #0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10b      	bne.n	800db4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800db32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	61fb      	str	r3, [r7, #28]
}
 800db44:	bf00      	nop
 800db46:	bf00      	nop
 800db48:	e7fd      	b.n	800db46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800db4a:	2350      	movs	r3, #80	@ 0x50
 800db4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2b50      	cmp	r3, #80	@ 0x50
 800db52:	d00b      	beq.n	800db6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800db54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	61bb      	str	r3, [r7, #24]
}
 800db66:	bf00      	nop
 800db68:	bf00      	nop
 800db6a:	e7fd      	b.n	800db68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800db72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00d      	beq.n	800db94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800db78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800db84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	4613      	mov	r3, r2
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	68b9      	ldr	r1, [r7, #8]
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 f840 	bl	800dc14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800db96:	4618      	mov	r0, r3
 800db98:	3730      	adds	r7, #48	@ 0x30
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b08a      	sub	sp, #40	@ 0x28
 800dba2:	af02      	add	r7, sp, #8
 800dba4:	60f8      	str	r0, [r7, #12]
 800dba6:	60b9      	str	r1, [r7, #8]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10b      	bne.n	800dbca <xQueueGenericCreate+0x2c>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	613b      	str	r3, [r7, #16]
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
 800dbc8:	e7fd      	b.n	800dbc6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	fb02 f303 	mul.w	r3, r2, r3
 800dbd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	3350      	adds	r3, #80	@ 0x50
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f002 fa2f 	bl	801003c <pvPortMalloc>
 800dbde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d011      	beq.n	800dc0a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	3350      	adds	r3, #80	@ 0x50
 800dbee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbf8:	79fa      	ldrb	r2, [r7, #7]
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	697a      	ldr	r2, [r7, #20]
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 f805 	bl	800dc14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc0a:	69bb      	ldr	r3, [r7, #24]
	}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3720      	adds	r7, #32
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d103      	bne.n	800dc30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	601a      	str	r2, [r3, #0]
 800dc2e:	e002      	b.n	800dc36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc42:	2101      	movs	r1, #1
 800dc44:	69b8      	ldr	r0, [r7, #24]
 800dc46:	f7ff fec3 	bl	800d9d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	78fa      	ldrb	r2, [r7, #3]
 800dc4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b08a      	sub	sp, #40	@ 0x28
 800dc5e:	af02      	add	r7, sp, #8
 800dc60:	60f8      	str	r0, [r7, #12]
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10b      	bne.n	800dc84 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	61bb      	str	r3, [r7, #24]
}
 800dc7e:	bf00      	nop
 800dc80:	bf00      	nop
 800dc82:	e7fd      	b.n	800dc80 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d90b      	bls.n	800dca4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800dc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc90:	f383 8811 	msr	BASEPRI, r3
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	617b      	str	r3, [r7, #20]
}
 800dc9e:	bf00      	nop
 800dca0:	bf00      	nop
 800dca2:	e7fd      	b.n	800dca0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dca4:	2302      	movs	r3, #2
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2100      	movs	r1, #0
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f7ff fef8 	bl	800daa4 <xQueueGenericCreateStatic>
 800dcb4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d002      	beq.n	800dcc2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dcc2:	69fb      	ldr	r3, [r7, #28]
	}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3720      	adds	r7, #32
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b086      	sub	sp, #24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10b      	bne.n	800dcf4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	613b      	str	r3, [r7, #16]
}
 800dcee:	bf00      	nop
 800dcf0:	bf00      	nop
 800dcf2:	e7fd      	b.n	800dcf0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dcf4:	683a      	ldr	r2, [r7, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d90b      	bls.n	800dd14 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	60fb      	str	r3, [r7, #12]
}
 800dd0e:	bf00      	nop
 800dd10:	bf00      	nop
 800dd12:	e7fd      	b.n	800dd10 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd14:	2202      	movs	r2, #2
 800dd16:	2100      	movs	r1, #0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff ff40 	bl	800db9e <xQueueGenericCreate>
 800dd1e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d002      	beq.n	800dd2c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dd2c:	697b      	ldr	r3, [r7, #20]
	}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
	...

0800dd38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b08e      	sub	sp, #56	@ 0x38
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
 800dd44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dd46:	2300      	movs	r3, #0
 800dd48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10b      	bne.n	800dd6c <xQueueGenericSend+0x34>
	__asm volatile
 800dd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd58:	f383 8811 	msr	BASEPRI, r3
 800dd5c:	f3bf 8f6f 	isb	sy
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dd66:	bf00      	nop
 800dd68:	bf00      	nop
 800dd6a:	e7fd      	b.n	800dd68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d103      	bne.n	800dd7a <xQueueGenericSend+0x42>
 800dd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <xQueueGenericSend+0x46>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e000      	b.n	800dd80 <xQueueGenericSend+0x48>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10b      	bne.n	800dd9c <xQueueGenericSend+0x64>
	__asm volatile
 800dd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd88:	f383 8811 	msr	BASEPRI, r3
 800dd8c:	f3bf 8f6f 	isb	sy
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dd96:	bf00      	nop
 800dd98:	bf00      	nop
 800dd9a:	e7fd      	b.n	800dd98 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d103      	bne.n	800ddaa <xQueueGenericSend+0x72>
 800dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d101      	bne.n	800ddae <xQueueGenericSend+0x76>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e000      	b.n	800ddb0 <xQueueGenericSend+0x78>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10b      	bne.n	800ddcc <xQueueGenericSend+0x94>
	__asm volatile
 800ddb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	623b      	str	r3, [r7, #32]
}
 800ddc6:	bf00      	nop
 800ddc8:	bf00      	nop
 800ddca:	e7fd      	b.n	800ddc8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddcc:	f001 faa4 	bl	800f318 <xTaskGetSchedulerState>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d102      	bne.n	800dddc <xQueueGenericSend+0xa4>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <xQueueGenericSend+0xa8>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e000      	b.n	800dde2 <xQueueGenericSend+0xaa>
 800dde0:	2300      	movs	r3, #0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10b      	bne.n	800ddfe <xQueueGenericSend+0xc6>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	61fb      	str	r3, [r7, #28]
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	e7fd      	b.n	800ddfa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ddfe:	f001 fffb 	bl	800fdf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d302      	bcc.n	800de14 <xQueueGenericSend+0xdc>
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2b02      	cmp	r3, #2
 800de12:	d129      	bne.n	800de68 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de1a:	f000 fac3 	bl	800e3a4 <prvCopyDataToQueue>
 800de1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de24:	2b00      	cmp	r3, #0
 800de26:	d010      	beq.n	800de4a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de2a:	3324      	adds	r3, #36	@ 0x24
 800de2c:	4618      	mov	r0, r3
 800de2e:	f001 f8ad 	bl	800ef8c <xTaskRemoveFromEventList>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d013      	beq.n	800de60 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800de38:	4b3f      	ldr	r3, [pc, #252]	@ (800df38 <xQueueGenericSend+0x200>)
 800de3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	f3bf 8f6f 	isb	sy
 800de48:	e00a      	b.n	800de60 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800de4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d007      	beq.n	800de60 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800de50:	4b39      	ldr	r3, [pc, #228]	@ (800df38 <xQueueGenericSend+0x200>)
 800de52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800de60:	f001 fffc 	bl	800fe5c <vPortExitCritical>
				return pdPASS;
 800de64:	2301      	movs	r3, #1
 800de66:	e063      	b.n	800df30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d103      	bne.n	800de76 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de6e:	f001 fff5 	bl	800fe5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800de72:	2300      	movs	r3, #0
 800de74:	e05c      	b.n	800df30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d106      	bne.n	800de8a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de7c:	f107 0314 	add.w	r3, r7, #20
 800de80:	4618      	mov	r0, r3
 800de82:	f001 f8e7 	bl	800f054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de86:	2301      	movs	r3, #1
 800de88:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de8a:	f001 ffe7 	bl	800fe5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de8e:	f000 fe4f 	bl	800eb30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de92:	f001 ffb1 	bl	800fdf8 <vPortEnterCritical>
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de9c:	b25b      	sxtb	r3, r3
 800de9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea2:	d103      	bne.n	800deac <xQueueGenericSend+0x174>
 800dea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800deac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800deb2:	b25b      	sxtb	r3, r3
 800deb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb8:	d103      	bne.n	800dec2 <xQueueGenericSend+0x18a>
 800deba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debc:	2200      	movs	r2, #0
 800debe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dec2:	f001 ffcb 	bl	800fe5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dec6:	1d3a      	adds	r2, r7, #4
 800dec8:	f107 0314 	add.w	r3, r7, #20
 800decc:	4611      	mov	r1, r2
 800dece:	4618      	mov	r0, r3
 800ded0:	f001 f8d6 	bl	800f080 <xTaskCheckForTimeOut>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d124      	bne.n	800df24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800deda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dedc:	f000 fb5a 	bl	800e594 <prvIsQueueFull>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d018      	beq.n	800df18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee8:	3310      	adds	r3, #16
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f000 fffa 	bl	800eee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800def4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800def6:	f000 fae5 	bl	800e4c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800defa:	f000 fe27 	bl	800eb4c <xTaskResumeAll>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	f47f af7c 	bne.w	800ddfe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800df06:	4b0c      	ldr	r3, [pc, #48]	@ (800df38 <xQueueGenericSend+0x200>)
 800df08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df0c:	601a      	str	r2, [r3, #0]
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	e772      	b.n	800ddfe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800df18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df1a:	f000 fad3 	bl	800e4c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df1e:	f000 fe15 	bl	800eb4c <xTaskResumeAll>
 800df22:	e76c      	b.n	800ddfe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800df24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df26:	f000 facd 	bl	800e4c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df2a:	f000 fe0f 	bl	800eb4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800df2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800df30:	4618      	mov	r0, r3
 800df32:	3738      	adds	r7, #56	@ 0x38
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	e000ed04 	.word	0xe000ed04

0800df3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b090      	sub	sp, #64	@ 0x40
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800df4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10b      	bne.n	800df6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	e7fd      	b.n	800df68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d103      	bne.n	800df7a <xQueueGenericSendFromISR+0x3e>
 800df72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <xQueueGenericSendFromISR+0x42>
 800df7a:	2301      	movs	r3, #1
 800df7c:	e000      	b.n	800df80 <xQueueGenericSendFromISR+0x44>
 800df7e:	2300      	movs	r3, #0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d10b      	bne.n	800df9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800df96:	bf00      	nop
 800df98:	bf00      	nop
 800df9a:	e7fd      	b.n	800df98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d103      	bne.n	800dfaa <xQueueGenericSendFromISR+0x6e>
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d101      	bne.n	800dfae <xQueueGenericSendFromISR+0x72>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e000      	b.n	800dfb0 <xQueueGenericSendFromISR+0x74>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10b      	bne.n	800dfcc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800dfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb8:	f383 8811 	msr	BASEPRI, r3
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f3bf 8f4f 	dsb	sy
 800dfc4:	623b      	str	r3, [r7, #32]
}
 800dfc6:	bf00      	nop
 800dfc8:	bf00      	nop
 800dfca:	e7fd      	b.n	800dfc8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dfcc:	f001 fff4 	bl	800ffb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dfd0:	f3ef 8211 	mrs	r2, BASEPRI
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	61fa      	str	r2, [r7, #28]
 800dfe6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dfe8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d302      	bcc.n	800dffe <xQueueGenericSendFromISR+0xc2>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2b02      	cmp	r3, #2
 800dffc:	d12f      	bne.n	800e05e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e004:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e00e:	683a      	ldr	r2, [r7, #0]
 800e010:	68b9      	ldr	r1, [r7, #8]
 800e012:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e014:	f000 f9c6 	bl	800e3a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e018:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e020:	d112      	bne.n	800e048 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e026:	2b00      	cmp	r3, #0
 800e028:	d016      	beq.n	800e058 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02c:	3324      	adds	r3, #36	@ 0x24
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 ffac 	bl	800ef8c <xTaskRemoveFromEventList>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00e      	beq.n	800e058 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	e007      	b.n	800e058 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e04c:	3301      	adds	r3, #1
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	b25a      	sxtb	r2, r3
 800e052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e058:	2301      	movs	r3, #1
 800e05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e05c:	e001      	b.n	800e062 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e064:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e06c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e070:	4618      	mov	r0, r3
 800e072:	3740      	adds	r7, #64	@ 0x40
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08e      	sub	sp, #56	@ 0x38
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10b      	bne.n	800e0a4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	623b      	str	r3, [r7, #32]
}
 800e09e:	bf00      	nop
 800e0a0:	bf00      	nop
 800e0a2:	e7fd      	b.n	800e0a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00b      	beq.n	800e0c4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800e0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	61fb      	str	r3, [r7, #28]
}
 800e0be:	bf00      	nop
 800e0c0:	bf00      	nop
 800e0c2:	e7fd      	b.n	800e0c0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d103      	bne.n	800e0d4 <xQueueGiveFromISR+0x5c>
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <xQueueGiveFromISR+0x60>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e000      	b.n	800e0da <xQueueGiveFromISR+0x62>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10b      	bne.n	800e0f6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	61bb      	str	r3, [r7, #24]
}
 800e0f0:	bf00      	nop
 800e0f2:	bf00      	nop
 800e0f4:	e7fd      	b.n	800e0f2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0f6:	f001 ff5f 	bl	800ffb8 <vPortValidateInterruptPriority>
	__asm volatile
 800e0fa:	f3ef 8211 	mrs	r2, BASEPRI
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	617a      	str	r2, [r7, #20]
 800e110:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e112:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e114:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e11a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e122:	429a      	cmp	r2, r3
 800e124:	d22b      	bcs.n	800e17e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e128:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e12c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e138:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e140:	d112      	bne.n	800e168 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e146:	2b00      	cmp	r3, #0
 800e148:	d016      	beq.n	800e178 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14c:	3324      	adds	r3, #36	@ 0x24
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 ff1c 	bl	800ef8c <xTaskRemoveFromEventList>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00e      	beq.n	800e178 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00b      	beq.n	800e178 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2201      	movs	r2, #1
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	e007      	b.n	800e178 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e16c:	3301      	adds	r3, #1
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	b25a      	sxtb	r2, r3
 800e172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e178:	2301      	movs	r3, #1
 800e17a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e17c:	e001      	b.n	800e182 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	637b      	str	r3, [r7, #52]	@ 0x34
 800e182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e184:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f383 8811 	msr	BASEPRI, r3
}
 800e18c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e190:	4618      	mov	r0, r3
 800e192:	3738      	adds	r7, #56	@ 0x38
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08c      	sub	sp, #48	@ 0x30
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10b      	bne.n	800e1ca <xQueueReceive+0x32>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	623b      	str	r3, [r7, #32]
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop
 800e1c8:	e7fd      	b.n	800e1c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d103      	bne.n	800e1d8 <xQueueReceive+0x40>
 800e1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <xQueueReceive+0x44>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e000      	b.n	800e1de <xQueueReceive+0x46>
 800e1dc:	2300      	movs	r3, #0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10b      	bne.n	800e1fa <xQueueReceive+0x62>
	__asm volatile
 800e1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	61fb      	str	r3, [r7, #28]
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop
 800e1f8:	e7fd      	b.n	800e1f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1fa:	f001 f88d 	bl	800f318 <xTaskGetSchedulerState>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d102      	bne.n	800e20a <xQueueReceive+0x72>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <xQueueReceive+0x76>
 800e20a:	2301      	movs	r3, #1
 800e20c:	e000      	b.n	800e210 <xQueueReceive+0x78>
 800e20e:	2300      	movs	r3, #0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10b      	bne.n	800e22c <xQueueReceive+0x94>
	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e218:	f383 8811 	msr	BASEPRI, r3
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	61bb      	str	r3, [r7, #24]
}
 800e226:	bf00      	nop
 800e228:	bf00      	nop
 800e22a:	e7fd      	b.n	800e228 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e22c:	f001 fde4 	bl	800fdf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e234:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d01f      	beq.n	800e27c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e240:	f000 f91a 	bl	800e478 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	1e5a      	subs	r2, r3, #1
 800e248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00f      	beq.n	800e274 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e256:	3310      	adds	r3, #16
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 fe97 	bl	800ef8c <xTaskRemoveFromEventList>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d007      	beq.n	800e274 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e264:	4b3c      	ldr	r3, [pc, #240]	@ (800e358 <xQueueReceive+0x1c0>)
 800e266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e274:	f001 fdf2 	bl	800fe5c <vPortExitCritical>
				return pdPASS;
 800e278:	2301      	movs	r3, #1
 800e27a:	e069      	b.n	800e350 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d103      	bne.n	800e28a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e282:	f001 fdeb 	bl	800fe5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e286:	2300      	movs	r3, #0
 800e288:	e062      	b.n	800e350 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d106      	bne.n	800e29e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e290:	f107 0310 	add.w	r3, r7, #16
 800e294:	4618      	mov	r0, r3
 800e296:	f000 fedd 	bl	800f054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e29a:	2301      	movs	r3, #1
 800e29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e29e:	f001 fddd 	bl	800fe5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2a2:	f000 fc45 	bl	800eb30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2a6:	f001 fda7 	bl	800fdf8 <vPortEnterCritical>
 800e2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2b0:	b25b      	sxtb	r3, r3
 800e2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b6:	d103      	bne.n	800e2c0 <xQueueReceive+0x128>
 800e2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2c6:	b25b      	sxtb	r3, r3
 800e2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2cc:	d103      	bne.n	800e2d6 <xQueueReceive+0x13e>
 800e2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2d6:	f001 fdc1 	bl	800fe5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2da:	1d3a      	adds	r2, r7, #4
 800e2dc:	f107 0310 	add.w	r3, r7, #16
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 fecc 	bl	800f080 <xTaskCheckForTimeOut>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d123      	bne.n	800e336 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e2ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2f0:	f000 f93a 	bl	800e568 <prvIsQueueEmpty>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d017      	beq.n	800e32a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	3324      	adds	r3, #36	@ 0x24
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	4611      	mov	r1, r2
 800e302:	4618      	mov	r0, r3
 800e304:	f000 fdf0 	bl	800eee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e30a:	f000 f8db 	bl	800e4c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e30e:	f000 fc1d 	bl	800eb4c <xTaskResumeAll>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d189      	bne.n	800e22c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e318:	4b0f      	ldr	r3, [pc, #60]	@ (800e358 <xQueueReceive+0x1c0>)
 800e31a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e31e:	601a      	str	r2, [r3, #0]
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	e780      	b.n	800e22c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e32a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e32c:	f000 f8ca 	bl	800e4c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e330:	f000 fc0c 	bl	800eb4c <xTaskResumeAll>
 800e334:	e77a      	b.n	800e22c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e338:	f000 f8c4 	bl	800e4c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e33c:	f000 fc06 	bl	800eb4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e342:	f000 f911 	bl	800e568 <prvIsQueueEmpty>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f43f af6f 	beq.w	800e22c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e34e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e350:	4618      	mov	r0, r3
 800e352:	3730      	adds	r7, #48	@ 0x30
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	e000ed04 	.word	0xe000ed04

0800e35c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d10b      	bne.n	800e386 <vQueueDelete+0x2a>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	60bb      	str	r3, [r7, #8]
}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	e7fd      	b.n	800e382 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f000 f946 	bl	800e618 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e392:	2b00      	cmp	r3, #0
 800e394:	d102      	bne.n	800e39c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f001 ff1e 	bl	80101d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e39c:	bf00      	nop
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b086      	sub	sp, #24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d10d      	bne.n	800e3de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d14d      	bne.n	800e466 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 ffc0 	bl	800f354 <xTaskPriorityDisinherit>
 800e3d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	609a      	str	r2, [r3, #8]
 800e3dc:	e043      	b.n	800e466 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d119      	bne.n	800e418 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6858      	ldr	r0, [r3, #4]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	68b9      	ldr	r1, [r7, #8]
 800e3f0:	f002 febf 	bl	8011172 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	685a      	ldr	r2, [r3, #4]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3fc:	441a      	add	r2, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	685a      	ldr	r2, [r3, #4]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d32b      	bcc.n	800e466 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	605a      	str	r2, [r3, #4]
 800e416:	e026      	b.n	800e466 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	68d8      	ldr	r0, [r3, #12]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e420:	461a      	mov	r2, r3
 800e422:	68b9      	ldr	r1, [r7, #8]
 800e424:	f002 fea5 	bl	8011172 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	68da      	ldr	r2, [r3, #12]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e430:	425b      	negs	r3, r3
 800e432:	441a      	add	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	68da      	ldr	r2, [r3, #12]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	429a      	cmp	r2, r3
 800e442:	d207      	bcs.n	800e454 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	689a      	ldr	r2, [r3, #8]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e44c:	425b      	negs	r3, r3
 800e44e:	441a      	add	r2, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b02      	cmp	r3, #2
 800e458:	d105      	bne.n	800e466 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d002      	beq.n	800e466 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	3b01      	subs	r3, #1
 800e464:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e46e:	697b      	ldr	r3, [r7, #20]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e486:	2b00      	cmp	r3, #0
 800e488:	d018      	beq.n	800e4bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	68da      	ldr	r2, [r3, #12]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e492:	441a      	add	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	68da      	ldr	r2, [r3, #12]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d303      	bcc.n	800e4ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	68d9      	ldr	r1, [r3, #12]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	6838      	ldr	r0, [r7, #0]
 800e4b8:	f002 fe5b 	bl	8011172 <memcpy>
	}
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e4cc:	f001 fc94 	bl	800fdf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e4d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e4d8:	e011      	b.n	800e4fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d012      	beq.n	800e508 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	3324      	adds	r3, #36	@ 0x24
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f000 fd50 	bl	800ef8c <xTaskRemoveFromEventList>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e4f2:	f000 fe29 	bl	800f148 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e502:	2b00      	cmp	r3, #0
 800e504:	dce9      	bgt.n	800e4da <prvUnlockQueue+0x16>
 800e506:	e000      	b.n	800e50a <prvUnlockQueue+0x46>
					break;
 800e508:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	22ff      	movs	r2, #255	@ 0xff
 800e50e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e512:	f001 fca3 	bl	800fe5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e516:	f001 fc6f 	bl	800fdf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e520:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e522:	e011      	b.n	800e548 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d012      	beq.n	800e552 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	3310      	adds	r3, #16
 800e530:	4618      	mov	r0, r3
 800e532:	f000 fd2b 	bl	800ef8c <xTaskRemoveFromEventList>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e53c:	f000 fe04 	bl	800f148 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e540:	7bbb      	ldrb	r3, [r7, #14]
 800e542:	3b01      	subs	r3, #1
 800e544:	b2db      	uxtb	r3, r3
 800e546:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	dce9      	bgt.n	800e524 <prvUnlockQueue+0x60>
 800e550:	e000      	b.n	800e554 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e552:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	22ff      	movs	r2, #255	@ 0xff
 800e558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e55c:	f001 fc7e 	bl	800fe5c <vPortExitCritical>
}
 800e560:	bf00      	nop
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e570:	f001 fc42 	bl	800fdf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d102      	bne.n	800e582 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e57c:	2301      	movs	r3, #1
 800e57e:	60fb      	str	r3, [r7, #12]
 800e580:	e001      	b.n	800e586 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e582:	2300      	movs	r3, #0
 800e584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e586:	f001 fc69 	bl	800fe5c <vPortExitCritical>

	return xReturn;
 800e58a:	68fb      	ldr	r3, [r7, #12]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e59c:	f001 fc2c 	bl	800fdf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d102      	bne.n	800e5b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	60fb      	str	r3, [r7, #12]
 800e5b0:	e001      	b.n	800e5b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5b6:	f001 fc51 	bl	800fe5c <vPortExitCritical>

	return xReturn;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	e014      	b.n	800e5fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e5d4:	4a0f      	ldr	r2, [pc, #60]	@ (800e614 <vQueueAddToRegistry+0x50>)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10b      	bne.n	800e5f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e5e0:	490c      	ldr	r1, [pc, #48]	@ (800e614 <vQueueAddToRegistry+0x50>)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e5ea:	4a0a      	ldr	r2, [pc, #40]	@ (800e614 <vQueueAddToRegistry+0x50>)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	00db      	lsls	r3, r3, #3
 800e5f0:	4413      	add	r3, r2
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e5f6:	e006      	b.n	800e606 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	60fb      	str	r3, [r7, #12]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2b07      	cmp	r3, #7
 800e602:	d9e7      	bls.n	800e5d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e604:	bf00      	nop
 800e606:	bf00      	nop
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	24009784 	.word	0x24009784

0800e618 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e618:	b480      	push	{r7}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e620:	2300      	movs	r3, #0
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	e016      	b.n	800e654 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e626:	4a10      	ldr	r2, [pc, #64]	@ (800e668 <vQueueUnregisterQueue+0x50>)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	00db      	lsls	r3, r3, #3
 800e62c:	4413      	add	r3, r2
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	429a      	cmp	r2, r3
 800e634:	d10b      	bne.n	800e64e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e636:	4a0c      	ldr	r2, [pc, #48]	@ (800e668 <vQueueUnregisterQueue+0x50>)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2100      	movs	r1, #0
 800e63c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e640:	4a09      	ldr	r2, [pc, #36]	@ (800e668 <vQueueUnregisterQueue+0x50>)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	00db      	lsls	r3, r3, #3
 800e646:	4413      	add	r3, r2
 800e648:	2200      	movs	r2, #0
 800e64a:	605a      	str	r2, [r3, #4]
				break;
 800e64c:	e006      	b.n	800e65c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	3301      	adds	r3, #1
 800e652:	60fb      	str	r3, [r7, #12]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b07      	cmp	r3, #7
 800e658:	d9e5      	bls.n	800e626 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e65a:	bf00      	nop
 800e65c:	bf00      	nop
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	24009784 	.word	0x24009784

0800e66c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e67c:	f001 fbbc 	bl	800fdf8 <vPortEnterCritical>
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e686:	b25b      	sxtb	r3, r3
 800e688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68c:	d103      	bne.n	800e696 <vQueueWaitForMessageRestricted+0x2a>
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2200      	movs	r2, #0
 800e692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e69c:	b25b      	sxtb	r3, r3
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a2:	d103      	bne.n	800e6ac <vQueueWaitForMessageRestricted+0x40>
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e6ac:	f001 fbd6 	bl	800fe5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	3324      	adds	r3, #36	@ 0x24
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	68b9      	ldr	r1, [r7, #8]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f000 fc37 	bl	800ef34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e6c6:	6978      	ldr	r0, [r7, #20]
 800e6c8:	f7ff fefc 	bl	800e4c4 <prvUnlockQueue>
	}
 800e6cc:	bf00      	nop
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08e      	sub	sp, #56	@ 0x38
 800e6d8:	af04      	add	r7, sp, #16
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d10b      	bne.n	800e700 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	623b      	str	r3, [r7, #32]
}
 800e6fa:	bf00      	nop
 800e6fc:	bf00      	nop
 800e6fe:	e7fd      	b.n	800e6fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e702:	2b00      	cmp	r3, #0
 800e704:	d10b      	bne.n	800e71e <xTaskCreateStatic+0x4a>
	__asm volatile
 800e706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70a:	f383 8811 	msr	BASEPRI, r3
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	f3bf 8f4f 	dsb	sy
 800e716:	61fb      	str	r3, [r7, #28]
}
 800e718:	bf00      	nop
 800e71a:	bf00      	nop
 800e71c:	e7fd      	b.n	800e71a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e71e:	23a8      	movs	r3, #168	@ 0xa8
 800e720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	2ba8      	cmp	r3, #168	@ 0xa8
 800e726:	d00b      	beq.n	800e740 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72c:	f383 8811 	msr	BASEPRI, r3
 800e730:	f3bf 8f6f 	isb	sy
 800e734:	f3bf 8f4f 	dsb	sy
 800e738:	61bb      	str	r3, [r7, #24]
}
 800e73a:	bf00      	nop
 800e73c:	bf00      	nop
 800e73e:	e7fd      	b.n	800e73c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e740:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01e      	beq.n	800e786 <xTaskCreateStatic+0xb2>
 800e748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d01b      	beq.n	800e786 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e750:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e756:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	2202      	movs	r2, #2
 800e75c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e760:	2300      	movs	r3, #0
 800e762:	9303      	str	r3, [sp, #12]
 800e764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e766:	9302      	str	r3, [sp, #8]
 800e768:	f107 0314 	add.w	r3, r7, #20
 800e76c:	9301      	str	r3, [sp, #4]
 800e76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	68b9      	ldr	r1, [r7, #8]
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f000 f851 	bl	800e820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e77e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e780:	f000 f8f6 	bl	800e970 <prvAddNewTaskToReadyList>
 800e784:	e001      	b.n	800e78a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e786:	2300      	movs	r3, #0
 800e788:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e78a:	697b      	ldr	r3, [r7, #20]
	}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3728      	adds	r7, #40	@ 0x28
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e794:	b580      	push	{r7, lr}
 800e796:	b08c      	sub	sp, #48	@ 0x30
 800e798:	af04      	add	r7, sp, #16
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	603b      	str	r3, [r7, #0]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7a4:	88fb      	ldrh	r3, [r7, #6]
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f001 fc47 	bl	801003c <pvPortMalloc>
 800e7ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00e      	beq.n	800e7d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e7b6:	20a8      	movs	r0, #168	@ 0xa8
 800e7b8:	f001 fc40 	bl	801003c <pvPortMalloc>
 800e7bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d003      	beq.n	800e7cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7ca:	e005      	b.n	800e7d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e7cc:	6978      	ldr	r0, [r7, #20]
 800e7ce:	f001 fd03 	bl	80101d8 <vPortFree>
 800e7d2:	e001      	b.n	800e7d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d017      	beq.n	800e80e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e7e6:	88fa      	ldrh	r2, [r7, #6]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9303      	str	r3, [sp, #12]
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	9302      	str	r3, [sp, #8]
 800e7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7f2:	9301      	str	r3, [sp, #4]
 800e7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	68b9      	ldr	r1, [r7, #8]
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f000 f80f 	bl	800e820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e802:	69f8      	ldr	r0, [r7, #28]
 800e804:	f000 f8b4 	bl	800e970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e808:	2301      	movs	r3, #1
 800e80a:	61bb      	str	r3, [r7, #24]
 800e80c:	e002      	b.n	800e814 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e80e:	f04f 33ff 	mov.w	r3, #4294967295
 800e812:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e814:	69bb      	ldr	r3, [r7, #24]
	}
 800e816:	4618      	mov	r0, r3
 800e818:	3720      	adds	r7, #32
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
	...

0800e820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b088      	sub	sp, #32
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
 800e82c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e830:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	461a      	mov	r2, r3
 800e838:	21a5      	movs	r1, #165	@ 0xa5
 800e83a:	f002 fbbd 	bl	8010fb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e842:	6879      	ldr	r1, [r7, #4]
 800e844:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e848:	440b      	add	r3, r1
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	4413      	add	r3, r2
 800e84e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	f023 0307 	bic.w	r3, r3, #7
 800e856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	f003 0307 	and.w	r3, r3, #7
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00b      	beq.n	800e87a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e866:	f383 8811 	msr	BASEPRI, r3
 800e86a:	f3bf 8f6f 	isb	sy
 800e86e:	f3bf 8f4f 	dsb	sy
 800e872:	617b      	str	r3, [r7, #20]
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d01f      	beq.n	800e8c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e880:	2300      	movs	r3, #0
 800e882:	61fb      	str	r3, [r7, #28]
 800e884:	e012      	b.n	800e8ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e886:	68ba      	ldr	r2, [r7, #8]
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	4413      	add	r3, r2
 800e88c:	7819      	ldrb	r1, [r3, #0]
 800e88e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	4413      	add	r3, r2
 800e894:	3334      	adds	r3, #52	@ 0x34
 800e896:	460a      	mov	r2, r1
 800e898:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	4413      	add	r3, r2
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d006      	beq.n	800e8b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	61fb      	str	r3, [r7, #28]
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	2b0f      	cmp	r3, #15
 800e8b0:	d9e9      	bls.n	800e886 <prvInitialiseNewTask+0x66>
 800e8b2:	e000      	b.n	800e8b6 <prvInitialiseNewTask+0x96>
			{
				break;
 800e8b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e8be:	e003      	b.n	800e8c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ca:	2b37      	cmp	r3, #55	@ 0x37
 800e8cc:	d901      	bls.n	800e8d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e8ce:	2337      	movs	r3, #55	@ 0x37
 800e8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe ffdd 	bl	800d8a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f0:	3318      	adds	r3, #24
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe ffd8 	bl	800d8a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e900:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e906:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e90c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e910:	2200      	movs	r2, #0
 800e912:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e920:	3354      	adds	r3, #84	@ 0x54
 800e922:	224c      	movs	r2, #76	@ 0x4c
 800e924:	2100      	movs	r1, #0
 800e926:	4618      	mov	r0, r3
 800e928:	f002 fb46 	bl	8010fb8 <memset>
 800e92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e92e:	4a0d      	ldr	r2, [pc, #52]	@ (800e964 <prvInitialiseNewTask+0x144>)
 800e930:	659a      	str	r2, [r3, #88]	@ 0x58
 800e932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e934:	4a0c      	ldr	r2, [pc, #48]	@ (800e968 <prvInitialiseNewTask+0x148>)
 800e936:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93a:	4a0c      	ldr	r2, [pc, #48]	@ (800e96c <prvInitialiseNewTask+0x14c>)
 800e93c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e93e:	683a      	ldr	r2, [r7, #0]
 800e940:	68f9      	ldr	r1, [r7, #12]
 800e942:	69b8      	ldr	r0, [r7, #24]
 800e944:	f001 f924 	bl	800fb90 <pxPortInitialiseStack>
 800e948:	4602      	mov	r2, r0
 800e94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e95a:	bf00      	nop
 800e95c:	3720      	adds	r7, #32
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	2400da18 	.word	0x2400da18
 800e968:	2400da80 	.word	0x2400da80
 800e96c:	2400dae8 	.word	0x2400dae8

0800e970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e978:	f001 fa3e 	bl	800fdf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e97c:	4b2d      	ldr	r3, [pc, #180]	@ (800ea34 <prvAddNewTaskToReadyList+0xc4>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3301      	adds	r3, #1
 800e982:	4a2c      	ldr	r2, [pc, #176]	@ (800ea34 <prvAddNewTaskToReadyList+0xc4>)
 800e984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e986:	4b2c      	ldr	r3, [pc, #176]	@ (800ea38 <prvAddNewTaskToReadyList+0xc8>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d109      	bne.n	800e9a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e98e:	4a2a      	ldr	r2, [pc, #168]	@ (800ea38 <prvAddNewTaskToReadyList+0xc8>)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e994:	4b27      	ldr	r3, [pc, #156]	@ (800ea34 <prvAddNewTaskToReadyList+0xc4>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d110      	bne.n	800e9be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e99c:	f000 fbf8 	bl	800f190 <prvInitialiseTaskLists>
 800e9a0:	e00d      	b.n	800e9be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e9a2:	4b26      	ldr	r3, [pc, #152]	@ (800ea3c <prvAddNewTaskToReadyList+0xcc>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d109      	bne.n	800e9be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e9aa:	4b23      	ldr	r3, [pc, #140]	@ (800ea38 <prvAddNewTaskToReadyList+0xc8>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d802      	bhi.n	800e9be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e9b8:	4a1f      	ldr	r2, [pc, #124]	@ (800ea38 <prvAddNewTaskToReadyList+0xc8>)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e9be:	4b20      	ldr	r3, [pc, #128]	@ (800ea40 <prvAddNewTaskToReadyList+0xd0>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	4a1e      	ldr	r2, [pc, #120]	@ (800ea40 <prvAddNewTaskToReadyList+0xd0>)
 800e9c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e9c8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea40 <prvAddNewTaskToReadyList+0xd0>)
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d4:	4b1b      	ldr	r3, [pc, #108]	@ (800ea44 <prvAddNewTaskToReadyList+0xd4>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d903      	bls.n	800e9e4 <prvAddNewTaskToReadyList+0x74>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9e0:	4a18      	ldr	r2, [pc, #96]	@ (800ea44 <prvAddNewTaskToReadyList+0xd4>)
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4413      	add	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4a15      	ldr	r2, [pc, #84]	@ (800ea48 <prvAddNewTaskToReadyList+0xd8>)
 800e9f2:	441a      	add	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	f7fe ff61 	bl	800d8c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea00:	f001 fa2c 	bl	800fe5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea04:	4b0d      	ldr	r3, [pc, #52]	@ (800ea3c <prvAddNewTaskToReadyList+0xcc>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00e      	beq.n	800ea2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea38 <prvAddNewTaskToReadyList+0xc8>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d207      	bcs.n	800ea2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea4c <prvAddNewTaskToReadyList+0xdc>)
 800ea1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	f3bf 8f4f 	dsb	sy
 800ea26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea2a:	bf00      	nop
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	24009c98 	.word	0x24009c98
 800ea38:	240097c4 	.word	0x240097c4
 800ea3c:	24009ca4 	.word	0x24009ca4
 800ea40:	24009cb4 	.word	0x24009cb4
 800ea44:	24009ca0 	.word	0x24009ca0
 800ea48:	240097c8 	.word	0x240097c8
 800ea4c:	e000ed04 	.word	0xe000ed04

0800ea50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b08a      	sub	sp, #40	@ 0x28
 800ea54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ea5e:	463a      	mov	r2, r7
 800ea60:	1d39      	adds	r1, r7, #4
 800ea62:	f107 0308 	add.w	r3, r7, #8
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe feca 	bl	800d800 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ea6c:	6839      	ldr	r1, [r7, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	9202      	str	r2, [sp, #8]
 800ea74:	9301      	str	r3, [sp, #4]
 800ea76:	2300      	movs	r3, #0
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	460a      	mov	r2, r1
 800ea7e:	4924      	ldr	r1, [pc, #144]	@ (800eb10 <vTaskStartScheduler+0xc0>)
 800ea80:	4824      	ldr	r0, [pc, #144]	@ (800eb14 <vTaskStartScheduler+0xc4>)
 800ea82:	f7ff fe27 	bl	800e6d4 <xTaskCreateStatic>
 800ea86:	4603      	mov	r3, r0
 800ea88:	4a23      	ldr	r2, [pc, #140]	@ (800eb18 <vTaskStartScheduler+0xc8>)
 800ea8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ea8c:	4b22      	ldr	r3, [pc, #136]	@ (800eb18 <vTaskStartScheduler+0xc8>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ea94:	2301      	movs	r3, #1
 800ea96:	617b      	str	r3, [r7, #20]
 800ea98:	e001      	b.n	800ea9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d102      	bne.n	800eaaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800eaa4:	f000 fd1a 	bl	800f4dc <xTimerCreateTimerTask>
 800eaa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d11b      	bne.n	800eae8 <vTaskStartScheduler+0x98>
	__asm volatile
 800eab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	613b      	str	r3, [r7, #16]
}
 800eac2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eac4:	4b15      	ldr	r3, [pc, #84]	@ (800eb1c <vTaskStartScheduler+0xcc>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	3354      	adds	r3, #84	@ 0x54
 800eaca:	4a15      	ldr	r2, [pc, #84]	@ (800eb20 <vTaskStartScheduler+0xd0>)
 800eacc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eace:	4b15      	ldr	r3, [pc, #84]	@ (800eb24 <vTaskStartScheduler+0xd4>)
 800ead0:	f04f 32ff 	mov.w	r2, #4294967295
 800ead4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ead6:	4b14      	ldr	r3, [pc, #80]	@ (800eb28 <vTaskStartScheduler+0xd8>)
 800ead8:	2201      	movs	r2, #1
 800eada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eadc:	4b13      	ldr	r3, [pc, #76]	@ (800eb2c <vTaskStartScheduler+0xdc>)
 800eade:	2200      	movs	r2, #0
 800eae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eae2:	f001 f8e5 	bl	800fcb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eae6:	e00f      	b.n	800eb08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaee:	d10b      	bne.n	800eb08 <vTaskStartScheduler+0xb8>
	__asm volatile
 800eaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	60fb      	str	r3, [r7, #12]
}
 800eb02:	bf00      	nop
 800eb04:	bf00      	nop
 800eb06:	e7fd      	b.n	800eb04 <vTaskStartScheduler+0xb4>
}
 800eb08:	bf00      	nop
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	08012d38 	.word	0x08012d38
 800eb14:	0800f161 	.word	0x0800f161
 800eb18:	24009cbc 	.word	0x24009cbc
 800eb1c:	240097c4 	.word	0x240097c4
 800eb20:	24000020 	.word	0x24000020
 800eb24:	24009cb8 	.word	0x24009cb8
 800eb28:	24009ca4 	.word	0x24009ca4
 800eb2c:	24009c9c 	.word	0x24009c9c

0800eb30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eb30:	b480      	push	{r7}
 800eb32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eb34:	4b04      	ldr	r3, [pc, #16]	@ (800eb48 <vTaskSuspendAll+0x18>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	4a03      	ldr	r2, [pc, #12]	@ (800eb48 <vTaskSuspendAll+0x18>)
 800eb3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eb3e:	bf00      	nop
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	24009cc0 	.word	0x24009cc0

0800eb4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eb52:	2300      	movs	r3, #0
 800eb54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eb5a:	4b42      	ldr	r3, [pc, #264]	@ (800ec64 <xTaskResumeAll+0x118>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d10b      	bne.n	800eb7a <xTaskResumeAll+0x2e>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	603b      	str	r3, [r7, #0]
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	e7fd      	b.n	800eb76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eb7a:	f001 f93d 	bl	800fdf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eb7e:	4b39      	ldr	r3, [pc, #228]	@ (800ec64 <xTaskResumeAll+0x118>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	4a37      	ldr	r2, [pc, #220]	@ (800ec64 <xTaskResumeAll+0x118>)
 800eb86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb88:	4b36      	ldr	r3, [pc, #216]	@ (800ec64 <xTaskResumeAll+0x118>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d162      	bne.n	800ec56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eb90:	4b35      	ldr	r3, [pc, #212]	@ (800ec68 <xTaskResumeAll+0x11c>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d05e      	beq.n	800ec56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb98:	e02f      	b.n	800ebfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb9a:	4b34      	ldr	r3, [pc, #208]	@ (800ec6c <xTaskResumeAll+0x120>)
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3318      	adds	r3, #24
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe fee8 	bl	800d97c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	3304      	adds	r3, #4
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe fee3 	bl	800d97c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebba:	4b2d      	ldr	r3, [pc, #180]	@ (800ec70 <xTaskResumeAll+0x124>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d903      	bls.n	800ebca <xTaskResumeAll+0x7e>
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc6:	4a2a      	ldr	r2, [pc, #168]	@ (800ec70 <xTaskResumeAll+0x124>)
 800ebc8:	6013      	str	r3, [r2, #0]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebce:	4613      	mov	r3, r2
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	4413      	add	r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4a27      	ldr	r2, [pc, #156]	@ (800ec74 <xTaskResumeAll+0x128>)
 800ebd8:	441a      	add	r2, r3
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3304      	adds	r3, #4
 800ebde:	4619      	mov	r1, r3
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	f7fe fe6e 	bl	800d8c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebea:	4b23      	ldr	r3, [pc, #140]	@ (800ec78 <xTaskResumeAll+0x12c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d302      	bcc.n	800ebfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ebf4:	4b21      	ldr	r3, [pc, #132]	@ (800ec7c <xTaskResumeAll+0x130>)
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ebfa:	4b1c      	ldr	r3, [pc, #112]	@ (800ec6c <xTaskResumeAll+0x120>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1cb      	bne.n	800eb9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d001      	beq.n	800ec0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ec08:	f000 fb66 	bl	800f2d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ec0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ec80 <xTaskResumeAll+0x134>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d010      	beq.n	800ec3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ec18:	f000 f846 	bl	800eca8 <xTaskIncrementTick>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d002      	beq.n	800ec28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ec22:	4b16      	ldr	r3, [pc, #88]	@ (800ec7c <xTaskResumeAll+0x130>)
 800ec24:	2201      	movs	r2, #1
 800ec26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1f1      	bne.n	800ec18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ec34:	4b12      	ldr	r3, [pc, #72]	@ (800ec80 <xTaskResumeAll+0x134>)
 800ec36:	2200      	movs	r2, #0
 800ec38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ec3a:	4b10      	ldr	r3, [pc, #64]	@ (800ec7c <xTaskResumeAll+0x130>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d009      	beq.n	800ec56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ec42:	2301      	movs	r3, #1
 800ec44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ec46:	4b0f      	ldr	r3, [pc, #60]	@ (800ec84 <xTaskResumeAll+0x138>)
 800ec48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec56:	f001 f901 	bl	800fe5c <vPortExitCritical>

	return xAlreadyYielded;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3710      	adds	r7, #16
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	24009cc0 	.word	0x24009cc0
 800ec68:	24009c98 	.word	0x24009c98
 800ec6c:	24009c58 	.word	0x24009c58
 800ec70:	24009ca0 	.word	0x24009ca0
 800ec74:	240097c8 	.word	0x240097c8
 800ec78:	240097c4 	.word	0x240097c4
 800ec7c:	24009cac 	.word	0x24009cac
 800ec80:	24009ca8 	.word	0x24009ca8
 800ec84:	e000ed04 	.word	0xe000ed04

0800ec88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ec8e:	4b05      	ldr	r3, [pc, #20]	@ (800eca4 <xTaskGetTickCount+0x1c>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ec94:	687b      	ldr	r3, [r7, #4]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	24009c9c 	.word	0x24009c9c

0800eca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecb2:	4b4f      	ldr	r3, [pc, #316]	@ (800edf0 <xTaskIncrementTick+0x148>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f040 8090 	bne.w	800eddc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ecbc:	4b4d      	ldr	r3, [pc, #308]	@ (800edf4 <xTaskIncrementTick+0x14c>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ecc4:	4a4b      	ldr	r2, [pc, #300]	@ (800edf4 <xTaskIncrementTick+0x14c>)
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d121      	bne.n	800ed14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ecd0:	4b49      	ldr	r3, [pc, #292]	@ (800edf8 <xTaskIncrementTick+0x150>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00b      	beq.n	800ecf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	603b      	str	r3, [r7, #0]
}
 800ecec:	bf00      	nop
 800ecee:	bf00      	nop
 800ecf0:	e7fd      	b.n	800ecee <xTaskIncrementTick+0x46>
 800ecf2:	4b41      	ldr	r3, [pc, #260]	@ (800edf8 <xTaskIncrementTick+0x150>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	4b40      	ldr	r3, [pc, #256]	@ (800edfc <xTaskIncrementTick+0x154>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a3e      	ldr	r2, [pc, #248]	@ (800edf8 <xTaskIncrementTick+0x150>)
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	4a3e      	ldr	r2, [pc, #248]	@ (800edfc <xTaskIncrementTick+0x154>)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6013      	str	r3, [r2, #0]
 800ed06:	4b3e      	ldr	r3, [pc, #248]	@ (800ee00 <xTaskIncrementTick+0x158>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	4a3c      	ldr	r2, [pc, #240]	@ (800ee00 <xTaskIncrementTick+0x158>)
 800ed0e:	6013      	str	r3, [r2, #0]
 800ed10:	f000 fae2 	bl	800f2d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ed14:	4b3b      	ldr	r3, [pc, #236]	@ (800ee04 <xTaskIncrementTick+0x15c>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	693a      	ldr	r2, [r7, #16]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d349      	bcc.n	800edb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed1e:	4b36      	ldr	r3, [pc, #216]	@ (800edf8 <xTaskIncrementTick+0x150>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d104      	bne.n	800ed32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed28:	4b36      	ldr	r3, [pc, #216]	@ (800ee04 <xTaskIncrementTick+0x15c>)
 800ed2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2e:	601a      	str	r2, [r3, #0]
					break;
 800ed30:	e03f      	b.n	800edb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed32:	4b31      	ldr	r3, [pc, #196]	@ (800edf8 <xTaskIncrementTick+0x150>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d203      	bcs.n	800ed52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ed4a:	4a2e      	ldr	r2, [pc, #184]	@ (800ee04 <xTaskIncrementTick+0x15c>)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ed50:	e02f      	b.n	800edb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	3304      	adds	r3, #4
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fe fe10 	bl	800d97c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d004      	beq.n	800ed6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	3318      	adds	r3, #24
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fe fe07 	bl	800d97c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed72:	4b25      	ldr	r3, [pc, #148]	@ (800ee08 <xTaskIncrementTick+0x160>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d903      	bls.n	800ed82 <xTaskIncrementTick+0xda>
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7e:	4a22      	ldr	r2, [pc, #136]	@ (800ee08 <xTaskIncrementTick+0x160>)
 800ed80:	6013      	str	r3, [r2, #0]
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed86:	4613      	mov	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ee0c <xTaskIncrementTick+0x164>)
 800ed90:	441a      	add	r2, r3
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	3304      	adds	r3, #4
 800ed96:	4619      	mov	r1, r3
 800ed98:	4610      	mov	r0, r2
 800ed9a:	f7fe fd92 	bl	800d8c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eda2:	4b1b      	ldr	r3, [pc, #108]	@ (800ee10 <xTaskIncrementTick+0x168>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d3b8      	bcc.n	800ed1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800edac:	2301      	movs	r3, #1
 800edae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edb0:	e7b5      	b.n	800ed1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800edb2:	4b17      	ldr	r3, [pc, #92]	@ (800ee10 <xTaskIncrementTick+0x168>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb8:	4914      	ldr	r1, [pc, #80]	@ (800ee0c <xTaskIncrementTick+0x164>)
 800edba:	4613      	mov	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	440b      	add	r3, r1
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d901      	bls.n	800edce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800edca:	2301      	movs	r3, #1
 800edcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800edce:	4b11      	ldr	r3, [pc, #68]	@ (800ee14 <xTaskIncrementTick+0x16c>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d007      	beq.n	800ede6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800edd6:	2301      	movs	r3, #1
 800edd8:	617b      	str	r3, [r7, #20]
 800edda:	e004      	b.n	800ede6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eddc:	4b0e      	ldr	r3, [pc, #56]	@ (800ee18 <xTaskIncrementTick+0x170>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	3301      	adds	r3, #1
 800ede2:	4a0d      	ldr	r2, [pc, #52]	@ (800ee18 <xTaskIncrementTick+0x170>)
 800ede4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ede6:	697b      	ldr	r3, [r7, #20]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3718      	adds	r7, #24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	24009cc0 	.word	0x24009cc0
 800edf4:	24009c9c 	.word	0x24009c9c
 800edf8:	24009c50 	.word	0x24009c50
 800edfc:	24009c54 	.word	0x24009c54
 800ee00:	24009cb0 	.word	0x24009cb0
 800ee04:	24009cb8 	.word	0x24009cb8
 800ee08:	24009ca0 	.word	0x24009ca0
 800ee0c:	240097c8 	.word	0x240097c8
 800ee10:	240097c4 	.word	0x240097c4
 800ee14:	24009cac 	.word	0x24009cac
 800ee18:	24009ca8 	.word	0x24009ca8

0800ee1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ee22:	4b2b      	ldr	r3, [pc, #172]	@ (800eed0 <vTaskSwitchContext+0xb4>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d003      	beq.n	800ee32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ee2a:	4b2a      	ldr	r3, [pc, #168]	@ (800eed4 <vTaskSwitchContext+0xb8>)
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ee30:	e047      	b.n	800eec2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ee32:	4b28      	ldr	r3, [pc, #160]	@ (800eed4 <vTaskSwitchContext+0xb8>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee38:	4b27      	ldr	r3, [pc, #156]	@ (800eed8 <vTaskSwitchContext+0xbc>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	60fb      	str	r3, [r7, #12]
 800ee3e:	e011      	b.n	800ee64 <vTaskSwitchContext+0x48>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10b      	bne.n	800ee5e <vTaskSwitchContext+0x42>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	607b      	str	r3, [r7, #4]
}
 800ee58:	bf00      	nop
 800ee5a:	bf00      	nop
 800ee5c:	e7fd      	b.n	800ee5a <vTaskSwitchContext+0x3e>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	491d      	ldr	r1, [pc, #116]	@ (800eedc <vTaskSwitchContext+0xc0>)
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	4413      	add	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	440b      	add	r3, r1
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0e3      	beq.n	800ee40 <vTaskSwitchContext+0x24>
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	4413      	add	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4a16      	ldr	r2, [pc, #88]	@ (800eedc <vTaskSwitchContext+0xc0>)
 800ee84:	4413      	add	r3, r2
 800ee86:	60bb      	str	r3, [r7, #8]
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	605a      	str	r2, [r3, #4]
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	685a      	ldr	r2, [r3, #4]
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	3308      	adds	r3, #8
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d104      	bne.n	800eea8 <vTaskSwitchContext+0x8c>
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	685a      	ldr	r2, [r3, #4]
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	605a      	str	r2, [r3, #4]
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	4a0c      	ldr	r2, [pc, #48]	@ (800eee0 <vTaskSwitchContext+0xc4>)
 800eeb0:	6013      	str	r3, [r2, #0]
 800eeb2:	4a09      	ldr	r2, [pc, #36]	@ (800eed8 <vTaskSwitchContext+0xbc>)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eeb8:	4b09      	ldr	r3, [pc, #36]	@ (800eee0 <vTaskSwitchContext+0xc4>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	3354      	adds	r3, #84	@ 0x54
 800eebe:	4a09      	ldr	r2, [pc, #36]	@ (800eee4 <vTaskSwitchContext+0xc8>)
 800eec0:	6013      	str	r3, [r2, #0]
}
 800eec2:	bf00      	nop
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	24009cc0 	.word	0x24009cc0
 800eed4:	24009cac 	.word	0x24009cac
 800eed8:	24009ca0 	.word	0x24009ca0
 800eedc:	240097c8 	.word	0x240097c8
 800eee0:	240097c4 	.word	0x240097c4
 800eee4:	24000020 	.word	0x24000020

0800eee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d10b      	bne.n	800ef10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800eef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eefc:	f383 8811 	msr	BASEPRI, r3
 800ef00:	f3bf 8f6f 	isb	sy
 800ef04:	f3bf 8f4f 	dsb	sy
 800ef08:	60fb      	str	r3, [r7, #12]
}
 800ef0a:	bf00      	nop
 800ef0c:	bf00      	nop
 800ef0e:	e7fd      	b.n	800ef0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ef10:	4b07      	ldr	r3, [pc, #28]	@ (800ef30 <vTaskPlaceOnEventList+0x48>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3318      	adds	r3, #24
 800ef16:	4619      	mov	r1, r3
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f7fe fcf6 	bl	800d90a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef1e:	2101      	movs	r1, #1
 800ef20:	6838      	ldr	r0, [r7, #0]
 800ef22:	f000 fa87 	bl	800f434 <prvAddCurrentTaskToDelayedList>
}
 800ef26:	bf00      	nop
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	240097c4 	.word	0x240097c4

0800ef34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d10b      	bne.n	800ef5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ef46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef4a:	f383 8811 	msr	BASEPRI, r3
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	617b      	str	r3, [r7, #20]
}
 800ef58:	bf00      	nop
 800ef5a:	bf00      	nop
 800ef5c:	e7fd      	b.n	800ef5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ef5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ef88 <vTaskPlaceOnEventListRestricted+0x54>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3318      	adds	r3, #24
 800ef64:	4619      	mov	r1, r3
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f7fe fcab 	bl	800d8c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ef72:	f04f 33ff 	mov.w	r3, #4294967295
 800ef76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ef78:	6879      	ldr	r1, [r7, #4]
 800ef7a:	68b8      	ldr	r0, [r7, #8]
 800ef7c:	f000 fa5a 	bl	800f434 <prvAddCurrentTaskToDelayedList>
	}
 800ef80:	bf00      	nop
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	240097c4 	.word	0x240097c4

0800ef8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d10b      	bne.n	800efba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800efa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa6:	f383 8811 	msr	BASEPRI, r3
 800efaa:	f3bf 8f6f 	isb	sy
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	60fb      	str	r3, [r7, #12]
}
 800efb4:	bf00      	nop
 800efb6:	bf00      	nop
 800efb8:	e7fd      	b.n	800efb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	3318      	adds	r3, #24
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fe fcdc 	bl	800d97c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efc4:	4b1d      	ldr	r3, [pc, #116]	@ (800f03c <xTaskRemoveFromEventList+0xb0>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d11d      	bne.n	800f008 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	3304      	adds	r3, #4
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fe fcd3 	bl	800d97c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efda:	4b19      	ldr	r3, [pc, #100]	@ (800f040 <xTaskRemoveFromEventList+0xb4>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d903      	bls.n	800efea <xTaskRemoveFromEventList+0x5e>
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe6:	4a16      	ldr	r2, [pc, #88]	@ (800f040 <xTaskRemoveFromEventList+0xb4>)
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efee:	4613      	mov	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	4a13      	ldr	r2, [pc, #76]	@ (800f044 <xTaskRemoveFromEventList+0xb8>)
 800eff8:	441a      	add	r2, r3
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	3304      	adds	r3, #4
 800effe:	4619      	mov	r1, r3
 800f000:	4610      	mov	r0, r2
 800f002:	f7fe fc5e 	bl	800d8c2 <vListInsertEnd>
 800f006:	e005      	b.n	800f014 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	3318      	adds	r3, #24
 800f00c:	4619      	mov	r1, r3
 800f00e:	480e      	ldr	r0, [pc, #56]	@ (800f048 <xTaskRemoveFromEventList+0xbc>)
 800f010:	f7fe fc57 	bl	800d8c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f018:	4b0c      	ldr	r3, [pc, #48]	@ (800f04c <xTaskRemoveFromEventList+0xc0>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f01e:	429a      	cmp	r2, r3
 800f020:	d905      	bls.n	800f02e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f022:	2301      	movs	r3, #1
 800f024:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f026:	4b0a      	ldr	r3, [pc, #40]	@ (800f050 <xTaskRemoveFromEventList+0xc4>)
 800f028:	2201      	movs	r2, #1
 800f02a:	601a      	str	r2, [r3, #0]
 800f02c:	e001      	b.n	800f032 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f02e:	2300      	movs	r3, #0
 800f030:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f032:	697b      	ldr	r3, [r7, #20]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	24009cc0 	.word	0x24009cc0
 800f040:	24009ca0 	.word	0x24009ca0
 800f044:	240097c8 	.word	0x240097c8
 800f048:	24009c58 	.word	0x24009c58
 800f04c:	240097c4 	.word	0x240097c4
 800f050:	24009cac 	.word	0x24009cac

0800f054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f05c:	4b06      	ldr	r3, [pc, #24]	@ (800f078 <vTaskInternalSetTimeOutState+0x24>)
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f064:	4b05      	ldr	r3, [pc, #20]	@ (800f07c <vTaskInternalSetTimeOutState+0x28>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	605a      	str	r2, [r3, #4]
}
 800f06c:	bf00      	nop
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	24009cb0 	.word	0x24009cb0
 800f07c:	24009c9c 	.word	0x24009c9c

0800f080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b088      	sub	sp, #32
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d10b      	bne.n	800f0a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f094:	f383 8811 	msr	BASEPRI, r3
 800f098:	f3bf 8f6f 	isb	sy
 800f09c:	f3bf 8f4f 	dsb	sy
 800f0a0:	613b      	str	r3, [r7, #16]
}
 800f0a2:	bf00      	nop
 800f0a4:	bf00      	nop
 800f0a6:	e7fd      	b.n	800f0a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d10b      	bne.n	800f0c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b2:	f383 8811 	msr	BASEPRI, r3
 800f0b6:	f3bf 8f6f 	isb	sy
 800f0ba:	f3bf 8f4f 	dsb	sy
 800f0be:	60fb      	str	r3, [r7, #12]
}
 800f0c0:	bf00      	nop
 800f0c2:	bf00      	nop
 800f0c4:	e7fd      	b.n	800f0c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f0c6:	f000 fe97 	bl	800fdf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f0ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f140 <xTaskCheckForTimeOut+0xc0>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	69ba      	ldr	r2, [r7, #24]
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e2:	d102      	bne.n	800f0ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	61fb      	str	r3, [r7, #28]
 800f0e8:	e023      	b.n	800f132 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	4b15      	ldr	r3, [pc, #84]	@ (800f144 <xTaskCheckForTimeOut+0xc4>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d007      	beq.n	800f106 <xTaskCheckForTimeOut+0x86>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	69ba      	ldr	r2, [r7, #24]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d302      	bcc.n	800f106 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f100:	2301      	movs	r3, #1
 800f102:	61fb      	str	r3, [r7, #28]
 800f104:	e015      	b.n	800f132 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	697a      	ldr	r2, [r7, #20]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d20b      	bcs.n	800f128 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	1ad2      	subs	r2, r2, r3
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7ff ff99 	bl	800f054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f122:	2300      	movs	r3, #0
 800f124:	61fb      	str	r3, [r7, #28]
 800f126:	e004      	b.n	800f132 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	2200      	movs	r2, #0
 800f12c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f12e:	2301      	movs	r3, #1
 800f130:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f132:	f000 fe93 	bl	800fe5c <vPortExitCritical>

	return xReturn;
 800f136:	69fb      	ldr	r3, [r7, #28]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3720      	adds	r7, #32
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	24009c9c 	.word	0x24009c9c
 800f144:	24009cb0 	.word	0x24009cb0

0800f148 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f148:	b480      	push	{r7}
 800f14a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f14c:	4b03      	ldr	r3, [pc, #12]	@ (800f15c <vTaskMissedYield+0x14>)
 800f14e:	2201      	movs	r2, #1
 800f150:	601a      	str	r2, [r3, #0]
}
 800f152:	bf00      	nop
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	24009cac 	.word	0x24009cac

0800f160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f168:	f000 f852 	bl	800f210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f16c:	4b06      	ldr	r3, [pc, #24]	@ (800f188 <prvIdleTask+0x28>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d9f9      	bls.n	800f168 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f174:	4b05      	ldr	r3, [pc, #20]	@ (800f18c <prvIdleTask+0x2c>)
 800f176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f184:	e7f0      	b.n	800f168 <prvIdleTask+0x8>
 800f186:	bf00      	nop
 800f188:	240097c8 	.word	0x240097c8
 800f18c:	e000ed04 	.word	0xe000ed04

0800f190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f196:	2300      	movs	r3, #0
 800f198:	607b      	str	r3, [r7, #4]
 800f19a:	e00c      	b.n	800f1b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	4413      	add	r3, r2
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	4a12      	ldr	r2, [pc, #72]	@ (800f1f0 <prvInitialiseTaskLists+0x60>)
 800f1a8:	4413      	add	r3, r2
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fe fb5c 	bl	800d868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	607b      	str	r3, [r7, #4]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2b37      	cmp	r3, #55	@ 0x37
 800f1ba:	d9ef      	bls.n	800f19c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f1bc:	480d      	ldr	r0, [pc, #52]	@ (800f1f4 <prvInitialiseTaskLists+0x64>)
 800f1be:	f7fe fb53 	bl	800d868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f1c2:	480d      	ldr	r0, [pc, #52]	@ (800f1f8 <prvInitialiseTaskLists+0x68>)
 800f1c4:	f7fe fb50 	bl	800d868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f1c8:	480c      	ldr	r0, [pc, #48]	@ (800f1fc <prvInitialiseTaskLists+0x6c>)
 800f1ca:	f7fe fb4d 	bl	800d868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f1ce:	480c      	ldr	r0, [pc, #48]	@ (800f200 <prvInitialiseTaskLists+0x70>)
 800f1d0:	f7fe fb4a 	bl	800d868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f1d4:	480b      	ldr	r0, [pc, #44]	@ (800f204 <prvInitialiseTaskLists+0x74>)
 800f1d6:	f7fe fb47 	bl	800d868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f1da:	4b0b      	ldr	r3, [pc, #44]	@ (800f208 <prvInitialiseTaskLists+0x78>)
 800f1dc:	4a05      	ldr	r2, [pc, #20]	@ (800f1f4 <prvInitialiseTaskLists+0x64>)
 800f1de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f1e0:	4b0a      	ldr	r3, [pc, #40]	@ (800f20c <prvInitialiseTaskLists+0x7c>)
 800f1e2:	4a05      	ldr	r2, [pc, #20]	@ (800f1f8 <prvInitialiseTaskLists+0x68>)
 800f1e4:	601a      	str	r2, [r3, #0]
}
 800f1e6:	bf00      	nop
 800f1e8:	3708      	adds	r7, #8
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	240097c8 	.word	0x240097c8
 800f1f4:	24009c28 	.word	0x24009c28
 800f1f8:	24009c3c 	.word	0x24009c3c
 800f1fc:	24009c58 	.word	0x24009c58
 800f200:	24009c6c 	.word	0x24009c6c
 800f204:	24009c84 	.word	0x24009c84
 800f208:	24009c50 	.word	0x24009c50
 800f20c:	24009c54 	.word	0x24009c54

0800f210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f216:	e019      	b.n	800f24c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f218:	f000 fdee 	bl	800fdf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f21c:	4b10      	ldr	r3, [pc, #64]	@ (800f260 <prvCheckTasksWaitingTermination+0x50>)
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	3304      	adds	r3, #4
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fe fba7 	bl	800d97c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f22e:	4b0d      	ldr	r3, [pc, #52]	@ (800f264 <prvCheckTasksWaitingTermination+0x54>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	3b01      	subs	r3, #1
 800f234:	4a0b      	ldr	r2, [pc, #44]	@ (800f264 <prvCheckTasksWaitingTermination+0x54>)
 800f236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f238:	4b0b      	ldr	r3, [pc, #44]	@ (800f268 <prvCheckTasksWaitingTermination+0x58>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	3b01      	subs	r3, #1
 800f23e:	4a0a      	ldr	r2, [pc, #40]	@ (800f268 <prvCheckTasksWaitingTermination+0x58>)
 800f240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f242:	f000 fe0b 	bl	800fe5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f810 	bl	800f26c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f24c:	4b06      	ldr	r3, [pc, #24]	@ (800f268 <prvCheckTasksWaitingTermination+0x58>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1e1      	bne.n	800f218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f254:	bf00      	nop
 800f256:	bf00      	nop
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	24009c6c 	.word	0x24009c6c
 800f264:	24009c98 	.word	0x24009c98
 800f268:	24009c80 	.word	0x24009c80

0800f26c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	3354      	adds	r3, #84	@ 0x54
 800f278:	4618      	mov	r0, r3
 800f27a:	f001 feb9 	bl	8010ff0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f284:	2b00      	cmp	r3, #0
 800f286:	d108      	bne.n	800f29a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f28c:	4618      	mov	r0, r3
 800f28e:	f000 ffa3 	bl	80101d8 <vPortFree>
				vPortFree( pxTCB );
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 ffa0 	bl	80101d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f298:	e019      	b.n	800f2ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d103      	bne.n	800f2ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 ff97 	bl	80101d8 <vPortFree>
	}
 800f2aa:	e010      	b.n	800f2ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d00b      	beq.n	800f2ce <prvDeleteTCB+0x62>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	60fb      	str	r3, [r7, #12]
}
 800f2c8:	bf00      	nop
 800f2ca:	bf00      	nop
 800f2cc:	e7fd      	b.n	800f2ca <prvDeleteTCB+0x5e>
	}
 800f2ce:	bf00      	nop
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
	...

0800f2d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2de:	4b0c      	ldr	r3, [pc, #48]	@ (800f310 <prvResetNextTaskUnblockTime+0x38>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d104      	bne.n	800f2f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f314 <prvResetNextTaskUnblockTime+0x3c>)
 800f2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f2f0:	e008      	b.n	800f304 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2f2:	4b07      	ldr	r3, [pc, #28]	@ (800f310 <prvResetNextTaskUnblockTime+0x38>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	4a04      	ldr	r2, [pc, #16]	@ (800f314 <prvResetNextTaskUnblockTime+0x3c>)
 800f302:	6013      	str	r3, [r2, #0]
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	24009c50 	.word	0x24009c50
 800f314:	24009cb8 	.word	0x24009cb8

0800f318 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f31e:	4b0b      	ldr	r3, [pc, #44]	@ (800f34c <xTaskGetSchedulerState+0x34>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f326:	2301      	movs	r3, #1
 800f328:	607b      	str	r3, [r7, #4]
 800f32a:	e008      	b.n	800f33e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f32c:	4b08      	ldr	r3, [pc, #32]	@ (800f350 <xTaskGetSchedulerState+0x38>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d102      	bne.n	800f33a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f334:	2302      	movs	r3, #2
 800f336:	607b      	str	r3, [r7, #4]
 800f338:	e001      	b.n	800f33e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f33a:	2300      	movs	r3, #0
 800f33c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f33e:	687b      	ldr	r3, [r7, #4]
	}
 800f340:	4618      	mov	r0, r3
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr
 800f34c:	24009ca4 	.word	0x24009ca4
 800f350:	24009cc0 	.word	0x24009cc0

0800f354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f360:	2300      	movs	r3, #0
 800f362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d058      	beq.n	800f41c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f36a:	4b2f      	ldr	r3, [pc, #188]	@ (800f428 <xTaskPriorityDisinherit+0xd4>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	429a      	cmp	r2, r3
 800f372:	d00b      	beq.n	800f38c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	60fb      	str	r3, [r7, #12]
}
 800f386:	bf00      	nop
 800f388:	bf00      	nop
 800f38a:	e7fd      	b.n	800f388 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f390:	2b00      	cmp	r3, #0
 800f392:	d10b      	bne.n	800f3ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	60bb      	str	r3, [r7, #8]
}
 800f3a6:	bf00      	nop
 800f3a8:	bf00      	nop
 800f3aa:	e7fd      	b.n	800f3a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3b0:	1e5a      	subs	r2, r3, #1
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d02c      	beq.n	800f41c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d128      	bne.n	800f41c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fe fad4 	bl	800d97c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f42c <xTaskPriorityDisinherit+0xd8>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d903      	bls.n	800f3fc <xTaskPriorityDisinherit+0xa8>
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f8:	4a0c      	ldr	r2, [pc, #48]	@ (800f42c <xTaskPriorityDisinherit+0xd8>)
 800f3fa:	6013      	str	r3, [r2, #0]
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f400:	4613      	mov	r3, r2
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4a09      	ldr	r2, [pc, #36]	@ (800f430 <xTaskPriorityDisinherit+0xdc>)
 800f40a:	441a      	add	r2, r3
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	3304      	adds	r3, #4
 800f410:	4619      	mov	r1, r3
 800f412:	4610      	mov	r0, r2
 800f414:	f7fe fa55 	bl	800d8c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f418:	2301      	movs	r3, #1
 800f41a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f41c:	697b      	ldr	r3, [r7, #20]
	}
 800f41e:	4618      	mov	r0, r3
 800f420:	3718      	adds	r7, #24
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	240097c4 	.word	0x240097c4
 800f42c:	24009ca0 	.word	0x24009ca0
 800f430:	240097c8 	.word	0x240097c8

0800f434 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f43e:	4b21      	ldr	r3, [pc, #132]	@ (800f4c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f444:	4b20      	ldr	r3, [pc, #128]	@ (800f4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	3304      	adds	r3, #4
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fe fa96 	bl	800d97c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f456:	d10a      	bne.n	800f46e <prvAddCurrentTaskToDelayedList+0x3a>
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d007      	beq.n	800f46e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f45e:	4b1a      	ldr	r3, [pc, #104]	@ (800f4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3304      	adds	r3, #4
 800f464:	4619      	mov	r1, r3
 800f466:	4819      	ldr	r0, [pc, #100]	@ (800f4cc <prvAddCurrentTaskToDelayedList+0x98>)
 800f468:	f7fe fa2b 	bl	800d8c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f46c:	e026      	b.n	800f4bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4413      	add	r3, r2
 800f474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f476:	4b14      	ldr	r3, [pc, #80]	@ (800f4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	68ba      	ldr	r2, [r7, #8]
 800f47c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f47e:	68ba      	ldr	r2, [r7, #8]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	429a      	cmp	r2, r3
 800f484:	d209      	bcs.n	800f49a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f486:	4b12      	ldr	r3, [pc, #72]	@ (800f4d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	4b0f      	ldr	r3, [pc, #60]	@ (800f4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	3304      	adds	r3, #4
 800f490:	4619      	mov	r1, r3
 800f492:	4610      	mov	r0, r2
 800f494:	f7fe fa39 	bl	800d90a <vListInsert>
}
 800f498:	e010      	b.n	800f4bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f49a:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	4b0a      	ldr	r3, [pc, #40]	@ (800f4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	3304      	adds	r3, #4
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	4610      	mov	r0, r2
 800f4a8:	f7fe fa2f 	bl	800d90a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f4d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d202      	bcs.n	800f4bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f4b6:	4a08      	ldr	r2, [pc, #32]	@ (800f4d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	6013      	str	r3, [r2, #0]
}
 800f4bc:	bf00      	nop
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	24009c9c 	.word	0x24009c9c
 800f4c8:	240097c4 	.word	0x240097c4
 800f4cc:	24009c84 	.word	0x24009c84
 800f4d0:	24009c54 	.word	0x24009c54
 800f4d4:	24009c50 	.word	0x24009c50
 800f4d8:	24009cb8 	.word	0x24009cb8

0800f4dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b08a      	sub	sp, #40	@ 0x28
 800f4e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f4e6:	f000 fb13 	bl	800fb10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f4ea:	4b1d      	ldr	r3, [pc, #116]	@ (800f560 <xTimerCreateTimerTask+0x84>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d021      	beq.n	800f536 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f4fa:	1d3a      	adds	r2, r7, #4
 800f4fc:	f107 0108 	add.w	r1, r7, #8
 800f500:	f107 030c 	add.w	r3, r7, #12
 800f504:	4618      	mov	r0, r3
 800f506:	f7fe f995 	bl	800d834 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f50a:	6879      	ldr	r1, [r7, #4]
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	9202      	str	r2, [sp, #8]
 800f512:	9301      	str	r3, [sp, #4]
 800f514:	2302      	movs	r3, #2
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	2300      	movs	r3, #0
 800f51a:	460a      	mov	r2, r1
 800f51c:	4911      	ldr	r1, [pc, #68]	@ (800f564 <xTimerCreateTimerTask+0x88>)
 800f51e:	4812      	ldr	r0, [pc, #72]	@ (800f568 <xTimerCreateTimerTask+0x8c>)
 800f520:	f7ff f8d8 	bl	800e6d4 <xTaskCreateStatic>
 800f524:	4603      	mov	r3, r0
 800f526:	4a11      	ldr	r2, [pc, #68]	@ (800f56c <xTimerCreateTimerTask+0x90>)
 800f528:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f52a:	4b10      	ldr	r3, [pc, #64]	@ (800f56c <xTimerCreateTimerTask+0x90>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f532:	2301      	movs	r3, #1
 800f534:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10b      	bne.n	800f554 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	613b      	str	r3, [r7, #16]
}
 800f54e:	bf00      	nop
 800f550:	bf00      	nop
 800f552:	e7fd      	b.n	800f550 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f554:	697b      	ldr	r3, [r7, #20]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	24009cf4 	.word	0x24009cf4
 800f564:	08012d40 	.word	0x08012d40
 800f568:	0800f6a9 	.word	0x0800f6a9
 800f56c:	24009cf8 	.word	0x24009cf8

0800f570 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b08a      	sub	sp, #40	@ 0x28
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f57e:	2300      	movs	r3, #0
 800f580:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10b      	bne.n	800f5a0 <xTimerGenericCommand+0x30>
	__asm volatile
 800f588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f58c:	f383 8811 	msr	BASEPRI, r3
 800f590:	f3bf 8f6f 	isb	sy
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	623b      	str	r3, [r7, #32]
}
 800f59a:	bf00      	nop
 800f59c:	bf00      	nop
 800f59e:	e7fd      	b.n	800f59c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f5a0:	4b19      	ldr	r3, [pc, #100]	@ (800f608 <xTimerGenericCommand+0x98>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d02a      	beq.n	800f5fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2b05      	cmp	r3, #5
 800f5b8:	dc18      	bgt.n	800f5ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f5ba:	f7ff fead 	bl	800f318 <xTaskGetSchedulerState>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b02      	cmp	r3, #2
 800f5c2:	d109      	bne.n	800f5d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f5c4:	4b10      	ldr	r3, [pc, #64]	@ (800f608 <xTimerGenericCommand+0x98>)
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	f107 0110 	add.w	r1, r7, #16
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5d0:	f7fe fbb2 	bl	800dd38 <xQueueGenericSend>
 800f5d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f5d6:	e012      	b.n	800f5fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f5d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f608 <xTimerGenericCommand+0x98>)
 800f5da:	6818      	ldr	r0, [r3, #0]
 800f5dc:	f107 0110 	add.w	r1, r7, #16
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f7fe fba8 	bl	800dd38 <xQueueGenericSend>
 800f5e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f5ea:	e008      	b.n	800f5fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f5ec:	4b06      	ldr	r3, [pc, #24]	@ (800f608 <xTimerGenericCommand+0x98>)
 800f5ee:	6818      	ldr	r0, [r3, #0]
 800f5f0:	f107 0110 	add.w	r1, r7, #16
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	f7fe fca0 	bl	800df3c <xQueueGenericSendFromISR>
 800f5fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f600:	4618      	mov	r0, r3
 800f602:	3728      	adds	r7, #40	@ 0x28
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	24009cf4 	.word	0x24009cf4

0800f60c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b088      	sub	sp, #32
 800f610:	af02      	add	r7, sp, #8
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f616:	4b23      	ldr	r3, [pc, #140]	@ (800f6a4 <prvProcessExpiredTimer+0x98>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	3304      	adds	r3, #4
 800f624:	4618      	mov	r0, r3
 800f626:	f7fe f9a9 	bl	800d97c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f630:	f003 0304 	and.w	r3, r3, #4
 800f634:	2b00      	cmp	r3, #0
 800f636:	d023      	beq.n	800f680 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	699a      	ldr	r2, [r3, #24]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	18d1      	adds	r1, r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	6978      	ldr	r0, [r7, #20]
 800f646:	f000 f8d5 	bl	800f7f4 <prvInsertTimerInActiveList>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d020      	beq.n	800f692 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f650:	2300      	movs	r3, #0
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	2300      	movs	r3, #0
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	2100      	movs	r1, #0
 800f65a:	6978      	ldr	r0, [r7, #20]
 800f65c:	f7ff ff88 	bl	800f570 <xTimerGenericCommand>
 800f660:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d114      	bne.n	800f692 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f66c:	f383 8811 	msr	BASEPRI, r3
 800f670:	f3bf 8f6f 	isb	sy
 800f674:	f3bf 8f4f 	dsb	sy
 800f678:	60fb      	str	r3, [r7, #12]
}
 800f67a:	bf00      	nop
 800f67c:	bf00      	nop
 800f67e:	e7fd      	b.n	800f67c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f686:	f023 0301 	bic.w	r3, r3, #1
 800f68a:	b2da      	uxtb	r2, r3
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	6a1b      	ldr	r3, [r3, #32]
 800f696:	6978      	ldr	r0, [r7, #20]
 800f698:	4798      	blx	r3
}
 800f69a:	bf00      	nop
 800f69c:	3718      	adds	r7, #24
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	24009cec 	.word	0x24009cec

0800f6a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f6b0:	f107 0308 	add.w	r3, r7, #8
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f000 f859 	bl	800f76c <prvGetNextExpireTime>
 800f6ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	4619      	mov	r1, r3
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f000 f805 	bl	800f6d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f6c6:	f000 f8d7 	bl	800f878 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f6ca:	bf00      	nop
 800f6cc:	e7f0      	b.n	800f6b0 <prvTimerTask+0x8>
	...

0800f6d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f6da:	f7ff fa29 	bl	800eb30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6de:	f107 0308 	add.w	r3, r7, #8
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f000 f866 	bl	800f7b4 <prvSampleTimeNow>
 800f6e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d130      	bne.n	800f752 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d10a      	bne.n	800f70c <prvProcessTimerOrBlockTask+0x3c>
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d806      	bhi.n	800f70c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f6fe:	f7ff fa25 	bl	800eb4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f702:	68f9      	ldr	r1, [r7, #12]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7ff ff81 	bl	800f60c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f70a:	e024      	b.n	800f756 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d008      	beq.n	800f724 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f712:	4b13      	ldr	r3, [pc, #76]	@ (800f760 <prvProcessTimerOrBlockTask+0x90>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <prvProcessTimerOrBlockTask+0x50>
 800f71c:	2301      	movs	r3, #1
 800f71e:	e000      	b.n	800f722 <prvProcessTimerOrBlockTask+0x52>
 800f720:	2300      	movs	r3, #0
 800f722:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f724:	4b0f      	ldr	r3, [pc, #60]	@ (800f764 <prvProcessTimerOrBlockTask+0x94>)
 800f726:	6818      	ldr	r0, [r3, #0]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	4619      	mov	r1, r3
 800f732:	f7fe ff9b 	bl	800e66c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f736:	f7ff fa09 	bl	800eb4c <xTaskResumeAll>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d10a      	bne.n	800f756 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f740:	4b09      	ldr	r3, [pc, #36]	@ (800f768 <prvProcessTimerOrBlockTask+0x98>)
 800f742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f746:	601a      	str	r2, [r3, #0]
 800f748:	f3bf 8f4f 	dsb	sy
 800f74c:	f3bf 8f6f 	isb	sy
}
 800f750:	e001      	b.n	800f756 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f752:	f7ff f9fb 	bl	800eb4c <xTaskResumeAll>
}
 800f756:	bf00      	nop
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	24009cf0 	.word	0x24009cf0
 800f764:	24009cf4 	.word	0x24009cf4
 800f768:	e000ed04 	.word	0xe000ed04

0800f76c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f774:	4b0e      	ldr	r3, [pc, #56]	@ (800f7b0 <prvGetNextExpireTime+0x44>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d101      	bne.n	800f782 <prvGetNextExpireTime+0x16>
 800f77e:	2201      	movs	r2, #1
 800f780:	e000      	b.n	800f784 <prvGetNextExpireTime+0x18>
 800f782:	2200      	movs	r2, #0
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d105      	bne.n	800f79c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f790:	4b07      	ldr	r3, [pc, #28]	@ (800f7b0 <prvGetNextExpireTime+0x44>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	60fb      	str	r3, [r7, #12]
 800f79a:	e001      	b.n	800f7a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f79c:	2300      	movs	r3, #0
 800f79e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3714      	adds	r7, #20
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	24009cec 	.word	0x24009cec

0800f7b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f7bc:	f7ff fa64 	bl	800ec88 <xTaskGetTickCount>
 800f7c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f7f0 <prvSampleTimeNow+0x3c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d205      	bcs.n	800f7d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f7cc:	f000 f93a 	bl	800fa44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	e002      	b.n	800f7de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f7de:	4a04      	ldr	r2, [pc, #16]	@ (800f7f0 <prvSampleTimeNow+0x3c>)
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	24009cfc 	.word	0x24009cfc

0800f7f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b086      	sub	sp, #24
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	607a      	str	r2, [r7, #4]
 800f800:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f802:	2300      	movs	r3, #0
 800f804:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	429a      	cmp	r2, r3
 800f818:	d812      	bhi.n	800f840 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	1ad2      	subs	r2, r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	699b      	ldr	r3, [r3, #24]
 800f824:	429a      	cmp	r2, r3
 800f826:	d302      	bcc.n	800f82e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f828:	2301      	movs	r3, #1
 800f82a:	617b      	str	r3, [r7, #20]
 800f82c:	e01b      	b.n	800f866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f82e:	4b10      	ldr	r3, [pc, #64]	@ (800f870 <prvInsertTimerInActiveList+0x7c>)
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	3304      	adds	r3, #4
 800f836:	4619      	mov	r1, r3
 800f838:	4610      	mov	r0, r2
 800f83a:	f7fe f866 	bl	800d90a <vListInsert>
 800f83e:	e012      	b.n	800f866 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	429a      	cmp	r2, r3
 800f846:	d206      	bcs.n	800f856 <prvInsertTimerInActiveList+0x62>
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d302      	bcc.n	800f856 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f850:	2301      	movs	r3, #1
 800f852:	617b      	str	r3, [r7, #20]
 800f854:	e007      	b.n	800f866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f856:	4b07      	ldr	r3, [pc, #28]	@ (800f874 <prvInsertTimerInActiveList+0x80>)
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4619      	mov	r1, r3
 800f860:	4610      	mov	r0, r2
 800f862:	f7fe f852 	bl	800d90a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f866:	697b      	ldr	r3, [r7, #20]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3718      	adds	r7, #24
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	24009cf0 	.word	0x24009cf0
 800f874:	24009cec 	.word	0x24009cec

0800f878 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b08e      	sub	sp, #56	@ 0x38
 800f87c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f87e:	e0ce      	b.n	800fa1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	da19      	bge.n	800f8ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f886:	1d3b      	adds	r3, r7, #4
 800f888:	3304      	adds	r3, #4
 800f88a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d10b      	bne.n	800f8aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f896:	f383 8811 	msr	BASEPRI, r3
 800f89a:	f3bf 8f6f 	isb	sy
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	61fb      	str	r3, [r7, #28]
}
 800f8a4:	bf00      	nop
 800f8a6:	bf00      	nop
 800f8a8:	e7fd      	b.n	800f8a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8b0:	6850      	ldr	r0, [r2, #4]
 800f8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8b4:	6892      	ldr	r2, [r2, #8]
 800f8b6:	4611      	mov	r1, r2
 800f8b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	f2c0 80ae 	blt.w	800fa1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c8:	695b      	ldr	r3, [r3, #20]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d004      	beq.n	800f8d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d0:	3304      	adds	r3, #4
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe f852 	bl	800d97c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f8d8:	463b      	mov	r3, r7
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7ff ff6a 	bl	800f7b4 <prvSampleTimeNow>
 800f8e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b09      	cmp	r3, #9
 800f8e6:	f200 8097 	bhi.w	800fa18 <prvProcessReceivedCommands+0x1a0>
 800f8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f0 <prvProcessReceivedCommands+0x78>)
 800f8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f0:	0800f919 	.word	0x0800f919
 800f8f4:	0800f919 	.word	0x0800f919
 800f8f8:	0800f919 	.word	0x0800f919
 800f8fc:	0800f98f 	.word	0x0800f98f
 800f900:	0800f9a3 	.word	0x0800f9a3
 800f904:	0800f9ef 	.word	0x0800f9ef
 800f908:	0800f919 	.word	0x0800f919
 800f90c:	0800f919 	.word	0x0800f919
 800f910:	0800f98f 	.word	0x0800f98f
 800f914:	0800f9a3 	.word	0x0800f9a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f91a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f91e:	f043 0301 	orr.w	r3, r3, #1
 800f922:	b2da      	uxtb	r2, r3
 800f924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92e:	699b      	ldr	r3, [r3, #24]
 800f930:	18d1      	adds	r1, r2, r3
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f938:	f7ff ff5c 	bl	800f7f4 <prvInsertTimerInActiveList>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d06c      	beq.n	800fa1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f944:	6a1b      	ldr	r3, [r3, #32]
 800f946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f948:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f950:	f003 0304 	and.w	r3, r3, #4
 800f954:	2b00      	cmp	r3, #0
 800f956:	d061      	beq.n	800fa1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f95c:	699b      	ldr	r3, [r3, #24]
 800f95e:	441a      	add	r2, r3
 800f960:	2300      	movs	r3, #0
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	2300      	movs	r3, #0
 800f966:	2100      	movs	r1, #0
 800f968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f96a:	f7ff fe01 	bl	800f570 <xTimerGenericCommand>
 800f96e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f970:	6a3b      	ldr	r3, [r7, #32]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d152      	bne.n	800fa1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	61bb      	str	r3, [r7, #24]
}
 800f988:	bf00      	nop
 800f98a:	bf00      	nop
 800f98c:	e7fd      	b.n	800f98a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f994:	f023 0301 	bic.w	r3, r3, #1
 800f998:	b2da      	uxtb	r2, r3
 800f99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f9a0:	e03d      	b.n	800fa1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9a8:	f043 0301 	orr.w	r3, r3, #1
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f9b4:	68ba      	ldr	r2, [r7, #8]
 800f9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9bc:	699b      	ldr	r3, [r3, #24]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d10b      	bne.n	800f9da <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c6:	f383 8811 	msr	BASEPRI, r3
 800f9ca:	f3bf 8f6f 	isb	sy
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	617b      	str	r3, [r7, #20]
}
 800f9d4:	bf00      	nop
 800f9d6:	bf00      	nop
 800f9d8:	e7fd      	b.n	800f9d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9dc:	699a      	ldr	r2, [r3, #24]
 800f9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e0:	18d1      	adds	r1, r2, r3
 800f9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9e8:	f7ff ff04 	bl	800f7f4 <prvInsertTimerInActiveList>
					break;
 800f9ec:	e017      	b.n	800fa1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9f4:	f003 0302 	and.w	r3, r3, #2
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d103      	bne.n	800fa04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f9fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9fe:	f000 fbeb 	bl	80101d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fa02:	e00c      	b.n	800fa1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa0a:	f023 0301 	bic.w	r3, r3, #1
 800fa0e:	b2da      	uxtb	r2, r3
 800fa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fa16:	e002      	b.n	800fa1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fa18:	bf00      	nop
 800fa1a:	e000      	b.n	800fa1e <prvProcessReceivedCommands+0x1a6>
					break;
 800fa1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa1e:	4b08      	ldr	r3, [pc, #32]	@ (800fa40 <prvProcessReceivedCommands+0x1c8>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	1d39      	adds	r1, r7, #4
 800fa24:	2200      	movs	r2, #0
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fe fbb6 	bl	800e198 <xQueueReceive>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f47f af26 	bne.w	800f880 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fa34:	bf00      	nop
 800fa36:	bf00      	nop
 800fa38:	3730      	adds	r7, #48	@ 0x30
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	24009cf4 	.word	0x24009cf4

0800fa44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b088      	sub	sp, #32
 800fa48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa4a:	e049      	b.n	800fae0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa4c:	4b2e      	ldr	r3, [pc, #184]	@ (800fb08 <prvSwitchTimerLists+0xc4>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa56:	4b2c      	ldr	r3, [pc, #176]	@ (800fb08 <prvSwitchTimerLists+0xc4>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	3304      	adds	r3, #4
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fd ff89 	bl	800d97c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6a1b      	ldr	r3, [r3, #32]
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa78:	f003 0304 	and.w	r3, r3, #4
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d02f      	beq.n	800fae0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	699b      	ldr	r3, [r3, #24]
 800fa84:	693a      	ldr	r2, [r7, #16]
 800fa86:	4413      	add	r3, r2
 800fa88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d90e      	bls.n	800fab0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa9e:	4b1a      	ldr	r3, [pc, #104]	@ (800fb08 <prvSwitchTimerLists+0xc4>)
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	3304      	adds	r3, #4
 800faa6:	4619      	mov	r1, r3
 800faa8:	4610      	mov	r0, r2
 800faaa:	f7fd ff2e 	bl	800d90a <vListInsert>
 800faae:	e017      	b.n	800fae0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fab0:	2300      	movs	r3, #0
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	2300      	movs	r3, #0
 800fab6:	693a      	ldr	r2, [r7, #16]
 800fab8:	2100      	movs	r1, #0
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f7ff fd58 	bl	800f570 <xTimerGenericCommand>
 800fac0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d10b      	bne.n	800fae0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800facc:	f383 8811 	msr	BASEPRI, r3
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	f3bf 8f4f 	dsb	sy
 800fad8:	603b      	str	r3, [r7, #0]
}
 800fada:	bf00      	nop
 800fadc:	bf00      	nop
 800fade:	e7fd      	b.n	800fadc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fae0:	4b09      	ldr	r3, [pc, #36]	@ (800fb08 <prvSwitchTimerLists+0xc4>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d1b0      	bne.n	800fa4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800faea:	4b07      	ldr	r3, [pc, #28]	@ (800fb08 <prvSwitchTimerLists+0xc4>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800faf0:	4b06      	ldr	r3, [pc, #24]	@ (800fb0c <prvSwitchTimerLists+0xc8>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a04      	ldr	r2, [pc, #16]	@ (800fb08 <prvSwitchTimerLists+0xc4>)
 800faf6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800faf8:	4a04      	ldr	r2, [pc, #16]	@ (800fb0c <prvSwitchTimerLists+0xc8>)
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	6013      	str	r3, [r2, #0]
}
 800fafe:	bf00      	nop
 800fb00:	3718      	adds	r7, #24
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	24009cec 	.word	0x24009cec
 800fb0c:	24009cf0 	.word	0x24009cf0

0800fb10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fb16:	f000 f96f 	bl	800fdf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fb1a:	4b15      	ldr	r3, [pc, #84]	@ (800fb70 <prvCheckForValidListAndQueue+0x60>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d120      	bne.n	800fb64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fb22:	4814      	ldr	r0, [pc, #80]	@ (800fb74 <prvCheckForValidListAndQueue+0x64>)
 800fb24:	f7fd fea0 	bl	800d868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fb28:	4813      	ldr	r0, [pc, #76]	@ (800fb78 <prvCheckForValidListAndQueue+0x68>)
 800fb2a:	f7fd fe9d 	bl	800d868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fb2e:	4b13      	ldr	r3, [pc, #76]	@ (800fb7c <prvCheckForValidListAndQueue+0x6c>)
 800fb30:	4a10      	ldr	r2, [pc, #64]	@ (800fb74 <prvCheckForValidListAndQueue+0x64>)
 800fb32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fb34:	4b12      	ldr	r3, [pc, #72]	@ (800fb80 <prvCheckForValidListAndQueue+0x70>)
 800fb36:	4a10      	ldr	r2, [pc, #64]	@ (800fb78 <prvCheckForValidListAndQueue+0x68>)
 800fb38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	4b11      	ldr	r3, [pc, #68]	@ (800fb84 <prvCheckForValidListAndQueue+0x74>)
 800fb40:	4a11      	ldr	r2, [pc, #68]	@ (800fb88 <prvCheckForValidListAndQueue+0x78>)
 800fb42:	2110      	movs	r1, #16
 800fb44:	200a      	movs	r0, #10
 800fb46:	f7fd ffad 	bl	800daa4 <xQueueGenericCreateStatic>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	4a08      	ldr	r2, [pc, #32]	@ (800fb70 <prvCheckForValidListAndQueue+0x60>)
 800fb4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fb50:	4b07      	ldr	r3, [pc, #28]	@ (800fb70 <prvCheckForValidListAndQueue+0x60>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d005      	beq.n	800fb64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fb58:	4b05      	ldr	r3, [pc, #20]	@ (800fb70 <prvCheckForValidListAndQueue+0x60>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	490b      	ldr	r1, [pc, #44]	@ (800fb8c <prvCheckForValidListAndQueue+0x7c>)
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe fd30 	bl	800e5c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb64:	f000 f97a 	bl	800fe5c <vPortExitCritical>
}
 800fb68:	bf00      	nop
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	24009cf4 	.word	0x24009cf4
 800fb74:	24009cc4 	.word	0x24009cc4
 800fb78:	24009cd8 	.word	0x24009cd8
 800fb7c:	24009cec 	.word	0x24009cec
 800fb80:	24009cf0 	.word	0x24009cf0
 800fb84:	24009da0 	.word	0x24009da0
 800fb88:	24009d00 	.word	0x24009d00
 800fb8c:	08012d48 	.word	0x08012d48

0800fb90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb90:	b480      	push	{r7}
 800fb92:	b085      	sub	sp, #20
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3b04      	subs	r3, #4
 800fba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	3b04      	subs	r3, #4
 800fbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	f023 0201 	bic.w	r2, r3, #1
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	3b04      	subs	r3, #4
 800fbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fbc0:	4a0c      	ldr	r2, [pc, #48]	@ (800fbf4 <pxPortInitialiseStack+0x64>)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3b14      	subs	r3, #20
 800fbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	3b04      	subs	r3, #4
 800fbd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f06f 0202 	mvn.w	r2, #2
 800fbde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	3b20      	subs	r3, #32
 800fbe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3714      	adds	r7, #20
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr
 800fbf4:	0800fbf9 	.word	0x0800fbf9

0800fbf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc02:	4b13      	ldr	r3, [pc, #76]	@ (800fc50 <prvTaskExitError+0x58>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc0a:	d00b      	beq.n	800fc24 <prvTaskExitError+0x2c>
	__asm volatile
 800fc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	60fb      	str	r3, [r7, #12]
}
 800fc1e:	bf00      	nop
 800fc20:	bf00      	nop
 800fc22:	e7fd      	b.n	800fc20 <prvTaskExitError+0x28>
	__asm volatile
 800fc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc28:	f383 8811 	msr	BASEPRI, r3
 800fc2c:	f3bf 8f6f 	isb	sy
 800fc30:	f3bf 8f4f 	dsb	sy
 800fc34:	60bb      	str	r3, [r7, #8]
}
 800fc36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fc38:	bf00      	nop
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d0fc      	beq.n	800fc3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc40:	bf00      	nop
 800fc42:	bf00      	nop
 800fc44:	3714      	adds	r7, #20
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop
 800fc50:	24000010 	.word	0x24000010
	...

0800fc60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc60:	4b07      	ldr	r3, [pc, #28]	@ (800fc80 <pxCurrentTCBConst2>)
 800fc62:	6819      	ldr	r1, [r3, #0]
 800fc64:	6808      	ldr	r0, [r1, #0]
 800fc66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6a:	f380 8809 	msr	PSP, r0
 800fc6e:	f3bf 8f6f 	isb	sy
 800fc72:	f04f 0000 	mov.w	r0, #0
 800fc76:	f380 8811 	msr	BASEPRI, r0
 800fc7a:	4770      	bx	lr
 800fc7c:	f3af 8000 	nop.w

0800fc80 <pxCurrentTCBConst2>:
 800fc80:	240097c4 	.word	0x240097c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop

0800fc88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc88:	4808      	ldr	r0, [pc, #32]	@ (800fcac <prvPortStartFirstTask+0x24>)
 800fc8a:	6800      	ldr	r0, [r0, #0]
 800fc8c:	6800      	ldr	r0, [r0, #0]
 800fc8e:	f380 8808 	msr	MSP, r0
 800fc92:	f04f 0000 	mov.w	r0, #0
 800fc96:	f380 8814 	msr	CONTROL, r0
 800fc9a:	b662      	cpsie	i
 800fc9c:	b661      	cpsie	f
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	df00      	svc	0
 800fca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fcaa:	bf00      	nop
 800fcac:	e000ed08 	.word	0xe000ed08

0800fcb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fcb6:	4b47      	ldr	r3, [pc, #284]	@ (800fdd4 <xPortStartScheduler+0x124>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a47      	ldr	r2, [pc, #284]	@ (800fdd8 <xPortStartScheduler+0x128>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d10b      	bne.n	800fcd8 <xPortStartScheduler+0x28>
	__asm volatile
 800fcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	60fb      	str	r3, [r7, #12]
}
 800fcd2:	bf00      	nop
 800fcd4:	bf00      	nop
 800fcd6:	e7fd      	b.n	800fcd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fcd8:	4b3e      	ldr	r3, [pc, #248]	@ (800fdd4 <xPortStartScheduler+0x124>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a3f      	ldr	r2, [pc, #252]	@ (800fddc <xPortStartScheduler+0x12c>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d10b      	bne.n	800fcfa <xPortStartScheduler+0x4a>
	__asm volatile
 800fce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce6:	f383 8811 	msr	BASEPRI, r3
 800fcea:	f3bf 8f6f 	isb	sy
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	613b      	str	r3, [r7, #16]
}
 800fcf4:	bf00      	nop
 800fcf6:	bf00      	nop
 800fcf8:	e7fd      	b.n	800fcf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fcfa:	4b39      	ldr	r3, [pc, #228]	@ (800fde0 <xPortStartScheduler+0x130>)
 800fcfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	22ff      	movs	r2, #255	@ 0xff
 800fd0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd14:	78fb      	ldrb	r3, [r7, #3]
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	4b31      	ldr	r3, [pc, #196]	@ (800fde4 <xPortStartScheduler+0x134>)
 800fd20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd22:	4b31      	ldr	r3, [pc, #196]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd24:	2207      	movs	r2, #7
 800fd26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd28:	e009      	b.n	800fd3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fd2a:	4b2f      	ldr	r3, [pc, #188]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	4a2d      	ldr	r2, [pc, #180]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd34:	78fb      	ldrb	r3, [r7, #3]
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	005b      	lsls	r3, r3, #1
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd3e:	78fb      	ldrb	r3, [r7, #3]
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd46:	2b80      	cmp	r3, #128	@ 0x80
 800fd48:	d0ef      	beq.n	800fd2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd4a:	4b27      	ldr	r3, [pc, #156]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f1c3 0307 	rsb	r3, r3, #7
 800fd52:	2b04      	cmp	r3, #4
 800fd54:	d00b      	beq.n	800fd6e <xPortStartScheduler+0xbe>
	__asm volatile
 800fd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	60bb      	str	r3, [r7, #8]
}
 800fd68:	bf00      	nop
 800fd6a:	bf00      	nop
 800fd6c:	e7fd      	b.n	800fd6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd6e:	4b1e      	ldr	r3, [pc, #120]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	021b      	lsls	r3, r3, #8
 800fd74:	4a1c      	ldr	r2, [pc, #112]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd78:	4b1b      	ldr	r3, [pc, #108]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fd80:	4a19      	ldr	r2, [pc, #100]	@ (800fde8 <xPortStartScheduler+0x138>)
 800fd82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	b2da      	uxtb	r2, r3
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd8c:	4b17      	ldr	r3, [pc, #92]	@ (800fdec <xPortStartScheduler+0x13c>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a16      	ldr	r2, [pc, #88]	@ (800fdec <xPortStartScheduler+0x13c>)
 800fd92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fd96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd98:	4b14      	ldr	r3, [pc, #80]	@ (800fdec <xPortStartScheduler+0x13c>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a13      	ldr	r2, [pc, #76]	@ (800fdec <xPortStartScheduler+0x13c>)
 800fd9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fda2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fda4:	f000 f8da 	bl	800ff5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fda8:	4b11      	ldr	r3, [pc, #68]	@ (800fdf0 <xPortStartScheduler+0x140>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fdae:	f000 f8f9 	bl	800ffa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fdb2:	4b10      	ldr	r3, [pc, #64]	@ (800fdf4 <xPortStartScheduler+0x144>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a0f      	ldr	r2, [pc, #60]	@ (800fdf4 <xPortStartScheduler+0x144>)
 800fdb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fdbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fdbe:	f7ff ff63 	bl	800fc88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fdc2:	f7ff f82b 	bl	800ee1c <vTaskSwitchContext>
	prvTaskExitError();
 800fdc6:	f7ff ff17 	bl	800fbf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3718      	adds	r7, #24
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	e000ed00 	.word	0xe000ed00
 800fdd8:	410fc271 	.word	0x410fc271
 800fddc:	410fc270 	.word	0x410fc270
 800fde0:	e000e400 	.word	0xe000e400
 800fde4:	24009df0 	.word	0x24009df0
 800fde8:	24009df4 	.word	0x24009df4
 800fdec:	e000ed20 	.word	0xe000ed20
 800fdf0:	24000010 	.word	0x24000010
 800fdf4:	e000ef34 	.word	0xe000ef34

0800fdf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	607b      	str	r3, [r7, #4]
}
 800fe10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fe12:	4b10      	ldr	r3, [pc, #64]	@ (800fe54 <vPortEnterCritical+0x5c>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	3301      	adds	r3, #1
 800fe18:	4a0e      	ldr	r2, [pc, #56]	@ (800fe54 <vPortEnterCritical+0x5c>)
 800fe1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe1c:	4b0d      	ldr	r3, [pc, #52]	@ (800fe54 <vPortEnterCritical+0x5c>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d110      	bne.n	800fe46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fe24:	4b0c      	ldr	r3, [pc, #48]	@ (800fe58 <vPortEnterCritical+0x60>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00b      	beq.n	800fe46 <vPortEnterCritical+0x4e>
	__asm volatile
 800fe2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe32:	f383 8811 	msr	BASEPRI, r3
 800fe36:	f3bf 8f6f 	isb	sy
 800fe3a:	f3bf 8f4f 	dsb	sy
 800fe3e:	603b      	str	r3, [r7, #0]
}
 800fe40:	bf00      	nop
 800fe42:	bf00      	nop
 800fe44:	e7fd      	b.n	800fe42 <vPortEnterCritical+0x4a>
	}
}
 800fe46:	bf00      	nop
 800fe48:	370c      	adds	r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	24000010 	.word	0x24000010
 800fe58:	e000ed04 	.word	0xe000ed04

0800fe5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fe62:	4b12      	ldr	r3, [pc, #72]	@ (800feac <vPortExitCritical+0x50>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10b      	bne.n	800fe82 <vPortExitCritical+0x26>
	__asm volatile
 800fe6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6e:	f383 8811 	msr	BASEPRI, r3
 800fe72:	f3bf 8f6f 	isb	sy
 800fe76:	f3bf 8f4f 	dsb	sy
 800fe7a:	607b      	str	r3, [r7, #4]
}
 800fe7c:	bf00      	nop
 800fe7e:	bf00      	nop
 800fe80:	e7fd      	b.n	800fe7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fe82:	4b0a      	ldr	r3, [pc, #40]	@ (800feac <vPortExitCritical+0x50>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	3b01      	subs	r3, #1
 800fe88:	4a08      	ldr	r2, [pc, #32]	@ (800feac <vPortExitCritical+0x50>)
 800fe8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe8c:	4b07      	ldr	r3, [pc, #28]	@ (800feac <vPortExitCritical+0x50>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d105      	bne.n	800fea0 <vPortExitCritical+0x44>
 800fe94:	2300      	movs	r3, #0
 800fe96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	f383 8811 	msr	BASEPRI, r3
}
 800fe9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fea0:	bf00      	nop
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr
 800feac:	24000010 	.word	0x24000010

0800feb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800feb0:	f3ef 8009 	mrs	r0, PSP
 800feb4:	f3bf 8f6f 	isb	sy
 800feb8:	4b15      	ldr	r3, [pc, #84]	@ (800ff10 <pxCurrentTCBConst>)
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	f01e 0f10 	tst.w	lr, #16
 800fec0:	bf08      	it	eq
 800fec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feca:	6010      	str	r0, [r2, #0]
 800fecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fed4:	f380 8811 	msr	BASEPRI, r0
 800fed8:	f3bf 8f4f 	dsb	sy
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f7fe ff9c 	bl	800ee1c <vTaskSwitchContext>
 800fee4:	f04f 0000 	mov.w	r0, #0
 800fee8:	f380 8811 	msr	BASEPRI, r0
 800feec:	bc09      	pop	{r0, r3}
 800feee:	6819      	ldr	r1, [r3, #0]
 800fef0:	6808      	ldr	r0, [r1, #0]
 800fef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef6:	f01e 0f10 	tst.w	lr, #16
 800fefa:	bf08      	it	eq
 800fefc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff00:	f380 8809 	msr	PSP, r0
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop
 800ff0c:	f3af 8000 	nop.w

0800ff10 <pxCurrentTCBConst>:
 800ff10:	240097c4 	.word	0x240097c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff14:	bf00      	nop
 800ff16:	bf00      	nop

0800ff18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff22:	f383 8811 	msr	BASEPRI, r3
 800ff26:	f3bf 8f6f 	isb	sy
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	607b      	str	r3, [r7, #4]
}
 800ff30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ff32:	f7fe feb9 	bl	800eca8 <xTaskIncrementTick>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d003      	beq.n	800ff44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ff3c:	4b06      	ldr	r3, [pc, #24]	@ (800ff58 <xPortSysTickHandler+0x40>)
 800ff3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff42:	601a      	str	r2, [r3, #0]
 800ff44:	2300      	movs	r3, #0
 800ff46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	f383 8811 	msr	BASEPRI, r3
}
 800ff4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ff50:	bf00      	nop
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	e000ed04 	.word	0xe000ed04

0800ff5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ff60:	4b0b      	ldr	r3, [pc, #44]	@ (800ff90 <vPortSetupTimerInterrupt+0x34>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ff66:	4b0b      	ldr	r3, [pc, #44]	@ (800ff94 <vPortSetupTimerInterrupt+0x38>)
 800ff68:	2200      	movs	r2, #0
 800ff6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ff6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff98 <vPortSetupTimerInterrupt+0x3c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a0a      	ldr	r2, [pc, #40]	@ (800ff9c <vPortSetupTimerInterrupt+0x40>)
 800ff72:	fba2 2303 	umull	r2, r3, r2, r3
 800ff76:	099b      	lsrs	r3, r3, #6
 800ff78:	4a09      	ldr	r2, [pc, #36]	@ (800ffa0 <vPortSetupTimerInterrupt+0x44>)
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff7e:	4b04      	ldr	r3, [pc, #16]	@ (800ff90 <vPortSetupTimerInterrupt+0x34>)
 800ff80:	2207      	movs	r2, #7
 800ff82:	601a      	str	r2, [r3, #0]
}
 800ff84:	bf00      	nop
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop
 800ff90:	e000e010 	.word	0xe000e010
 800ff94:	e000e018 	.word	0xe000e018
 800ff98:	24000000 	.word	0x24000000
 800ff9c:	10624dd3 	.word	0x10624dd3
 800ffa0:	e000e014 	.word	0xe000e014

0800ffa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ffa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ffb4 <vPortEnableVFP+0x10>
 800ffa8:	6801      	ldr	r1, [r0, #0]
 800ffaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ffae:	6001      	str	r1, [r0, #0]
 800ffb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ffb2:	bf00      	nop
 800ffb4:	e000ed88 	.word	0xe000ed88

0800ffb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ffb8:	b480      	push	{r7}
 800ffba:	b085      	sub	sp, #20
 800ffbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ffbe:	f3ef 8305 	mrs	r3, IPSR
 800ffc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2b0f      	cmp	r3, #15
 800ffc8:	d915      	bls.n	800fff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ffca:	4a18      	ldr	r2, [pc, #96]	@ (801002c <vPortValidateInterruptPriority+0x74>)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	4413      	add	r3, r2
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ffd4:	4b16      	ldr	r3, [pc, #88]	@ (8010030 <vPortValidateInterruptPriority+0x78>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	7afa      	ldrb	r2, [r7, #11]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d20b      	bcs.n	800fff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ffde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffe2:	f383 8811 	msr	BASEPRI, r3
 800ffe6:	f3bf 8f6f 	isb	sy
 800ffea:	f3bf 8f4f 	dsb	sy
 800ffee:	607b      	str	r3, [r7, #4]
}
 800fff0:	bf00      	nop
 800fff2:	bf00      	nop
 800fff4:	e7fd      	b.n	800fff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fff6:	4b0f      	ldr	r3, [pc, #60]	@ (8010034 <vPortValidateInterruptPriority+0x7c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fffe:	4b0e      	ldr	r3, [pc, #56]	@ (8010038 <vPortValidateInterruptPriority+0x80>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	429a      	cmp	r2, r3
 8010004:	d90b      	bls.n	801001e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801000a:	f383 8811 	msr	BASEPRI, r3
 801000e:	f3bf 8f6f 	isb	sy
 8010012:	f3bf 8f4f 	dsb	sy
 8010016:	603b      	str	r3, [r7, #0]
}
 8010018:	bf00      	nop
 801001a:	bf00      	nop
 801001c:	e7fd      	b.n	801001a <vPortValidateInterruptPriority+0x62>
	}
 801001e:	bf00      	nop
 8010020:	3714      	adds	r7, #20
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	e000e3f0 	.word	0xe000e3f0
 8010030:	24009df0 	.word	0x24009df0
 8010034:	e000ed0c 	.word	0xe000ed0c
 8010038:	24009df4 	.word	0x24009df4

0801003c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b08a      	sub	sp, #40	@ 0x28
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010044:	2300      	movs	r3, #0
 8010046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010048:	f7fe fd72 	bl	800eb30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801004c:	4b5c      	ldr	r3, [pc, #368]	@ (80101c0 <pvPortMalloc+0x184>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d101      	bne.n	8010058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010054:	f000 f924 	bl	80102a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010058:	4b5a      	ldr	r3, [pc, #360]	@ (80101c4 <pvPortMalloc+0x188>)
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	4013      	ands	r3, r2
 8010060:	2b00      	cmp	r3, #0
 8010062:	f040 8095 	bne.w	8010190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d01e      	beq.n	80100aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801006c:	2208      	movs	r2, #8
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4413      	add	r3, r2
 8010072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f003 0307 	and.w	r3, r3, #7
 801007a:	2b00      	cmp	r3, #0
 801007c:	d015      	beq.n	80100aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f023 0307 	bic.w	r3, r3, #7
 8010084:	3308      	adds	r3, #8
 8010086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f003 0307 	and.w	r3, r3, #7
 801008e:	2b00      	cmp	r3, #0
 8010090:	d00b      	beq.n	80100aa <pvPortMalloc+0x6e>
	__asm volatile
 8010092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010096:	f383 8811 	msr	BASEPRI, r3
 801009a:	f3bf 8f6f 	isb	sy
 801009e:	f3bf 8f4f 	dsb	sy
 80100a2:	617b      	str	r3, [r7, #20]
}
 80100a4:	bf00      	nop
 80100a6:	bf00      	nop
 80100a8:	e7fd      	b.n	80100a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d06f      	beq.n	8010190 <pvPortMalloc+0x154>
 80100b0:	4b45      	ldr	r3, [pc, #276]	@ (80101c8 <pvPortMalloc+0x18c>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d86a      	bhi.n	8010190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80100ba:	4b44      	ldr	r3, [pc, #272]	@ (80101cc <pvPortMalloc+0x190>)
 80100bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80100be:	4b43      	ldr	r3, [pc, #268]	@ (80101cc <pvPortMalloc+0x190>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100c4:	e004      	b.n	80100d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80100c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80100ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d903      	bls.n	80100e2 <pvPortMalloc+0xa6>
 80100da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1f1      	bne.n	80100c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80100e2:	4b37      	ldr	r3, [pc, #220]	@ (80101c0 <pvPortMalloc+0x184>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d051      	beq.n	8010190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2208      	movs	r2, #8
 80100f2:	4413      	add	r3, r2
 80100f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80100f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	6a3b      	ldr	r3, [r7, #32]
 80100fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80100fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	1ad2      	subs	r2, r2, r3
 8010106:	2308      	movs	r3, #8
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	429a      	cmp	r2, r3
 801010c:	d920      	bls.n	8010150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801010e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4413      	add	r3, r2
 8010114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	f003 0307 	and.w	r3, r3, #7
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00b      	beq.n	8010138 <pvPortMalloc+0xfc>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	613b      	str	r3, [r7, #16]
}
 8010132:	bf00      	nop
 8010134:	bf00      	nop
 8010136:	e7fd      	b.n	8010134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013a:	685a      	ldr	r2, [r3, #4]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	1ad2      	subs	r2, r2, r3
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801014a:	69b8      	ldr	r0, [r7, #24]
 801014c:	f000 f90a 	bl	8010364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010150:	4b1d      	ldr	r3, [pc, #116]	@ (80101c8 <pvPortMalloc+0x18c>)
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	4a1b      	ldr	r2, [pc, #108]	@ (80101c8 <pvPortMalloc+0x18c>)
 801015c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801015e:	4b1a      	ldr	r3, [pc, #104]	@ (80101c8 <pvPortMalloc+0x18c>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	4b1b      	ldr	r3, [pc, #108]	@ (80101d0 <pvPortMalloc+0x194>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	429a      	cmp	r2, r3
 8010168:	d203      	bcs.n	8010172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801016a:	4b17      	ldr	r3, [pc, #92]	@ (80101c8 <pvPortMalloc+0x18c>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a18      	ldr	r2, [pc, #96]	@ (80101d0 <pvPortMalloc+0x194>)
 8010170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010174:	685a      	ldr	r2, [r3, #4]
 8010176:	4b13      	ldr	r3, [pc, #76]	@ (80101c4 <pvPortMalloc+0x188>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	431a      	orrs	r2, r3
 801017c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801017e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010182:	2200      	movs	r2, #0
 8010184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010186:	4b13      	ldr	r3, [pc, #76]	@ (80101d4 <pvPortMalloc+0x198>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3301      	adds	r3, #1
 801018c:	4a11      	ldr	r2, [pc, #68]	@ (80101d4 <pvPortMalloc+0x198>)
 801018e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010190:	f7fe fcdc 	bl	800eb4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	f003 0307 	and.w	r3, r3, #7
 801019a:	2b00      	cmp	r3, #0
 801019c:	d00b      	beq.n	80101b6 <pvPortMalloc+0x17a>
	__asm volatile
 801019e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	60fb      	str	r3, [r7, #12]
}
 80101b0:	bf00      	nop
 80101b2:	bf00      	nop
 80101b4:	e7fd      	b.n	80101b2 <pvPortMalloc+0x176>
	return pvReturn;
 80101b6:	69fb      	ldr	r3, [r7, #28]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3728      	adds	r7, #40	@ 0x28
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	2400da00 	.word	0x2400da00
 80101c4:	2400da14 	.word	0x2400da14
 80101c8:	2400da04 	.word	0x2400da04
 80101cc:	2400d9f8 	.word	0x2400d9f8
 80101d0:	2400da08 	.word	0x2400da08
 80101d4:	2400da0c 	.word	0x2400da0c

080101d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b086      	sub	sp, #24
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d04f      	beq.n	801028a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80101ea:	2308      	movs	r3, #8
 80101ec:	425b      	negs	r3, r3
 80101ee:	697a      	ldr	r2, [r7, #20]
 80101f0:	4413      	add	r3, r2
 80101f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	4b25      	ldr	r3, [pc, #148]	@ (8010294 <vPortFree+0xbc>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4013      	ands	r3, r2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d10b      	bne.n	801021e <vPortFree+0x46>
	__asm volatile
 8010206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801020a:	f383 8811 	msr	BASEPRI, r3
 801020e:	f3bf 8f6f 	isb	sy
 8010212:	f3bf 8f4f 	dsb	sy
 8010216:	60fb      	str	r3, [r7, #12]
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	e7fd      	b.n	801021a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00b      	beq.n	801023e <vPortFree+0x66>
	__asm volatile
 8010226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801022a:	f383 8811 	msr	BASEPRI, r3
 801022e:	f3bf 8f6f 	isb	sy
 8010232:	f3bf 8f4f 	dsb	sy
 8010236:	60bb      	str	r3, [r7, #8]
}
 8010238:	bf00      	nop
 801023a:	bf00      	nop
 801023c:	e7fd      	b.n	801023a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	685a      	ldr	r2, [r3, #4]
 8010242:	4b14      	ldr	r3, [pc, #80]	@ (8010294 <vPortFree+0xbc>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4013      	ands	r3, r2
 8010248:	2b00      	cmp	r3, #0
 801024a:	d01e      	beq.n	801028a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d11a      	bne.n	801028a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	685a      	ldr	r2, [r3, #4]
 8010258:	4b0e      	ldr	r3, [pc, #56]	@ (8010294 <vPortFree+0xbc>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	43db      	mvns	r3, r3
 801025e:	401a      	ands	r2, r3
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010264:	f7fe fc64 	bl	800eb30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	685a      	ldr	r2, [r3, #4]
 801026c:	4b0a      	ldr	r3, [pc, #40]	@ (8010298 <vPortFree+0xc0>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4413      	add	r3, r2
 8010272:	4a09      	ldr	r2, [pc, #36]	@ (8010298 <vPortFree+0xc0>)
 8010274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010276:	6938      	ldr	r0, [r7, #16]
 8010278:	f000 f874 	bl	8010364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801027c:	4b07      	ldr	r3, [pc, #28]	@ (801029c <vPortFree+0xc4>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	3301      	adds	r3, #1
 8010282:	4a06      	ldr	r2, [pc, #24]	@ (801029c <vPortFree+0xc4>)
 8010284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010286:	f7fe fc61 	bl	800eb4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801028a:	bf00      	nop
 801028c:	3718      	adds	r7, #24
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	2400da14 	.word	0x2400da14
 8010298:	2400da04 	.word	0x2400da04
 801029c:	2400da10 	.word	0x2400da10

080102a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80102a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80102aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80102ac:	4b27      	ldr	r3, [pc, #156]	@ (801034c <prvHeapInit+0xac>)
 80102ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f003 0307 	and.w	r3, r3, #7
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00c      	beq.n	80102d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	3307      	adds	r3, #7
 80102be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f023 0307 	bic.w	r3, r3, #7
 80102c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80102c8:	68ba      	ldr	r2, [r7, #8]
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	4a1f      	ldr	r2, [pc, #124]	@ (801034c <prvHeapInit+0xac>)
 80102d0:	4413      	add	r3, r2
 80102d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80102d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010350 <prvHeapInit+0xb0>)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80102de:	4b1c      	ldr	r3, [pc, #112]	@ (8010350 <prvHeapInit+0xb0>)
 80102e0:	2200      	movs	r2, #0
 80102e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	4413      	add	r3, r2
 80102ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80102ec:	2208      	movs	r2, #8
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	1a9b      	subs	r3, r3, r2
 80102f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f023 0307 	bic.w	r3, r3, #7
 80102fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	4a15      	ldr	r2, [pc, #84]	@ (8010354 <prvHeapInit+0xb4>)
 8010300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010302:	4b14      	ldr	r3, [pc, #80]	@ (8010354 <prvHeapInit+0xb4>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2200      	movs	r2, #0
 8010308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801030a:	4b12      	ldr	r3, [pc, #72]	@ (8010354 <prvHeapInit+0xb4>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2200      	movs	r2, #0
 8010310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	1ad2      	subs	r2, r2, r3
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010320:	4b0c      	ldr	r3, [pc, #48]	@ (8010354 <prvHeapInit+0xb4>)
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	4a0a      	ldr	r2, [pc, #40]	@ (8010358 <prvHeapInit+0xb8>)
 801032e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	4a09      	ldr	r2, [pc, #36]	@ (801035c <prvHeapInit+0xbc>)
 8010336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010338:	4b09      	ldr	r3, [pc, #36]	@ (8010360 <prvHeapInit+0xc0>)
 801033a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801033e:	601a      	str	r2, [r3, #0]
}
 8010340:	bf00      	nop
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr
 801034c:	24009df8 	.word	0x24009df8
 8010350:	2400d9f8 	.word	0x2400d9f8
 8010354:	2400da00 	.word	0x2400da00
 8010358:	2400da08 	.word	0x2400da08
 801035c:	2400da04 	.word	0x2400da04
 8010360:	2400da14 	.word	0x2400da14

08010364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801036c:	4b28      	ldr	r3, [pc, #160]	@ (8010410 <prvInsertBlockIntoFreeList+0xac>)
 801036e:	60fb      	str	r3, [r7, #12]
 8010370:	e002      	b.n	8010378 <prvInsertBlockIntoFreeList+0x14>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	60fb      	str	r3, [r7, #12]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	429a      	cmp	r2, r3
 8010380:	d8f7      	bhi.n	8010372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	68ba      	ldr	r2, [r7, #8]
 801038c:	4413      	add	r3, r2
 801038e:	687a      	ldr	r2, [r7, #4]
 8010390:	429a      	cmp	r2, r3
 8010392:	d108      	bne.n	80103a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	685a      	ldr	r2, [r3, #4]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	441a      	add	r2, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	68ba      	ldr	r2, [r7, #8]
 80103b0:	441a      	add	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d118      	bne.n	80103ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	4b15      	ldr	r3, [pc, #84]	@ (8010414 <prvInsertBlockIntoFreeList+0xb0>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d00d      	beq.n	80103e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	685a      	ldr	r2, [r3, #4]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	441a      	add	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	601a      	str	r2, [r3, #0]
 80103e0:	e008      	b.n	80103f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80103e2:	4b0c      	ldr	r3, [pc, #48]	@ (8010414 <prvInsertBlockIntoFreeList+0xb0>)
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	e003      	b.n	80103f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d002      	beq.n	8010402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010402:	bf00      	nop
 8010404:	3714      	adds	r7, #20
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	2400d9f8 	.word	0x2400d9f8
 8010414:	2400da00 	.word	0x2400da00

08010418 <__cvt>:
 8010418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801041a:	ed2d 8b02 	vpush	{d8}
 801041e:	eeb0 8b40 	vmov.f64	d8, d0
 8010422:	b085      	sub	sp, #20
 8010424:	4617      	mov	r7, r2
 8010426:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010428:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801042a:	ee18 2a90 	vmov	r2, s17
 801042e:	f025 0520 	bic.w	r5, r5, #32
 8010432:	2a00      	cmp	r2, #0
 8010434:	bfb6      	itet	lt
 8010436:	222d      	movlt	r2, #45	@ 0x2d
 8010438:	2200      	movge	r2, #0
 801043a:	eeb1 8b40 	vneglt.f64	d8, d0
 801043e:	2d46      	cmp	r5, #70	@ 0x46
 8010440:	460c      	mov	r4, r1
 8010442:	701a      	strb	r2, [r3, #0]
 8010444:	d004      	beq.n	8010450 <__cvt+0x38>
 8010446:	2d45      	cmp	r5, #69	@ 0x45
 8010448:	d100      	bne.n	801044c <__cvt+0x34>
 801044a:	3401      	adds	r4, #1
 801044c:	2102      	movs	r1, #2
 801044e:	e000      	b.n	8010452 <__cvt+0x3a>
 8010450:	2103      	movs	r1, #3
 8010452:	ab03      	add	r3, sp, #12
 8010454:	9301      	str	r3, [sp, #4]
 8010456:	ab02      	add	r3, sp, #8
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	4622      	mov	r2, r4
 801045c:	4633      	mov	r3, r6
 801045e:	eeb0 0b48 	vmov.f64	d0, d8
 8010462:	f000 ff1d 	bl	80112a0 <_dtoa_r>
 8010466:	2d47      	cmp	r5, #71	@ 0x47
 8010468:	d114      	bne.n	8010494 <__cvt+0x7c>
 801046a:	07fb      	lsls	r3, r7, #31
 801046c:	d50a      	bpl.n	8010484 <__cvt+0x6c>
 801046e:	1902      	adds	r2, r0, r4
 8010470:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010478:	bf08      	it	eq
 801047a:	9203      	streq	r2, [sp, #12]
 801047c:	2130      	movs	r1, #48	@ 0x30
 801047e:	9b03      	ldr	r3, [sp, #12]
 8010480:	4293      	cmp	r3, r2
 8010482:	d319      	bcc.n	80104b8 <__cvt+0xa0>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010488:	1a1b      	subs	r3, r3, r0
 801048a:	6013      	str	r3, [r2, #0]
 801048c:	b005      	add	sp, #20
 801048e:	ecbd 8b02 	vpop	{d8}
 8010492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010494:	2d46      	cmp	r5, #70	@ 0x46
 8010496:	eb00 0204 	add.w	r2, r0, r4
 801049a:	d1e9      	bne.n	8010470 <__cvt+0x58>
 801049c:	7803      	ldrb	r3, [r0, #0]
 801049e:	2b30      	cmp	r3, #48	@ 0x30
 80104a0:	d107      	bne.n	80104b2 <__cvt+0x9a>
 80104a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80104a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104aa:	bf1c      	itt	ne
 80104ac:	f1c4 0401 	rsbne	r4, r4, #1
 80104b0:	6034      	strne	r4, [r6, #0]
 80104b2:	6833      	ldr	r3, [r6, #0]
 80104b4:	441a      	add	r2, r3
 80104b6:	e7db      	b.n	8010470 <__cvt+0x58>
 80104b8:	1c5c      	adds	r4, r3, #1
 80104ba:	9403      	str	r4, [sp, #12]
 80104bc:	7019      	strb	r1, [r3, #0]
 80104be:	e7de      	b.n	801047e <__cvt+0x66>

080104c0 <__exponent>:
 80104c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104c2:	2900      	cmp	r1, #0
 80104c4:	bfba      	itte	lt
 80104c6:	4249      	neglt	r1, r1
 80104c8:	232d      	movlt	r3, #45	@ 0x2d
 80104ca:	232b      	movge	r3, #43	@ 0x2b
 80104cc:	2909      	cmp	r1, #9
 80104ce:	7002      	strb	r2, [r0, #0]
 80104d0:	7043      	strb	r3, [r0, #1]
 80104d2:	dd29      	ble.n	8010528 <__exponent+0x68>
 80104d4:	f10d 0307 	add.w	r3, sp, #7
 80104d8:	461d      	mov	r5, r3
 80104da:	270a      	movs	r7, #10
 80104dc:	461a      	mov	r2, r3
 80104de:	fbb1 f6f7 	udiv	r6, r1, r7
 80104e2:	fb07 1416 	mls	r4, r7, r6, r1
 80104e6:	3430      	adds	r4, #48	@ 0x30
 80104e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80104ec:	460c      	mov	r4, r1
 80104ee:	2c63      	cmp	r4, #99	@ 0x63
 80104f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80104f4:	4631      	mov	r1, r6
 80104f6:	dcf1      	bgt.n	80104dc <__exponent+0x1c>
 80104f8:	3130      	adds	r1, #48	@ 0x30
 80104fa:	1e94      	subs	r4, r2, #2
 80104fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010500:	1c41      	adds	r1, r0, #1
 8010502:	4623      	mov	r3, r4
 8010504:	42ab      	cmp	r3, r5
 8010506:	d30a      	bcc.n	801051e <__exponent+0x5e>
 8010508:	f10d 0309 	add.w	r3, sp, #9
 801050c:	1a9b      	subs	r3, r3, r2
 801050e:	42ac      	cmp	r4, r5
 8010510:	bf88      	it	hi
 8010512:	2300      	movhi	r3, #0
 8010514:	3302      	adds	r3, #2
 8010516:	4403      	add	r3, r0
 8010518:	1a18      	subs	r0, r3, r0
 801051a:	b003      	add	sp, #12
 801051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801051e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010522:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010526:	e7ed      	b.n	8010504 <__exponent+0x44>
 8010528:	2330      	movs	r3, #48	@ 0x30
 801052a:	3130      	adds	r1, #48	@ 0x30
 801052c:	7083      	strb	r3, [r0, #2]
 801052e:	70c1      	strb	r1, [r0, #3]
 8010530:	1d03      	adds	r3, r0, #4
 8010532:	e7f1      	b.n	8010518 <__exponent+0x58>
 8010534:	0000      	movs	r0, r0
	...

08010538 <_printf_float>:
 8010538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801053c:	b08d      	sub	sp, #52	@ 0x34
 801053e:	460c      	mov	r4, r1
 8010540:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010544:	4616      	mov	r6, r2
 8010546:	461f      	mov	r7, r3
 8010548:	4605      	mov	r5, r0
 801054a:	f000 fd3d 	bl	8010fc8 <_localeconv_r>
 801054e:	f8d0 b000 	ldr.w	fp, [r0]
 8010552:	4658      	mov	r0, fp
 8010554:	f7ef ff14 	bl	8000380 <strlen>
 8010558:	2300      	movs	r3, #0
 801055a:	930a      	str	r3, [sp, #40]	@ 0x28
 801055c:	f8d8 3000 	ldr.w	r3, [r8]
 8010560:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010564:	6822      	ldr	r2, [r4, #0]
 8010566:	9005      	str	r0, [sp, #20]
 8010568:	3307      	adds	r3, #7
 801056a:	f023 0307 	bic.w	r3, r3, #7
 801056e:	f103 0108 	add.w	r1, r3, #8
 8010572:	f8c8 1000 	str.w	r1, [r8]
 8010576:	ed93 0b00 	vldr	d0, [r3]
 801057a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80107d8 <_printf_float+0x2a0>
 801057e:	eeb0 7bc0 	vabs.f64	d7, d0
 8010582:	eeb4 7b46 	vcmp.f64	d7, d6
 8010586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801058e:	dd24      	ble.n	80105da <_printf_float+0xa2>
 8010590:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010598:	d502      	bpl.n	80105a0 <_printf_float+0x68>
 801059a:	232d      	movs	r3, #45	@ 0x2d
 801059c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105a0:	498f      	ldr	r1, [pc, #572]	@ (80107e0 <_printf_float+0x2a8>)
 80105a2:	4b90      	ldr	r3, [pc, #576]	@ (80107e4 <_printf_float+0x2ac>)
 80105a4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80105a8:	bf8c      	ite	hi
 80105aa:	4688      	movhi	r8, r1
 80105ac:	4698      	movls	r8, r3
 80105ae:	f022 0204 	bic.w	r2, r2, #4
 80105b2:	2303      	movs	r3, #3
 80105b4:	6123      	str	r3, [r4, #16]
 80105b6:	6022      	str	r2, [r4, #0]
 80105b8:	f04f 0a00 	mov.w	sl, #0
 80105bc:	9700      	str	r7, [sp, #0]
 80105be:	4633      	mov	r3, r6
 80105c0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80105c2:	4621      	mov	r1, r4
 80105c4:	4628      	mov	r0, r5
 80105c6:	f000 f9d1 	bl	801096c <_printf_common>
 80105ca:	3001      	adds	r0, #1
 80105cc:	f040 8089 	bne.w	80106e2 <_printf_float+0x1aa>
 80105d0:	f04f 30ff 	mov.w	r0, #4294967295
 80105d4:	b00d      	add	sp, #52	@ 0x34
 80105d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105da:	eeb4 0b40 	vcmp.f64	d0, d0
 80105de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e2:	d709      	bvc.n	80105f8 <_printf_float+0xc0>
 80105e4:	ee10 3a90 	vmov	r3, s1
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bfbc      	itt	lt
 80105ec:	232d      	movlt	r3, #45	@ 0x2d
 80105ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80105f2:	497d      	ldr	r1, [pc, #500]	@ (80107e8 <_printf_float+0x2b0>)
 80105f4:	4b7d      	ldr	r3, [pc, #500]	@ (80107ec <_printf_float+0x2b4>)
 80105f6:	e7d5      	b.n	80105a4 <_printf_float+0x6c>
 80105f8:	6863      	ldr	r3, [r4, #4]
 80105fa:	1c59      	adds	r1, r3, #1
 80105fc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010600:	d139      	bne.n	8010676 <_printf_float+0x13e>
 8010602:	2306      	movs	r3, #6
 8010604:	6063      	str	r3, [r4, #4]
 8010606:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801060a:	2300      	movs	r3, #0
 801060c:	6022      	str	r2, [r4, #0]
 801060e:	9303      	str	r3, [sp, #12]
 8010610:	ab0a      	add	r3, sp, #40	@ 0x28
 8010612:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010616:	ab09      	add	r3, sp, #36	@ 0x24
 8010618:	9300      	str	r3, [sp, #0]
 801061a:	6861      	ldr	r1, [r4, #4]
 801061c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010620:	4628      	mov	r0, r5
 8010622:	f7ff fef9 	bl	8010418 <__cvt>
 8010626:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801062a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801062c:	4680      	mov	r8, r0
 801062e:	d129      	bne.n	8010684 <_printf_float+0x14c>
 8010630:	1cc8      	adds	r0, r1, #3
 8010632:	db02      	blt.n	801063a <_printf_float+0x102>
 8010634:	6863      	ldr	r3, [r4, #4]
 8010636:	4299      	cmp	r1, r3
 8010638:	dd41      	ble.n	80106be <_printf_float+0x186>
 801063a:	f1a9 0902 	sub.w	r9, r9, #2
 801063e:	fa5f f989 	uxtb.w	r9, r9
 8010642:	3901      	subs	r1, #1
 8010644:	464a      	mov	r2, r9
 8010646:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801064a:	9109      	str	r1, [sp, #36]	@ 0x24
 801064c:	f7ff ff38 	bl	80104c0 <__exponent>
 8010650:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010652:	1813      	adds	r3, r2, r0
 8010654:	2a01      	cmp	r2, #1
 8010656:	4682      	mov	sl, r0
 8010658:	6123      	str	r3, [r4, #16]
 801065a:	dc02      	bgt.n	8010662 <_printf_float+0x12a>
 801065c:	6822      	ldr	r2, [r4, #0]
 801065e:	07d2      	lsls	r2, r2, #31
 8010660:	d501      	bpl.n	8010666 <_printf_float+0x12e>
 8010662:	3301      	adds	r3, #1
 8010664:	6123      	str	r3, [r4, #16]
 8010666:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801066a:	2b00      	cmp	r3, #0
 801066c:	d0a6      	beq.n	80105bc <_printf_float+0x84>
 801066e:	232d      	movs	r3, #45	@ 0x2d
 8010670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010674:	e7a2      	b.n	80105bc <_printf_float+0x84>
 8010676:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801067a:	d1c4      	bne.n	8010606 <_printf_float+0xce>
 801067c:	2b00      	cmp	r3, #0
 801067e:	d1c2      	bne.n	8010606 <_printf_float+0xce>
 8010680:	2301      	movs	r3, #1
 8010682:	e7bf      	b.n	8010604 <_printf_float+0xcc>
 8010684:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010688:	d9db      	bls.n	8010642 <_printf_float+0x10a>
 801068a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801068e:	d118      	bne.n	80106c2 <_printf_float+0x18a>
 8010690:	2900      	cmp	r1, #0
 8010692:	6863      	ldr	r3, [r4, #4]
 8010694:	dd0b      	ble.n	80106ae <_printf_float+0x176>
 8010696:	6121      	str	r1, [r4, #16]
 8010698:	b913      	cbnz	r3, 80106a0 <_printf_float+0x168>
 801069a:	6822      	ldr	r2, [r4, #0]
 801069c:	07d0      	lsls	r0, r2, #31
 801069e:	d502      	bpl.n	80106a6 <_printf_float+0x16e>
 80106a0:	3301      	adds	r3, #1
 80106a2:	440b      	add	r3, r1
 80106a4:	6123      	str	r3, [r4, #16]
 80106a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80106a8:	f04f 0a00 	mov.w	sl, #0
 80106ac:	e7db      	b.n	8010666 <_printf_float+0x12e>
 80106ae:	b913      	cbnz	r3, 80106b6 <_printf_float+0x17e>
 80106b0:	6822      	ldr	r2, [r4, #0]
 80106b2:	07d2      	lsls	r2, r2, #31
 80106b4:	d501      	bpl.n	80106ba <_printf_float+0x182>
 80106b6:	3302      	adds	r3, #2
 80106b8:	e7f4      	b.n	80106a4 <_printf_float+0x16c>
 80106ba:	2301      	movs	r3, #1
 80106bc:	e7f2      	b.n	80106a4 <_printf_float+0x16c>
 80106be:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80106c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106c4:	4299      	cmp	r1, r3
 80106c6:	db05      	blt.n	80106d4 <_printf_float+0x19c>
 80106c8:	6823      	ldr	r3, [r4, #0]
 80106ca:	6121      	str	r1, [r4, #16]
 80106cc:	07d8      	lsls	r0, r3, #31
 80106ce:	d5ea      	bpl.n	80106a6 <_printf_float+0x16e>
 80106d0:	1c4b      	adds	r3, r1, #1
 80106d2:	e7e7      	b.n	80106a4 <_printf_float+0x16c>
 80106d4:	2900      	cmp	r1, #0
 80106d6:	bfd4      	ite	le
 80106d8:	f1c1 0202 	rsble	r2, r1, #2
 80106dc:	2201      	movgt	r2, #1
 80106de:	4413      	add	r3, r2
 80106e0:	e7e0      	b.n	80106a4 <_printf_float+0x16c>
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	055a      	lsls	r2, r3, #21
 80106e6:	d407      	bmi.n	80106f8 <_printf_float+0x1c0>
 80106e8:	6923      	ldr	r3, [r4, #16]
 80106ea:	4642      	mov	r2, r8
 80106ec:	4631      	mov	r1, r6
 80106ee:	4628      	mov	r0, r5
 80106f0:	47b8      	blx	r7
 80106f2:	3001      	adds	r0, #1
 80106f4:	d12a      	bne.n	801074c <_printf_float+0x214>
 80106f6:	e76b      	b.n	80105d0 <_printf_float+0x98>
 80106f8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80106fc:	f240 80e0 	bls.w	80108c0 <_printf_float+0x388>
 8010700:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010704:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070c:	d133      	bne.n	8010776 <_printf_float+0x23e>
 801070e:	4a38      	ldr	r2, [pc, #224]	@ (80107f0 <_printf_float+0x2b8>)
 8010710:	2301      	movs	r3, #1
 8010712:	4631      	mov	r1, r6
 8010714:	4628      	mov	r0, r5
 8010716:	47b8      	blx	r7
 8010718:	3001      	adds	r0, #1
 801071a:	f43f af59 	beq.w	80105d0 <_printf_float+0x98>
 801071e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010722:	4543      	cmp	r3, r8
 8010724:	db02      	blt.n	801072c <_printf_float+0x1f4>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	07d8      	lsls	r0, r3, #31
 801072a:	d50f      	bpl.n	801074c <_printf_float+0x214>
 801072c:	9b05      	ldr	r3, [sp, #20]
 801072e:	465a      	mov	r2, fp
 8010730:	4631      	mov	r1, r6
 8010732:	4628      	mov	r0, r5
 8010734:	47b8      	blx	r7
 8010736:	3001      	adds	r0, #1
 8010738:	f43f af4a 	beq.w	80105d0 <_printf_float+0x98>
 801073c:	f04f 0900 	mov.w	r9, #0
 8010740:	f108 38ff 	add.w	r8, r8, #4294967295
 8010744:	f104 0a1a 	add.w	sl, r4, #26
 8010748:	45c8      	cmp	r8, r9
 801074a:	dc09      	bgt.n	8010760 <_printf_float+0x228>
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	079b      	lsls	r3, r3, #30
 8010750:	f100 8107 	bmi.w	8010962 <_printf_float+0x42a>
 8010754:	68e0      	ldr	r0, [r4, #12]
 8010756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010758:	4298      	cmp	r0, r3
 801075a:	bfb8      	it	lt
 801075c:	4618      	movlt	r0, r3
 801075e:	e739      	b.n	80105d4 <_printf_float+0x9c>
 8010760:	2301      	movs	r3, #1
 8010762:	4652      	mov	r2, sl
 8010764:	4631      	mov	r1, r6
 8010766:	4628      	mov	r0, r5
 8010768:	47b8      	blx	r7
 801076a:	3001      	adds	r0, #1
 801076c:	f43f af30 	beq.w	80105d0 <_printf_float+0x98>
 8010770:	f109 0901 	add.w	r9, r9, #1
 8010774:	e7e8      	b.n	8010748 <_printf_float+0x210>
 8010776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010778:	2b00      	cmp	r3, #0
 801077a:	dc3b      	bgt.n	80107f4 <_printf_float+0x2bc>
 801077c:	4a1c      	ldr	r2, [pc, #112]	@ (80107f0 <_printf_float+0x2b8>)
 801077e:	2301      	movs	r3, #1
 8010780:	4631      	mov	r1, r6
 8010782:	4628      	mov	r0, r5
 8010784:	47b8      	blx	r7
 8010786:	3001      	adds	r0, #1
 8010788:	f43f af22 	beq.w	80105d0 <_printf_float+0x98>
 801078c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010790:	ea59 0303 	orrs.w	r3, r9, r3
 8010794:	d102      	bne.n	801079c <_printf_float+0x264>
 8010796:	6823      	ldr	r3, [r4, #0]
 8010798:	07d9      	lsls	r1, r3, #31
 801079a:	d5d7      	bpl.n	801074c <_printf_float+0x214>
 801079c:	9b05      	ldr	r3, [sp, #20]
 801079e:	465a      	mov	r2, fp
 80107a0:	4631      	mov	r1, r6
 80107a2:	4628      	mov	r0, r5
 80107a4:	47b8      	blx	r7
 80107a6:	3001      	adds	r0, #1
 80107a8:	f43f af12 	beq.w	80105d0 <_printf_float+0x98>
 80107ac:	f04f 0a00 	mov.w	sl, #0
 80107b0:	f104 0b1a 	add.w	fp, r4, #26
 80107b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107b6:	425b      	negs	r3, r3
 80107b8:	4553      	cmp	r3, sl
 80107ba:	dc01      	bgt.n	80107c0 <_printf_float+0x288>
 80107bc:	464b      	mov	r3, r9
 80107be:	e794      	b.n	80106ea <_printf_float+0x1b2>
 80107c0:	2301      	movs	r3, #1
 80107c2:	465a      	mov	r2, fp
 80107c4:	4631      	mov	r1, r6
 80107c6:	4628      	mov	r0, r5
 80107c8:	47b8      	blx	r7
 80107ca:	3001      	adds	r0, #1
 80107cc:	f43f af00 	beq.w	80105d0 <_printf_float+0x98>
 80107d0:	f10a 0a01 	add.w	sl, sl, #1
 80107d4:	e7ee      	b.n	80107b4 <_printf_float+0x27c>
 80107d6:	bf00      	nop
 80107d8:	ffffffff 	.word	0xffffffff
 80107dc:	7fefffff 	.word	0x7fefffff
 80107e0:	08012e54 	.word	0x08012e54
 80107e4:	08012e50 	.word	0x08012e50
 80107e8:	08012e5c 	.word	0x08012e5c
 80107ec:	08012e58 	.word	0x08012e58
 80107f0:	08012e60 	.word	0x08012e60
 80107f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80107f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80107fa:	4553      	cmp	r3, sl
 80107fc:	bfa8      	it	ge
 80107fe:	4653      	movge	r3, sl
 8010800:	2b00      	cmp	r3, #0
 8010802:	4699      	mov	r9, r3
 8010804:	dc37      	bgt.n	8010876 <_printf_float+0x33e>
 8010806:	2300      	movs	r3, #0
 8010808:	9307      	str	r3, [sp, #28]
 801080a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801080e:	f104 021a 	add.w	r2, r4, #26
 8010812:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010814:	9907      	ldr	r1, [sp, #28]
 8010816:	9306      	str	r3, [sp, #24]
 8010818:	eba3 0309 	sub.w	r3, r3, r9
 801081c:	428b      	cmp	r3, r1
 801081e:	dc31      	bgt.n	8010884 <_printf_float+0x34c>
 8010820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010822:	459a      	cmp	sl, r3
 8010824:	dc3b      	bgt.n	801089e <_printf_float+0x366>
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	07da      	lsls	r2, r3, #31
 801082a:	d438      	bmi.n	801089e <_printf_float+0x366>
 801082c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801082e:	ebaa 0903 	sub.w	r9, sl, r3
 8010832:	9b06      	ldr	r3, [sp, #24]
 8010834:	ebaa 0303 	sub.w	r3, sl, r3
 8010838:	4599      	cmp	r9, r3
 801083a:	bfa8      	it	ge
 801083c:	4699      	movge	r9, r3
 801083e:	f1b9 0f00 	cmp.w	r9, #0
 8010842:	dc34      	bgt.n	80108ae <_printf_float+0x376>
 8010844:	f04f 0800 	mov.w	r8, #0
 8010848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801084c:	f104 0b1a 	add.w	fp, r4, #26
 8010850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010852:	ebaa 0303 	sub.w	r3, sl, r3
 8010856:	eba3 0309 	sub.w	r3, r3, r9
 801085a:	4543      	cmp	r3, r8
 801085c:	f77f af76 	ble.w	801074c <_printf_float+0x214>
 8010860:	2301      	movs	r3, #1
 8010862:	465a      	mov	r2, fp
 8010864:	4631      	mov	r1, r6
 8010866:	4628      	mov	r0, r5
 8010868:	47b8      	blx	r7
 801086a:	3001      	adds	r0, #1
 801086c:	f43f aeb0 	beq.w	80105d0 <_printf_float+0x98>
 8010870:	f108 0801 	add.w	r8, r8, #1
 8010874:	e7ec      	b.n	8010850 <_printf_float+0x318>
 8010876:	4642      	mov	r2, r8
 8010878:	4631      	mov	r1, r6
 801087a:	4628      	mov	r0, r5
 801087c:	47b8      	blx	r7
 801087e:	3001      	adds	r0, #1
 8010880:	d1c1      	bne.n	8010806 <_printf_float+0x2ce>
 8010882:	e6a5      	b.n	80105d0 <_printf_float+0x98>
 8010884:	2301      	movs	r3, #1
 8010886:	4631      	mov	r1, r6
 8010888:	4628      	mov	r0, r5
 801088a:	9206      	str	r2, [sp, #24]
 801088c:	47b8      	blx	r7
 801088e:	3001      	adds	r0, #1
 8010890:	f43f ae9e 	beq.w	80105d0 <_printf_float+0x98>
 8010894:	9b07      	ldr	r3, [sp, #28]
 8010896:	9a06      	ldr	r2, [sp, #24]
 8010898:	3301      	adds	r3, #1
 801089a:	9307      	str	r3, [sp, #28]
 801089c:	e7b9      	b.n	8010812 <_printf_float+0x2da>
 801089e:	9b05      	ldr	r3, [sp, #20]
 80108a0:	465a      	mov	r2, fp
 80108a2:	4631      	mov	r1, r6
 80108a4:	4628      	mov	r0, r5
 80108a6:	47b8      	blx	r7
 80108a8:	3001      	adds	r0, #1
 80108aa:	d1bf      	bne.n	801082c <_printf_float+0x2f4>
 80108ac:	e690      	b.n	80105d0 <_printf_float+0x98>
 80108ae:	9a06      	ldr	r2, [sp, #24]
 80108b0:	464b      	mov	r3, r9
 80108b2:	4442      	add	r2, r8
 80108b4:	4631      	mov	r1, r6
 80108b6:	4628      	mov	r0, r5
 80108b8:	47b8      	blx	r7
 80108ba:	3001      	adds	r0, #1
 80108bc:	d1c2      	bne.n	8010844 <_printf_float+0x30c>
 80108be:	e687      	b.n	80105d0 <_printf_float+0x98>
 80108c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80108c4:	f1b9 0f01 	cmp.w	r9, #1
 80108c8:	dc01      	bgt.n	80108ce <_printf_float+0x396>
 80108ca:	07db      	lsls	r3, r3, #31
 80108cc:	d536      	bpl.n	801093c <_printf_float+0x404>
 80108ce:	2301      	movs	r3, #1
 80108d0:	4642      	mov	r2, r8
 80108d2:	4631      	mov	r1, r6
 80108d4:	4628      	mov	r0, r5
 80108d6:	47b8      	blx	r7
 80108d8:	3001      	adds	r0, #1
 80108da:	f43f ae79 	beq.w	80105d0 <_printf_float+0x98>
 80108de:	9b05      	ldr	r3, [sp, #20]
 80108e0:	465a      	mov	r2, fp
 80108e2:	4631      	mov	r1, r6
 80108e4:	4628      	mov	r0, r5
 80108e6:	47b8      	blx	r7
 80108e8:	3001      	adds	r0, #1
 80108ea:	f43f ae71 	beq.w	80105d0 <_printf_float+0x98>
 80108ee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80108f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80108fe:	d018      	beq.n	8010932 <_printf_float+0x3fa>
 8010900:	464b      	mov	r3, r9
 8010902:	f108 0201 	add.w	r2, r8, #1
 8010906:	4631      	mov	r1, r6
 8010908:	4628      	mov	r0, r5
 801090a:	47b8      	blx	r7
 801090c:	3001      	adds	r0, #1
 801090e:	d10c      	bne.n	801092a <_printf_float+0x3f2>
 8010910:	e65e      	b.n	80105d0 <_printf_float+0x98>
 8010912:	2301      	movs	r3, #1
 8010914:	465a      	mov	r2, fp
 8010916:	4631      	mov	r1, r6
 8010918:	4628      	mov	r0, r5
 801091a:	47b8      	blx	r7
 801091c:	3001      	adds	r0, #1
 801091e:	f43f ae57 	beq.w	80105d0 <_printf_float+0x98>
 8010922:	f108 0801 	add.w	r8, r8, #1
 8010926:	45c8      	cmp	r8, r9
 8010928:	dbf3      	blt.n	8010912 <_printf_float+0x3da>
 801092a:	4653      	mov	r3, sl
 801092c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010930:	e6dc      	b.n	80106ec <_printf_float+0x1b4>
 8010932:	f04f 0800 	mov.w	r8, #0
 8010936:	f104 0b1a 	add.w	fp, r4, #26
 801093a:	e7f4      	b.n	8010926 <_printf_float+0x3ee>
 801093c:	2301      	movs	r3, #1
 801093e:	4642      	mov	r2, r8
 8010940:	e7e1      	b.n	8010906 <_printf_float+0x3ce>
 8010942:	2301      	movs	r3, #1
 8010944:	464a      	mov	r2, r9
 8010946:	4631      	mov	r1, r6
 8010948:	4628      	mov	r0, r5
 801094a:	47b8      	blx	r7
 801094c:	3001      	adds	r0, #1
 801094e:	f43f ae3f 	beq.w	80105d0 <_printf_float+0x98>
 8010952:	f108 0801 	add.w	r8, r8, #1
 8010956:	68e3      	ldr	r3, [r4, #12]
 8010958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801095a:	1a5b      	subs	r3, r3, r1
 801095c:	4543      	cmp	r3, r8
 801095e:	dcf0      	bgt.n	8010942 <_printf_float+0x40a>
 8010960:	e6f8      	b.n	8010754 <_printf_float+0x21c>
 8010962:	f04f 0800 	mov.w	r8, #0
 8010966:	f104 0919 	add.w	r9, r4, #25
 801096a:	e7f4      	b.n	8010956 <_printf_float+0x41e>

0801096c <_printf_common>:
 801096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010970:	4616      	mov	r6, r2
 8010972:	4698      	mov	r8, r3
 8010974:	688a      	ldr	r2, [r1, #8]
 8010976:	690b      	ldr	r3, [r1, #16]
 8010978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801097c:	4293      	cmp	r3, r2
 801097e:	bfb8      	it	lt
 8010980:	4613      	movlt	r3, r2
 8010982:	6033      	str	r3, [r6, #0]
 8010984:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010988:	4607      	mov	r7, r0
 801098a:	460c      	mov	r4, r1
 801098c:	b10a      	cbz	r2, 8010992 <_printf_common+0x26>
 801098e:	3301      	adds	r3, #1
 8010990:	6033      	str	r3, [r6, #0]
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	0699      	lsls	r1, r3, #26
 8010996:	bf42      	ittt	mi
 8010998:	6833      	ldrmi	r3, [r6, #0]
 801099a:	3302      	addmi	r3, #2
 801099c:	6033      	strmi	r3, [r6, #0]
 801099e:	6825      	ldr	r5, [r4, #0]
 80109a0:	f015 0506 	ands.w	r5, r5, #6
 80109a4:	d106      	bne.n	80109b4 <_printf_common+0x48>
 80109a6:	f104 0a19 	add.w	sl, r4, #25
 80109aa:	68e3      	ldr	r3, [r4, #12]
 80109ac:	6832      	ldr	r2, [r6, #0]
 80109ae:	1a9b      	subs	r3, r3, r2
 80109b0:	42ab      	cmp	r3, r5
 80109b2:	dc26      	bgt.n	8010a02 <_printf_common+0x96>
 80109b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80109b8:	6822      	ldr	r2, [r4, #0]
 80109ba:	3b00      	subs	r3, #0
 80109bc:	bf18      	it	ne
 80109be:	2301      	movne	r3, #1
 80109c0:	0692      	lsls	r2, r2, #26
 80109c2:	d42b      	bmi.n	8010a1c <_printf_common+0xb0>
 80109c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80109c8:	4641      	mov	r1, r8
 80109ca:	4638      	mov	r0, r7
 80109cc:	47c8      	blx	r9
 80109ce:	3001      	adds	r0, #1
 80109d0:	d01e      	beq.n	8010a10 <_printf_common+0xa4>
 80109d2:	6823      	ldr	r3, [r4, #0]
 80109d4:	6922      	ldr	r2, [r4, #16]
 80109d6:	f003 0306 	and.w	r3, r3, #6
 80109da:	2b04      	cmp	r3, #4
 80109dc:	bf02      	ittt	eq
 80109de:	68e5      	ldreq	r5, [r4, #12]
 80109e0:	6833      	ldreq	r3, [r6, #0]
 80109e2:	1aed      	subeq	r5, r5, r3
 80109e4:	68a3      	ldr	r3, [r4, #8]
 80109e6:	bf0c      	ite	eq
 80109e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109ec:	2500      	movne	r5, #0
 80109ee:	4293      	cmp	r3, r2
 80109f0:	bfc4      	itt	gt
 80109f2:	1a9b      	subgt	r3, r3, r2
 80109f4:	18ed      	addgt	r5, r5, r3
 80109f6:	2600      	movs	r6, #0
 80109f8:	341a      	adds	r4, #26
 80109fa:	42b5      	cmp	r5, r6
 80109fc:	d11a      	bne.n	8010a34 <_printf_common+0xc8>
 80109fe:	2000      	movs	r0, #0
 8010a00:	e008      	b.n	8010a14 <_printf_common+0xa8>
 8010a02:	2301      	movs	r3, #1
 8010a04:	4652      	mov	r2, sl
 8010a06:	4641      	mov	r1, r8
 8010a08:	4638      	mov	r0, r7
 8010a0a:	47c8      	blx	r9
 8010a0c:	3001      	adds	r0, #1
 8010a0e:	d103      	bne.n	8010a18 <_printf_common+0xac>
 8010a10:	f04f 30ff 	mov.w	r0, #4294967295
 8010a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a18:	3501      	adds	r5, #1
 8010a1a:	e7c6      	b.n	80109aa <_printf_common+0x3e>
 8010a1c:	18e1      	adds	r1, r4, r3
 8010a1e:	1c5a      	adds	r2, r3, #1
 8010a20:	2030      	movs	r0, #48	@ 0x30
 8010a22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010a26:	4422      	add	r2, r4
 8010a28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010a2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010a30:	3302      	adds	r3, #2
 8010a32:	e7c7      	b.n	80109c4 <_printf_common+0x58>
 8010a34:	2301      	movs	r3, #1
 8010a36:	4622      	mov	r2, r4
 8010a38:	4641      	mov	r1, r8
 8010a3a:	4638      	mov	r0, r7
 8010a3c:	47c8      	blx	r9
 8010a3e:	3001      	adds	r0, #1
 8010a40:	d0e6      	beq.n	8010a10 <_printf_common+0xa4>
 8010a42:	3601      	adds	r6, #1
 8010a44:	e7d9      	b.n	80109fa <_printf_common+0x8e>
	...

08010a48 <_printf_i>:
 8010a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a4c:	7e0f      	ldrb	r7, [r1, #24]
 8010a4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010a50:	2f78      	cmp	r7, #120	@ 0x78
 8010a52:	4691      	mov	r9, r2
 8010a54:	4680      	mov	r8, r0
 8010a56:	460c      	mov	r4, r1
 8010a58:	469a      	mov	sl, r3
 8010a5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010a5e:	d807      	bhi.n	8010a70 <_printf_i+0x28>
 8010a60:	2f62      	cmp	r7, #98	@ 0x62
 8010a62:	d80a      	bhi.n	8010a7a <_printf_i+0x32>
 8010a64:	2f00      	cmp	r7, #0
 8010a66:	f000 80d1 	beq.w	8010c0c <_printf_i+0x1c4>
 8010a6a:	2f58      	cmp	r7, #88	@ 0x58
 8010a6c:	f000 80b8 	beq.w	8010be0 <_printf_i+0x198>
 8010a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010a78:	e03a      	b.n	8010af0 <_printf_i+0xa8>
 8010a7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010a7e:	2b15      	cmp	r3, #21
 8010a80:	d8f6      	bhi.n	8010a70 <_printf_i+0x28>
 8010a82:	a101      	add	r1, pc, #4	@ (adr r1, 8010a88 <_printf_i+0x40>)
 8010a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a88:	08010ae1 	.word	0x08010ae1
 8010a8c:	08010af5 	.word	0x08010af5
 8010a90:	08010a71 	.word	0x08010a71
 8010a94:	08010a71 	.word	0x08010a71
 8010a98:	08010a71 	.word	0x08010a71
 8010a9c:	08010a71 	.word	0x08010a71
 8010aa0:	08010af5 	.word	0x08010af5
 8010aa4:	08010a71 	.word	0x08010a71
 8010aa8:	08010a71 	.word	0x08010a71
 8010aac:	08010a71 	.word	0x08010a71
 8010ab0:	08010a71 	.word	0x08010a71
 8010ab4:	08010bf3 	.word	0x08010bf3
 8010ab8:	08010b1f 	.word	0x08010b1f
 8010abc:	08010bad 	.word	0x08010bad
 8010ac0:	08010a71 	.word	0x08010a71
 8010ac4:	08010a71 	.word	0x08010a71
 8010ac8:	08010c15 	.word	0x08010c15
 8010acc:	08010a71 	.word	0x08010a71
 8010ad0:	08010b1f 	.word	0x08010b1f
 8010ad4:	08010a71 	.word	0x08010a71
 8010ad8:	08010a71 	.word	0x08010a71
 8010adc:	08010bb5 	.word	0x08010bb5
 8010ae0:	6833      	ldr	r3, [r6, #0]
 8010ae2:	1d1a      	adds	r2, r3, #4
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	6032      	str	r2, [r6, #0]
 8010ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010af0:	2301      	movs	r3, #1
 8010af2:	e09c      	b.n	8010c2e <_printf_i+0x1e6>
 8010af4:	6833      	ldr	r3, [r6, #0]
 8010af6:	6820      	ldr	r0, [r4, #0]
 8010af8:	1d19      	adds	r1, r3, #4
 8010afa:	6031      	str	r1, [r6, #0]
 8010afc:	0606      	lsls	r6, r0, #24
 8010afe:	d501      	bpl.n	8010b04 <_printf_i+0xbc>
 8010b00:	681d      	ldr	r5, [r3, #0]
 8010b02:	e003      	b.n	8010b0c <_printf_i+0xc4>
 8010b04:	0645      	lsls	r5, r0, #25
 8010b06:	d5fb      	bpl.n	8010b00 <_printf_i+0xb8>
 8010b08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010b0c:	2d00      	cmp	r5, #0
 8010b0e:	da03      	bge.n	8010b18 <_printf_i+0xd0>
 8010b10:	232d      	movs	r3, #45	@ 0x2d
 8010b12:	426d      	negs	r5, r5
 8010b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b18:	4858      	ldr	r0, [pc, #352]	@ (8010c7c <_printf_i+0x234>)
 8010b1a:	230a      	movs	r3, #10
 8010b1c:	e011      	b.n	8010b42 <_printf_i+0xfa>
 8010b1e:	6821      	ldr	r1, [r4, #0]
 8010b20:	6833      	ldr	r3, [r6, #0]
 8010b22:	0608      	lsls	r0, r1, #24
 8010b24:	f853 5b04 	ldr.w	r5, [r3], #4
 8010b28:	d402      	bmi.n	8010b30 <_printf_i+0xe8>
 8010b2a:	0649      	lsls	r1, r1, #25
 8010b2c:	bf48      	it	mi
 8010b2e:	b2ad      	uxthmi	r5, r5
 8010b30:	2f6f      	cmp	r7, #111	@ 0x6f
 8010b32:	4852      	ldr	r0, [pc, #328]	@ (8010c7c <_printf_i+0x234>)
 8010b34:	6033      	str	r3, [r6, #0]
 8010b36:	bf14      	ite	ne
 8010b38:	230a      	movne	r3, #10
 8010b3a:	2308      	moveq	r3, #8
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010b42:	6866      	ldr	r6, [r4, #4]
 8010b44:	60a6      	str	r6, [r4, #8]
 8010b46:	2e00      	cmp	r6, #0
 8010b48:	db05      	blt.n	8010b56 <_printf_i+0x10e>
 8010b4a:	6821      	ldr	r1, [r4, #0]
 8010b4c:	432e      	orrs	r6, r5
 8010b4e:	f021 0104 	bic.w	r1, r1, #4
 8010b52:	6021      	str	r1, [r4, #0]
 8010b54:	d04b      	beq.n	8010bee <_printf_i+0x1a6>
 8010b56:	4616      	mov	r6, r2
 8010b58:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b5c:	fb03 5711 	mls	r7, r3, r1, r5
 8010b60:	5dc7      	ldrb	r7, [r0, r7]
 8010b62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b66:	462f      	mov	r7, r5
 8010b68:	42bb      	cmp	r3, r7
 8010b6a:	460d      	mov	r5, r1
 8010b6c:	d9f4      	bls.n	8010b58 <_printf_i+0x110>
 8010b6e:	2b08      	cmp	r3, #8
 8010b70:	d10b      	bne.n	8010b8a <_printf_i+0x142>
 8010b72:	6823      	ldr	r3, [r4, #0]
 8010b74:	07df      	lsls	r7, r3, #31
 8010b76:	d508      	bpl.n	8010b8a <_printf_i+0x142>
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	6861      	ldr	r1, [r4, #4]
 8010b7c:	4299      	cmp	r1, r3
 8010b7e:	bfde      	ittt	le
 8010b80:	2330      	movle	r3, #48	@ 0x30
 8010b82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b8a:	1b92      	subs	r2, r2, r6
 8010b8c:	6122      	str	r2, [r4, #16]
 8010b8e:	f8cd a000 	str.w	sl, [sp]
 8010b92:	464b      	mov	r3, r9
 8010b94:	aa03      	add	r2, sp, #12
 8010b96:	4621      	mov	r1, r4
 8010b98:	4640      	mov	r0, r8
 8010b9a:	f7ff fee7 	bl	801096c <_printf_common>
 8010b9e:	3001      	adds	r0, #1
 8010ba0:	d14a      	bne.n	8010c38 <_printf_i+0x1f0>
 8010ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba6:	b004      	add	sp, #16
 8010ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	f043 0320 	orr.w	r3, r3, #32
 8010bb2:	6023      	str	r3, [r4, #0]
 8010bb4:	4832      	ldr	r0, [pc, #200]	@ (8010c80 <_printf_i+0x238>)
 8010bb6:	2778      	movs	r7, #120	@ 0x78
 8010bb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010bbc:	6823      	ldr	r3, [r4, #0]
 8010bbe:	6831      	ldr	r1, [r6, #0]
 8010bc0:	061f      	lsls	r7, r3, #24
 8010bc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8010bc6:	d402      	bmi.n	8010bce <_printf_i+0x186>
 8010bc8:	065f      	lsls	r7, r3, #25
 8010bca:	bf48      	it	mi
 8010bcc:	b2ad      	uxthmi	r5, r5
 8010bce:	6031      	str	r1, [r6, #0]
 8010bd0:	07d9      	lsls	r1, r3, #31
 8010bd2:	bf44      	itt	mi
 8010bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8010bd8:	6023      	strmi	r3, [r4, #0]
 8010bda:	b11d      	cbz	r5, 8010be4 <_printf_i+0x19c>
 8010bdc:	2310      	movs	r3, #16
 8010bde:	e7ad      	b.n	8010b3c <_printf_i+0xf4>
 8010be0:	4826      	ldr	r0, [pc, #152]	@ (8010c7c <_printf_i+0x234>)
 8010be2:	e7e9      	b.n	8010bb8 <_printf_i+0x170>
 8010be4:	6823      	ldr	r3, [r4, #0]
 8010be6:	f023 0320 	bic.w	r3, r3, #32
 8010bea:	6023      	str	r3, [r4, #0]
 8010bec:	e7f6      	b.n	8010bdc <_printf_i+0x194>
 8010bee:	4616      	mov	r6, r2
 8010bf0:	e7bd      	b.n	8010b6e <_printf_i+0x126>
 8010bf2:	6833      	ldr	r3, [r6, #0]
 8010bf4:	6825      	ldr	r5, [r4, #0]
 8010bf6:	6961      	ldr	r1, [r4, #20]
 8010bf8:	1d18      	adds	r0, r3, #4
 8010bfa:	6030      	str	r0, [r6, #0]
 8010bfc:	062e      	lsls	r6, r5, #24
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	d501      	bpl.n	8010c06 <_printf_i+0x1be>
 8010c02:	6019      	str	r1, [r3, #0]
 8010c04:	e002      	b.n	8010c0c <_printf_i+0x1c4>
 8010c06:	0668      	lsls	r0, r5, #25
 8010c08:	d5fb      	bpl.n	8010c02 <_printf_i+0x1ba>
 8010c0a:	8019      	strh	r1, [r3, #0]
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	6123      	str	r3, [r4, #16]
 8010c10:	4616      	mov	r6, r2
 8010c12:	e7bc      	b.n	8010b8e <_printf_i+0x146>
 8010c14:	6833      	ldr	r3, [r6, #0]
 8010c16:	1d1a      	adds	r2, r3, #4
 8010c18:	6032      	str	r2, [r6, #0]
 8010c1a:	681e      	ldr	r6, [r3, #0]
 8010c1c:	6862      	ldr	r2, [r4, #4]
 8010c1e:	2100      	movs	r1, #0
 8010c20:	4630      	mov	r0, r6
 8010c22:	f7ef fb5d 	bl	80002e0 <memchr>
 8010c26:	b108      	cbz	r0, 8010c2c <_printf_i+0x1e4>
 8010c28:	1b80      	subs	r0, r0, r6
 8010c2a:	6060      	str	r0, [r4, #4]
 8010c2c:	6863      	ldr	r3, [r4, #4]
 8010c2e:	6123      	str	r3, [r4, #16]
 8010c30:	2300      	movs	r3, #0
 8010c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c36:	e7aa      	b.n	8010b8e <_printf_i+0x146>
 8010c38:	6923      	ldr	r3, [r4, #16]
 8010c3a:	4632      	mov	r2, r6
 8010c3c:	4649      	mov	r1, r9
 8010c3e:	4640      	mov	r0, r8
 8010c40:	47d0      	blx	sl
 8010c42:	3001      	adds	r0, #1
 8010c44:	d0ad      	beq.n	8010ba2 <_printf_i+0x15a>
 8010c46:	6823      	ldr	r3, [r4, #0]
 8010c48:	079b      	lsls	r3, r3, #30
 8010c4a:	d413      	bmi.n	8010c74 <_printf_i+0x22c>
 8010c4c:	68e0      	ldr	r0, [r4, #12]
 8010c4e:	9b03      	ldr	r3, [sp, #12]
 8010c50:	4298      	cmp	r0, r3
 8010c52:	bfb8      	it	lt
 8010c54:	4618      	movlt	r0, r3
 8010c56:	e7a6      	b.n	8010ba6 <_printf_i+0x15e>
 8010c58:	2301      	movs	r3, #1
 8010c5a:	4632      	mov	r2, r6
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	4640      	mov	r0, r8
 8010c60:	47d0      	blx	sl
 8010c62:	3001      	adds	r0, #1
 8010c64:	d09d      	beq.n	8010ba2 <_printf_i+0x15a>
 8010c66:	3501      	adds	r5, #1
 8010c68:	68e3      	ldr	r3, [r4, #12]
 8010c6a:	9903      	ldr	r1, [sp, #12]
 8010c6c:	1a5b      	subs	r3, r3, r1
 8010c6e:	42ab      	cmp	r3, r5
 8010c70:	dcf2      	bgt.n	8010c58 <_printf_i+0x210>
 8010c72:	e7eb      	b.n	8010c4c <_printf_i+0x204>
 8010c74:	2500      	movs	r5, #0
 8010c76:	f104 0619 	add.w	r6, r4, #25
 8010c7a:	e7f5      	b.n	8010c68 <_printf_i+0x220>
 8010c7c:	08012e62 	.word	0x08012e62
 8010c80:	08012e73 	.word	0x08012e73

08010c84 <std>:
 8010c84:	2300      	movs	r3, #0
 8010c86:	b510      	push	{r4, lr}
 8010c88:	4604      	mov	r4, r0
 8010c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8010c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c92:	6083      	str	r3, [r0, #8]
 8010c94:	8181      	strh	r1, [r0, #12]
 8010c96:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c98:	81c2      	strh	r2, [r0, #14]
 8010c9a:	6183      	str	r3, [r0, #24]
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	2208      	movs	r2, #8
 8010ca0:	305c      	adds	r0, #92	@ 0x5c
 8010ca2:	f000 f989 	bl	8010fb8 <memset>
 8010ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8010cdc <std+0x58>)
 8010ca8:	6263      	str	r3, [r4, #36]	@ 0x24
 8010caa:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce0 <std+0x5c>)
 8010cac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010cae:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce4 <std+0x60>)
 8010cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce8 <std+0x64>)
 8010cb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8010cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8010cec <std+0x68>)
 8010cb8:	6224      	str	r4, [r4, #32]
 8010cba:	429c      	cmp	r4, r3
 8010cbc:	d006      	beq.n	8010ccc <std+0x48>
 8010cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010cc2:	4294      	cmp	r4, r2
 8010cc4:	d002      	beq.n	8010ccc <std+0x48>
 8010cc6:	33d0      	adds	r3, #208	@ 0xd0
 8010cc8:	429c      	cmp	r4, r3
 8010cca:	d105      	bne.n	8010cd8 <std+0x54>
 8010ccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cd4:	f000 ba4a 	b.w	801116c <__retarget_lock_init_recursive>
 8010cd8:	bd10      	pop	{r4, pc}
 8010cda:	bf00      	nop
 8010cdc:	08010e09 	.word	0x08010e09
 8010ce0:	08010e2b 	.word	0x08010e2b
 8010ce4:	08010e63 	.word	0x08010e63
 8010ce8:	08010e87 	.word	0x08010e87
 8010cec:	2400da18 	.word	0x2400da18

08010cf0 <stdio_exit_handler>:
 8010cf0:	4a02      	ldr	r2, [pc, #8]	@ (8010cfc <stdio_exit_handler+0xc>)
 8010cf2:	4903      	ldr	r1, [pc, #12]	@ (8010d00 <stdio_exit_handler+0x10>)
 8010cf4:	4803      	ldr	r0, [pc, #12]	@ (8010d04 <stdio_exit_handler+0x14>)
 8010cf6:	f000 b869 	b.w	8010dcc <_fwalk_sglue>
 8010cfa:	bf00      	nop
 8010cfc:	24000014 	.word	0x24000014
 8010d00:	08012759 	.word	0x08012759
 8010d04:	24000024 	.word	0x24000024

08010d08 <cleanup_stdio>:
 8010d08:	6841      	ldr	r1, [r0, #4]
 8010d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8010d3c <cleanup_stdio+0x34>)
 8010d0c:	4299      	cmp	r1, r3
 8010d0e:	b510      	push	{r4, lr}
 8010d10:	4604      	mov	r4, r0
 8010d12:	d001      	beq.n	8010d18 <cleanup_stdio+0x10>
 8010d14:	f001 fd20 	bl	8012758 <_fflush_r>
 8010d18:	68a1      	ldr	r1, [r4, #8]
 8010d1a:	4b09      	ldr	r3, [pc, #36]	@ (8010d40 <cleanup_stdio+0x38>)
 8010d1c:	4299      	cmp	r1, r3
 8010d1e:	d002      	beq.n	8010d26 <cleanup_stdio+0x1e>
 8010d20:	4620      	mov	r0, r4
 8010d22:	f001 fd19 	bl	8012758 <_fflush_r>
 8010d26:	68e1      	ldr	r1, [r4, #12]
 8010d28:	4b06      	ldr	r3, [pc, #24]	@ (8010d44 <cleanup_stdio+0x3c>)
 8010d2a:	4299      	cmp	r1, r3
 8010d2c:	d004      	beq.n	8010d38 <cleanup_stdio+0x30>
 8010d2e:	4620      	mov	r0, r4
 8010d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d34:	f001 bd10 	b.w	8012758 <_fflush_r>
 8010d38:	bd10      	pop	{r4, pc}
 8010d3a:	bf00      	nop
 8010d3c:	2400da18 	.word	0x2400da18
 8010d40:	2400da80 	.word	0x2400da80
 8010d44:	2400dae8 	.word	0x2400dae8

08010d48 <global_stdio_init.part.0>:
 8010d48:	b510      	push	{r4, lr}
 8010d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8010d78 <global_stdio_init.part.0+0x30>)
 8010d4c:	4c0b      	ldr	r4, [pc, #44]	@ (8010d7c <global_stdio_init.part.0+0x34>)
 8010d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8010d80 <global_stdio_init.part.0+0x38>)
 8010d50:	601a      	str	r2, [r3, #0]
 8010d52:	4620      	mov	r0, r4
 8010d54:	2200      	movs	r2, #0
 8010d56:	2104      	movs	r1, #4
 8010d58:	f7ff ff94 	bl	8010c84 <std>
 8010d5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d60:	2201      	movs	r2, #1
 8010d62:	2109      	movs	r1, #9
 8010d64:	f7ff ff8e 	bl	8010c84 <std>
 8010d68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d6c:	2202      	movs	r2, #2
 8010d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d72:	2112      	movs	r1, #18
 8010d74:	f7ff bf86 	b.w	8010c84 <std>
 8010d78:	2400db50 	.word	0x2400db50
 8010d7c:	2400da18 	.word	0x2400da18
 8010d80:	08010cf1 	.word	0x08010cf1

08010d84 <__sfp_lock_acquire>:
 8010d84:	4801      	ldr	r0, [pc, #4]	@ (8010d8c <__sfp_lock_acquire+0x8>)
 8010d86:	f000 b9f2 	b.w	801116e <__retarget_lock_acquire_recursive>
 8010d8a:	bf00      	nop
 8010d8c:	2400db59 	.word	0x2400db59

08010d90 <__sfp_lock_release>:
 8010d90:	4801      	ldr	r0, [pc, #4]	@ (8010d98 <__sfp_lock_release+0x8>)
 8010d92:	f000 b9ed 	b.w	8011170 <__retarget_lock_release_recursive>
 8010d96:	bf00      	nop
 8010d98:	2400db59 	.word	0x2400db59

08010d9c <__sinit>:
 8010d9c:	b510      	push	{r4, lr}
 8010d9e:	4604      	mov	r4, r0
 8010da0:	f7ff fff0 	bl	8010d84 <__sfp_lock_acquire>
 8010da4:	6a23      	ldr	r3, [r4, #32]
 8010da6:	b11b      	cbz	r3, 8010db0 <__sinit+0x14>
 8010da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dac:	f7ff bff0 	b.w	8010d90 <__sfp_lock_release>
 8010db0:	4b04      	ldr	r3, [pc, #16]	@ (8010dc4 <__sinit+0x28>)
 8010db2:	6223      	str	r3, [r4, #32]
 8010db4:	4b04      	ldr	r3, [pc, #16]	@ (8010dc8 <__sinit+0x2c>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d1f5      	bne.n	8010da8 <__sinit+0xc>
 8010dbc:	f7ff ffc4 	bl	8010d48 <global_stdio_init.part.0>
 8010dc0:	e7f2      	b.n	8010da8 <__sinit+0xc>
 8010dc2:	bf00      	nop
 8010dc4:	08010d09 	.word	0x08010d09
 8010dc8:	2400db50 	.word	0x2400db50

08010dcc <_fwalk_sglue>:
 8010dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dd0:	4607      	mov	r7, r0
 8010dd2:	4688      	mov	r8, r1
 8010dd4:	4614      	mov	r4, r2
 8010dd6:	2600      	movs	r6, #0
 8010dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8010de0:	d505      	bpl.n	8010dee <_fwalk_sglue+0x22>
 8010de2:	6824      	ldr	r4, [r4, #0]
 8010de4:	2c00      	cmp	r4, #0
 8010de6:	d1f7      	bne.n	8010dd8 <_fwalk_sglue+0xc>
 8010de8:	4630      	mov	r0, r6
 8010dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dee:	89ab      	ldrh	r3, [r5, #12]
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d907      	bls.n	8010e04 <_fwalk_sglue+0x38>
 8010df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	d003      	beq.n	8010e04 <_fwalk_sglue+0x38>
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	4638      	mov	r0, r7
 8010e00:	47c0      	blx	r8
 8010e02:	4306      	orrs	r6, r0
 8010e04:	3568      	adds	r5, #104	@ 0x68
 8010e06:	e7e9      	b.n	8010ddc <_fwalk_sglue+0x10>

08010e08 <__sread>:
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e10:	f000 f95e 	bl	80110d0 <_read_r>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	bfab      	itete	ge
 8010e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8010e1c:	181b      	addge	r3, r3, r0
 8010e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e22:	bfac      	ite	ge
 8010e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e26:	81a3      	strhlt	r3, [r4, #12]
 8010e28:	bd10      	pop	{r4, pc}

08010e2a <__swrite>:
 8010e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2e:	461f      	mov	r7, r3
 8010e30:	898b      	ldrh	r3, [r1, #12]
 8010e32:	05db      	lsls	r3, r3, #23
 8010e34:	4605      	mov	r5, r0
 8010e36:	460c      	mov	r4, r1
 8010e38:	4616      	mov	r6, r2
 8010e3a:	d505      	bpl.n	8010e48 <__swrite+0x1e>
 8010e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e40:	2302      	movs	r3, #2
 8010e42:	2200      	movs	r2, #0
 8010e44:	f000 f932 	bl	80110ac <_lseek_r>
 8010e48:	89a3      	ldrh	r3, [r4, #12]
 8010e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e52:	81a3      	strh	r3, [r4, #12]
 8010e54:	4632      	mov	r2, r6
 8010e56:	463b      	mov	r3, r7
 8010e58:	4628      	mov	r0, r5
 8010e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5e:	f000 b949 	b.w	80110f4 <_write_r>

08010e62 <__sseek>:
 8010e62:	b510      	push	{r4, lr}
 8010e64:	460c      	mov	r4, r1
 8010e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e6a:	f000 f91f 	bl	80110ac <_lseek_r>
 8010e6e:	1c43      	adds	r3, r0, #1
 8010e70:	89a3      	ldrh	r3, [r4, #12]
 8010e72:	bf15      	itete	ne
 8010e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e7e:	81a3      	strheq	r3, [r4, #12]
 8010e80:	bf18      	it	ne
 8010e82:	81a3      	strhne	r3, [r4, #12]
 8010e84:	bd10      	pop	{r4, pc}

08010e86 <__sclose>:
 8010e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e8a:	f000 b8a1 	b.w	8010fd0 <_close_r>

08010e8e <__swbuf_r>:
 8010e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e90:	460e      	mov	r6, r1
 8010e92:	4614      	mov	r4, r2
 8010e94:	4605      	mov	r5, r0
 8010e96:	b118      	cbz	r0, 8010ea0 <__swbuf_r+0x12>
 8010e98:	6a03      	ldr	r3, [r0, #32]
 8010e9a:	b90b      	cbnz	r3, 8010ea0 <__swbuf_r+0x12>
 8010e9c:	f7ff ff7e 	bl	8010d9c <__sinit>
 8010ea0:	69a3      	ldr	r3, [r4, #24]
 8010ea2:	60a3      	str	r3, [r4, #8]
 8010ea4:	89a3      	ldrh	r3, [r4, #12]
 8010ea6:	071a      	lsls	r2, r3, #28
 8010ea8:	d501      	bpl.n	8010eae <__swbuf_r+0x20>
 8010eaa:	6923      	ldr	r3, [r4, #16]
 8010eac:	b943      	cbnz	r3, 8010ec0 <__swbuf_r+0x32>
 8010eae:	4621      	mov	r1, r4
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	f000 f82b 	bl	8010f0c <__swsetup_r>
 8010eb6:	b118      	cbz	r0, 8010ec0 <__swbuf_r+0x32>
 8010eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8010ebc:	4638      	mov	r0, r7
 8010ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ec0:	6823      	ldr	r3, [r4, #0]
 8010ec2:	6922      	ldr	r2, [r4, #16]
 8010ec4:	1a98      	subs	r0, r3, r2
 8010ec6:	6963      	ldr	r3, [r4, #20]
 8010ec8:	b2f6      	uxtb	r6, r6
 8010eca:	4283      	cmp	r3, r0
 8010ecc:	4637      	mov	r7, r6
 8010ece:	dc05      	bgt.n	8010edc <__swbuf_r+0x4e>
 8010ed0:	4621      	mov	r1, r4
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f001 fc40 	bl	8012758 <_fflush_r>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d1ed      	bne.n	8010eb8 <__swbuf_r+0x2a>
 8010edc:	68a3      	ldr	r3, [r4, #8]
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	60a3      	str	r3, [r4, #8]
 8010ee2:	6823      	ldr	r3, [r4, #0]
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	6022      	str	r2, [r4, #0]
 8010ee8:	701e      	strb	r6, [r3, #0]
 8010eea:	6962      	ldr	r2, [r4, #20]
 8010eec:	1c43      	adds	r3, r0, #1
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d004      	beq.n	8010efc <__swbuf_r+0x6e>
 8010ef2:	89a3      	ldrh	r3, [r4, #12]
 8010ef4:	07db      	lsls	r3, r3, #31
 8010ef6:	d5e1      	bpl.n	8010ebc <__swbuf_r+0x2e>
 8010ef8:	2e0a      	cmp	r6, #10
 8010efa:	d1df      	bne.n	8010ebc <__swbuf_r+0x2e>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4628      	mov	r0, r5
 8010f00:	f001 fc2a 	bl	8012758 <_fflush_r>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d0d9      	beq.n	8010ebc <__swbuf_r+0x2e>
 8010f08:	e7d6      	b.n	8010eb8 <__swbuf_r+0x2a>
	...

08010f0c <__swsetup_r>:
 8010f0c:	b538      	push	{r3, r4, r5, lr}
 8010f0e:	4b29      	ldr	r3, [pc, #164]	@ (8010fb4 <__swsetup_r+0xa8>)
 8010f10:	4605      	mov	r5, r0
 8010f12:	6818      	ldr	r0, [r3, #0]
 8010f14:	460c      	mov	r4, r1
 8010f16:	b118      	cbz	r0, 8010f20 <__swsetup_r+0x14>
 8010f18:	6a03      	ldr	r3, [r0, #32]
 8010f1a:	b90b      	cbnz	r3, 8010f20 <__swsetup_r+0x14>
 8010f1c:	f7ff ff3e 	bl	8010d9c <__sinit>
 8010f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f24:	0719      	lsls	r1, r3, #28
 8010f26:	d422      	bmi.n	8010f6e <__swsetup_r+0x62>
 8010f28:	06da      	lsls	r2, r3, #27
 8010f2a:	d407      	bmi.n	8010f3c <__swsetup_r+0x30>
 8010f2c:	2209      	movs	r2, #9
 8010f2e:	602a      	str	r2, [r5, #0]
 8010f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f34:	81a3      	strh	r3, [r4, #12]
 8010f36:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3a:	e033      	b.n	8010fa4 <__swsetup_r+0x98>
 8010f3c:	0758      	lsls	r0, r3, #29
 8010f3e:	d512      	bpl.n	8010f66 <__swsetup_r+0x5a>
 8010f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f42:	b141      	cbz	r1, 8010f56 <__swsetup_r+0x4a>
 8010f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f48:	4299      	cmp	r1, r3
 8010f4a:	d002      	beq.n	8010f52 <__swsetup_r+0x46>
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f000 ff05 	bl	8011d5c <_free_r>
 8010f52:	2300      	movs	r3, #0
 8010f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f56:	89a3      	ldrh	r3, [r4, #12]
 8010f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010f5c:	81a3      	strh	r3, [r4, #12]
 8010f5e:	2300      	movs	r3, #0
 8010f60:	6063      	str	r3, [r4, #4]
 8010f62:	6923      	ldr	r3, [r4, #16]
 8010f64:	6023      	str	r3, [r4, #0]
 8010f66:	89a3      	ldrh	r3, [r4, #12]
 8010f68:	f043 0308 	orr.w	r3, r3, #8
 8010f6c:	81a3      	strh	r3, [r4, #12]
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	b94b      	cbnz	r3, 8010f86 <__swsetup_r+0x7a>
 8010f72:	89a3      	ldrh	r3, [r4, #12]
 8010f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f7c:	d003      	beq.n	8010f86 <__swsetup_r+0x7a>
 8010f7e:	4621      	mov	r1, r4
 8010f80:	4628      	mov	r0, r5
 8010f82:	f001 fc37 	bl	80127f4 <__smakebuf_r>
 8010f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f8a:	f013 0201 	ands.w	r2, r3, #1
 8010f8e:	d00a      	beq.n	8010fa6 <__swsetup_r+0x9a>
 8010f90:	2200      	movs	r2, #0
 8010f92:	60a2      	str	r2, [r4, #8]
 8010f94:	6962      	ldr	r2, [r4, #20]
 8010f96:	4252      	negs	r2, r2
 8010f98:	61a2      	str	r2, [r4, #24]
 8010f9a:	6922      	ldr	r2, [r4, #16]
 8010f9c:	b942      	cbnz	r2, 8010fb0 <__swsetup_r+0xa4>
 8010f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010fa2:	d1c5      	bne.n	8010f30 <__swsetup_r+0x24>
 8010fa4:	bd38      	pop	{r3, r4, r5, pc}
 8010fa6:	0799      	lsls	r1, r3, #30
 8010fa8:	bf58      	it	pl
 8010faa:	6962      	ldrpl	r2, [r4, #20]
 8010fac:	60a2      	str	r2, [r4, #8]
 8010fae:	e7f4      	b.n	8010f9a <__swsetup_r+0x8e>
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	e7f7      	b.n	8010fa4 <__swsetup_r+0x98>
 8010fb4:	24000020 	.word	0x24000020

08010fb8 <memset>:
 8010fb8:	4402      	add	r2, r0
 8010fba:	4603      	mov	r3, r0
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d100      	bne.n	8010fc2 <memset+0xa>
 8010fc0:	4770      	bx	lr
 8010fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8010fc6:	e7f9      	b.n	8010fbc <memset+0x4>

08010fc8 <_localeconv_r>:
 8010fc8:	4800      	ldr	r0, [pc, #0]	@ (8010fcc <_localeconv_r+0x4>)
 8010fca:	4770      	bx	lr
 8010fcc:	24000160 	.word	0x24000160

08010fd0 <_close_r>:
 8010fd0:	b538      	push	{r3, r4, r5, lr}
 8010fd2:	4d06      	ldr	r5, [pc, #24]	@ (8010fec <_close_r+0x1c>)
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	4608      	mov	r0, r1
 8010fda:	602b      	str	r3, [r5, #0]
 8010fdc:	f7f0 fa2a 	bl	8001434 <_close>
 8010fe0:	1c43      	adds	r3, r0, #1
 8010fe2:	d102      	bne.n	8010fea <_close_r+0x1a>
 8010fe4:	682b      	ldr	r3, [r5, #0]
 8010fe6:	b103      	cbz	r3, 8010fea <_close_r+0x1a>
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	bd38      	pop	{r3, r4, r5, pc}
 8010fec:	2400db54 	.word	0x2400db54

08010ff0 <_reclaim_reent>:
 8010ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80110a8 <_reclaim_reent+0xb8>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4283      	cmp	r3, r0
 8010ff6:	b570      	push	{r4, r5, r6, lr}
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	d053      	beq.n	80110a4 <_reclaim_reent+0xb4>
 8010ffc:	69c3      	ldr	r3, [r0, #28]
 8010ffe:	b31b      	cbz	r3, 8011048 <_reclaim_reent+0x58>
 8011000:	68db      	ldr	r3, [r3, #12]
 8011002:	b163      	cbz	r3, 801101e <_reclaim_reent+0x2e>
 8011004:	2500      	movs	r5, #0
 8011006:	69e3      	ldr	r3, [r4, #28]
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	5959      	ldr	r1, [r3, r5]
 801100c:	b9b1      	cbnz	r1, 801103c <_reclaim_reent+0x4c>
 801100e:	3504      	adds	r5, #4
 8011010:	2d80      	cmp	r5, #128	@ 0x80
 8011012:	d1f8      	bne.n	8011006 <_reclaim_reent+0x16>
 8011014:	69e3      	ldr	r3, [r4, #28]
 8011016:	4620      	mov	r0, r4
 8011018:	68d9      	ldr	r1, [r3, #12]
 801101a:	f000 fe9f 	bl	8011d5c <_free_r>
 801101e:	69e3      	ldr	r3, [r4, #28]
 8011020:	6819      	ldr	r1, [r3, #0]
 8011022:	b111      	cbz	r1, 801102a <_reclaim_reent+0x3a>
 8011024:	4620      	mov	r0, r4
 8011026:	f000 fe99 	bl	8011d5c <_free_r>
 801102a:	69e3      	ldr	r3, [r4, #28]
 801102c:	689d      	ldr	r5, [r3, #8]
 801102e:	b15d      	cbz	r5, 8011048 <_reclaim_reent+0x58>
 8011030:	4629      	mov	r1, r5
 8011032:	4620      	mov	r0, r4
 8011034:	682d      	ldr	r5, [r5, #0]
 8011036:	f000 fe91 	bl	8011d5c <_free_r>
 801103a:	e7f8      	b.n	801102e <_reclaim_reent+0x3e>
 801103c:	680e      	ldr	r6, [r1, #0]
 801103e:	4620      	mov	r0, r4
 8011040:	f000 fe8c 	bl	8011d5c <_free_r>
 8011044:	4631      	mov	r1, r6
 8011046:	e7e1      	b.n	801100c <_reclaim_reent+0x1c>
 8011048:	6961      	ldr	r1, [r4, #20]
 801104a:	b111      	cbz	r1, 8011052 <_reclaim_reent+0x62>
 801104c:	4620      	mov	r0, r4
 801104e:	f000 fe85 	bl	8011d5c <_free_r>
 8011052:	69e1      	ldr	r1, [r4, #28]
 8011054:	b111      	cbz	r1, 801105c <_reclaim_reent+0x6c>
 8011056:	4620      	mov	r0, r4
 8011058:	f000 fe80 	bl	8011d5c <_free_r>
 801105c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801105e:	b111      	cbz	r1, 8011066 <_reclaim_reent+0x76>
 8011060:	4620      	mov	r0, r4
 8011062:	f000 fe7b 	bl	8011d5c <_free_r>
 8011066:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011068:	b111      	cbz	r1, 8011070 <_reclaim_reent+0x80>
 801106a:	4620      	mov	r0, r4
 801106c:	f000 fe76 	bl	8011d5c <_free_r>
 8011070:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011072:	b111      	cbz	r1, 801107a <_reclaim_reent+0x8a>
 8011074:	4620      	mov	r0, r4
 8011076:	f000 fe71 	bl	8011d5c <_free_r>
 801107a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801107c:	b111      	cbz	r1, 8011084 <_reclaim_reent+0x94>
 801107e:	4620      	mov	r0, r4
 8011080:	f000 fe6c 	bl	8011d5c <_free_r>
 8011084:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011086:	b111      	cbz	r1, 801108e <_reclaim_reent+0x9e>
 8011088:	4620      	mov	r0, r4
 801108a:	f000 fe67 	bl	8011d5c <_free_r>
 801108e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011090:	b111      	cbz	r1, 8011098 <_reclaim_reent+0xa8>
 8011092:	4620      	mov	r0, r4
 8011094:	f000 fe62 	bl	8011d5c <_free_r>
 8011098:	6a23      	ldr	r3, [r4, #32]
 801109a:	b11b      	cbz	r3, 80110a4 <_reclaim_reent+0xb4>
 801109c:	4620      	mov	r0, r4
 801109e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110a2:	4718      	bx	r3
 80110a4:	bd70      	pop	{r4, r5, r6, pc}
 80110a6:	bf00      	nop
 80110a8:	24000020 	.word	0x24000020

080110ac <_lseek_r>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4d07      	ldr	r5, [pc, #28]	@ (80110cc <_lseek_r+0x20>)
 80110b0:	4604      	mov	r4, r0
 80110b2:	4608      	mov	r0, r1
 80110b4:	4611      	mov	r1, r2
 80110b6:	2200      	movs	r2, #0
 80110b8:	602a      	str	r2, [r5, #0]
 80110ba:	461a      	mov	r2, r3
 80110bc:	f7f0 f9e1 	bl	8001482 <_lseek>
 80110c0:	1c43      	adds	r3, r0, #1
 80110c2:	d102      	bne.n	80110ca <_lseek_r+0x1e>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b103      	cbz	r3, 80110ca <_lseek_r+0x1e>
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	bd38      	pop	{r3, r4, r5, pc}
 80110cc:	2400db54 	.word	0x2400db54

080110d0 <_read_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4d07      	ldr	r5, [pc, #28]	@ (80110f0 <_read_r+0x20>)
 80110d4:	4604      	mov	r4, r0
 80110d6:	4608      	mov	r0, r1
 80110d8:	4611      	mov	r1, r2
 80110da:	2200      	movs	r2, #0
 80110dc:	602a      	str	r2, [r5, #0]
 80110de:	461a      	mov	r2, r3
 80110e0:	f7f0 f96f 	bl	80013c2 <_read>
 80110e4:	1c43      	adds	r3, r0, #1
 80110e6:	d102      	bne.n	80110ee <_read_r+0x1e>
 80110e8:	682b      	ldr	r3, [r5, #0]
 80110ea:	b103      	cbz	r3, 80110ee <_read_r+0x1e>
 80110ec:	6023      	str	r3, [r4, #0]
 80110ee:	bd38      	pop	{r3, r4, r5, pc}
 80110f0:	2400db54 	.word	0x2400db54

080110f4 <_write_r>:
 80110f4:	b538      	push	{r3, r4, r5, lr}
 80110f6:	4d07      	ldr	r5, [pc, #28]	@ (8011114 <_write_r+0x20>)
 80110f8:	4604      	mov	r4, r0
 80110fa:	4608      	mov	r0, r1
 80110fc:	4611      	mov	r1, r2
 80110fe:	2200      	movs	r2, #0
 8011100:	602a      	str	r2, [r5, #0]
 8011102:	461a      	mov	r2, r3
 8011104:	f7f0 f97a 	bl	80013fc <_write>
 8011108:	1c43      	adds	r3, r0, #1
 801110a:	d102      	bne.n	8011112 <_write_r+0x1e>
 801110c:	682b      	ldr	r3, [r5, #0]
 801110e:	b103      	cbz	r3, 8011112 <_write_r+0x1e>
 8011110:	6023      	str	r3, [r4, #0]
 8011112:	bd38      	pop	{r3, r4, r5, pc}
 8011114:	2400db54 	.word	0x2400db54

08011118 <__errno>:
 8011118:	4b01      	ldr	r3, [pc, #4]	@ (8011120 <__errno+0x8>)
 801111a:	6818      	ldr	r0, [r3, #0]
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	24000020 	.word	0x24000020

08011124 <__libc_init_array>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	4d0d      	ldr	r5, [pc, #52]	@ (801115c <__libc_init_array+0x38>)
 8011128:	4c0d      	ldr	r4, [pc, #52]	@ (8011160 <__libc_init_array+0x3c>)
 801112a:	1b64      	subs	r4, r4, r5
 801112c:	10a4      	asrs	r4, r4, #2
 801112e:	2600      	movs	r6, #0
 8011130:	42a6      	cmp	r6, r4
 8011132:	d109      	bne.n	8011148 <__libc_init_array+0x24>
 8011134:	4d0b      	ldr	r5, [pc, #44]	@ (8011164 <__libc_init_array+0x40>)
 8011136:	4c0c      	ldr	r4, [pc, #48]	@ (8011168 <__libc_init_array+0x44>)
 8011138:	f001 fdba 	bl	8012cb0 <_init>
 801113c:	1b64      	subs	r4, r4, r5
 801113e:	10a4      	asrs	r4, r4, #2
 8011140:	2600      	movs	r6, #0
 8011142:	42a6      	cmp	r6, r4
 8011144:	d105      	bne.n	8011152 <__libc_init_array+0x2e>
 8011146:	bd70      	pop	{r4, r5, r6, pc}
 8011148:	f855 3b04 	ldr.w	r3, [r5], #4
 801114c:	4798      	blx	r3
 801114e:	3601      	adds	r6, #1
 8011150:	e7ee      	b.n	8011130 <__libc_init_array+0xc>
 8011152:	f855 3b04 	ldr.w	r3, [r5], #4
 8011156:	4798      	blx	r3
 8011158:	3601      	adds	r6, #1
 801115a:	e7f2      	b.n	8011142 <__libc_init_array+0x1e>
 801115c:	080131cc 	.word	0x080131cc
 8011160:	080131cc 	.word	0x080131cc
 8011164:	080131cc 	.word	0x080131cc
 8011168:	080131d0 	.word	0x080131d0

0801116c <__retarget_lock_init_recursive>:
 801116c:	4770      	bx	lr

0801116e <__retarget_lock_acquire_recursive>:
 801116e:	4770      	bx	lr

08011170 <__retarget_lock_release_recursive>:
 8011170:	4770      	bx	lr

08011172 <memcpy>:
 8011172:	440a      	add	r2, r1
 8011174:	4291      	cmp	r1, r2
 8011176:	f100 33ff 	add.w	r3, r0, #4294967295
 801117a:	d100      	bne.n	801117e <memcpy+0xc>
 801117c:	4770      	bx	lr
 801117e:	b510      	push	{r4, lr}
 8011180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011188:	4291      	cmp	r1, r2
 801118a:	d1f9      	bne.n	8011180 <memcpy+0xe>
 801118c:	bd10      	pop	{r4, pc}

0801118e <quorem>:
 801118e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011192:	6903      	ldr	r3, [r0, #16]
 8011194:	690c      	ldr	r4, [r1, #16]
 8011196:	42a3      	cmp	r3, r4
 8011198:	4607      	mov	r7, r0
 801119a:	db7e      	blt.n	801129a <quorem+0x10c>
 801119c:	3c01      	subs	r4, #1
 801119e:	f101 0814 	add.w	r8, r1, #20
 80111a2:	00a3      	lsls	r3, r4, #2
 80111a4:	f100 0514 	add.w	r5, r0, #20
 80111a8:	9300      	str	r3, [sp, #0]
 80111aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111ae:	9301      	str	r3, [sp, #4]
 80111b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80111b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111b8:	3301      	adds	r3, #1
 80111ba:	429a      	cmp	r2, r3
 80111bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80111c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80111c4:	d32e      	bcc.n	8011224 <quorem+0x96>
 80111c6:	f04f 0a00 	mov.w	sl, #0
 80111ca:	46c4      	mov	ip, r8
 80111cc:	46ae      	mov	lr, r5
 80111ce:	46d3      	mov	fp, sl
 80111d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80111d4:	b298      	uxth	r0, r3
 80111d6:	fb06 a000 	mla	r0, r6, r0, sl
 80111da:	0c02      	lsrs	r2, r0, #16
 80111dc:	0c1b      	lsrs	r3, r3, #16
 80111de:	fb06 2303 	mla	r3, r6, r3, r2
 80111e2:	f8de 2000 	ldr.w	r2, [lr]
 80111e6:	b280      	uxth	r0, r0
 80111e8:	b292      	uxth	r2, r2
 80111ea:	1a12      	subs	r2, r2, r0
 80111ec:	445a      	add	r2, fp
 80111ee:	f8de 0000 	ldr.w	r0, [lr]
 80111f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80111fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011200:	b292      	uxth	r2, r2
 8011202:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011206:	45e1      	cmp	r9, ip
 8011208:	f84e 2b04 	str.w	r2, [lr], #4
 801120c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011210:	d2de      	bcs.n	80111d0 <quorem+0x42>
 8011212:	9b00      	ldr	r3, [sp, #0]
 8011214:	58eb      	ldr	r3, [r5, r3]
 8011216:	b92b      	cbnz	r3, 8011224 <quorem+0x96>
 8011218:	9b01      	ldr	r3, [sp, #4]
 801121a:	3b04      	subs	r3, #4
 801121c:	429d      	cmp	r5, r3
 801121e:	461a      	mov	r2, r3
 8011220:	d32f      	bcc.n	8011282 <quorem+0xf4>
 8011222:	613c      	str	r4, [r7, #16]
 8011224:	4638      	mov	r0, r7
 8011226:	f001 f90b 	bl	8012440 <__mcmp>
 801122a:	2800      	cmp	r0, #0
 801122c:	db25      	blt.n	801127a <quorem+0xec>
 801122e:	4629      	mov	r1, r5
 8011230:	2000      	movs	r0, #0
 8011232:	f858 2b04 	ldr.w	r2, [r8], #4
 8011236:	f8d1 c000 	ldr.w	ip, [r1]
 801123a:	fa1f fe82 	uxth.w	lr, r2
 801123e:	fa1f f38c 	uxth.w	r3, ip
 8011242:	eba3 030e 	sub.w	r3, r3, lr
 8011246:	4403      	add	r3, r0
 8011248:	0c12      	lsrs	r2, r2, #16
 801124a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801124e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011252:	b29b      	uxth	r3, r3
 8011254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011258:	45c1      	cmp	r9, r8
 801125a:	f841 3b04 	str.w	r3, [r1], #4
 801125e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011262:	d2e6      	bcs.n	8011232 <quorem+0xa4>
 8011264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011268:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801126c:	b922      	cbnz	r2, 8011278 <quorem+0xea>
 801126e:	3b04      	subs	r3, #4
 8011270:	429d      	cmp	r5, r3
 8011272:	461a      	mov	r2, r3
 8011274:	d30b      	bcc.n	801128e <quorem+0x100>
 8011276:	613c      	str	r4, [r7, #16]
 8011278:	3601      	adds	r6, #1
 801127a:	4630      	mov	r0, r6
 801127c:	b003      	add	sp, #12
 801127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011282:	6812      	ldr	r2, [r2, #0]
 8011284:	3b04      	subs	r3, #4
 8011286:	2a00      	cmp	r2, #0
 8011288:	d1cb      	bne.n	8011222 <quorem+0x94>
 801128a:	3c01      	subs	r4, #1
 801128c:	e7c6      	b.n	801121c <quorem+0x8e>
 801128e:	6812      	ldr	r2, [r2, #0]
 8011290:	3b04      	subs	r3, #4
 8011292:	2a00      	cmp	r2, #0
 8011294:	d1ef      	bne.n	8011276 <quorem+0xe8>
 8011296:	3c01      	subs	r4, #1
 8011298:	e7ea      	b.n	8011270 <quorem+0xe2>
 801129a:	2000      	movs	r0, #0
 801129c:	e7ee      	b.n	801127c <quorem+0xee>
	...

080112a0 <_dtoa_r>:
 80112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	ed2d 8b02 	vpush	{d8}
 80112a8:	69c7      	ldr	r7, [r0, #28]
 80112aa:	b091      	sub	sp, #68	@ 0x44
 80112ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80112b0:	ec55 4b10 	vmov	r4, r5, d0
 80112b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80112b6:	9107      	str	r1, [sp, #28]
 80112b8:	4681      	mov	r9, r0
 80112ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80112bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80112be:	b97f      	cbnz	r7, 80112e0 <_dtoa_r+0x40>
 80112c0:	2010      	movs	r0, #16
 80112c2:	f000 fd95 	bl	8011df0 <malloc>
 80112c6:	4602      	mov	r2, r0
 80112c8:	f8c9 001c 	str.w	r0, [r9, #28]
 80112cc:	b920      	cbnz	r0, 80112d8 <_dtoa_r+0x38>
 80112ce:	4ba0      	ldr	r3, [pc, #640]	@ (8011550 <_dtoa_r+0x2b0>)
 80112d0:	21ef      	movs	r1, #239	@ 0xef
 80112d2:	48a0      	ldr	r0, [pc, #640]	@ (8011554 <_dtoa_r+0x2b4>)
 80112d4:	f001 fafc 	bl	80128d0 <__assert_func>
 80112d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80112dc:	6007      	str	r7, [r0, #0]
 80112de:	60c7      	str	r7, [r0, #12]
 80112e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80112e4:	6819      	ldr	r1, [r3, #0]
 80112e6:	b159      	cbz	r1, 8011300 <_dtoa_r+0x60>
 80112e8:	685a      	ldr	r2, [r3, #4]
 80112ea:	604a      	str	r2, [r1, #4]
 80112ec:	2301      	movs	r3, #1
 80112ee:	4093      	lsls	r3, r2
 80112f0:	608b      	str	r3, [r1, #8]
 80112f2:	4648      	mov	r0, r9
 80112f4:	f000 fe72 	bl	8011fdc <_Bfree>
 80112f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80112fc:	2200      	movs	r2, #0
 80112fe:	601a      	str	r2, [r3, #0]
 8011300:	1e2b      	subs	r3, r5, #0
 8011302:	bfbb      	ittet	lt
 8011304:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011308:	9303      	strlt	r3, [sp, #12]
 801130a:	2300      	movge	r3, #0
 801130c:	2201      	movlt	r2, #1
 801130e:	bfac      	ite	ge
 8011310:	6033      	strge	r3, [r6, #0]
 8011312:	6032      	strlt	r2, [r6, #0]
 8011314:	4b90      	ldr	r3, [pc, #576]	@ (8011558 <_dtoa_r+0x2b8>)
 8011316:	9e03      	ldr	r6, [sp, #12]
 8011318:	43b3      	bics	r3, r6
 801131a:	d110      	bne.n	801133e <_dtoa_r+0x9e>
 801131c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801131e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011322:	6013      	str	r3, [r2, #0]
 8011324:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011328:	4323      	orrs	r3, r4
 801132a:	f000 84e6 	beq.w	8011cfa <_dtoa_r+0xa5a>
 801132e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011330:	4f8a      	ldr	r7, [pc, #552]	@ (801155c <_dtoa_r+0x2bc>)
 8011332:	2b00      	cmp	r3, #0
 8011334:	f000 84e8 	beq.w	8011d08 <_dtoa_r+0xa68>
 8011338:	1cfb      	adds	r3, r7, #3
 801133a:	f000 bce3 	b.w	8011d04 <_dtoa_r+0xa64>
 801133e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011342:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134a:	d10a      	bne.n	8011362 <_dtoa_r+0xc2>
 801134c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801134e:	2301      	movs	r3, #1
 8011350:	6013      	str	r3, [r2, #0]
 8011352:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011354:	b113      	cbz	r3, 801135c <_dtoa_r+0xbc>
 8011356:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011358:	4b81      	ldr	r3, [pc, #516]	@ (8011560 <_dtoa_r+0x2c0>)
 801135a:	6013      	str	r3, [r2, #0]
 801135c:	4f81      	ldr	r7, [pc, #516]	@ (8011564 <_dtoa_r+0x2c4>)
 801135e:	f000 bcd3 	b.w	8011d08 <_dtoa_r+0xa68>
 8011362:	aa0e      	add	r2, sp, #56	@ 0x38
 8011364:	a90f      	add	r1, sp, #60	@ 0x3c
 8011366:	4648      	mov	r0, r9
 8011368:	eeb0 0b48 	vmov.f64	d0, d8
 801136c:	f001 f918 	bl	80125a0 <__d2b>
 8011370:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011376:	9001      	str	r0, [sp, #4]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d045      	beq.n	8011408 <_dtoa_r+0x168>
 801137c:	eeb0 7b48 	vmov.f64	d7, d8
 8011380:	ee18 1a90 	vmov	r1, s17
 8011384:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011388:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801138c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011390:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011394:	2500      	movs	r5, #0
 8011396:	ee07 1a90 	vmov	s15, r1
 801139a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801139e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011538 <_dtoa_r+0x298>
 80113a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80113a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011540 <_dtoa_r+0x2a0>
 80113aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80113ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011548 <_dtoa_r+0x2a8>
 80113b2:	ee07 3a90 	vmov	s15, r3
 80113b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80113ba:	eeb0 7b46 	vmov.f64	d7, d6
 80113be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80113c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80113c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80113ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ce:	ee16 8a90 	vmov	r8, s13
 80113d2:	d508      	bpl.n	80113e6 <_dtoa_r+0x146>
 80113d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80113d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80113dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e0:	bf18      	it	ne
 80113e2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80113e6:	f1b8 0f16 	cmp.w	r8, #22
 80113ea:	d82b      	bhi.n	8011444 <_dtoa_r+0x1a4>
 80113ec:	495e      	ldr	r1, [pc, #376]	@ (8011568 <_dtoa_r+0x2c8>)
 80113ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80113f2:	ed91 7b00 	vldr	d7, [r1]
 80113f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80113fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113fe:	d501      	bpl.n	8011404 <_dtoa_r+0x164>
 8011400:	f108 38ff 	add.w	r8, r8, #4294967295
 8011404:	2100      	movs	r1, #0
 8011406:	e01e      	b.n	8011446 <_dtoa_r+0x1a6>
 8011408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801140a:	4413      	add	r3, r2
 801140c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011410:	2920      	cmp	r1, #32
 8011412:	bfc1      	itttt	gt
 8011414:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011418:	408e      	lslgt	r6, r1
 801141a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801141e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011422:	bfd6      	itet	le
 8011424:	f1c1 0120 	rsble	r1, r1, #32
 8011428:	4331      	orrgt	r1, r6
 801142a:	fa04 f101 	lslle.w	r1, r4, r1
 801142e:	ee07 1a90 	vmov	s15, r1
 8011432:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011436:	3b01      	subs	r3, #1
 8011438:	ee17 1a90 	vmov	r1, s15
 801143c:	2501      	movs	r5, #1
 801143e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011442:	e7a8      	b.n	8011396 <_dtoa_r+0xf6>
 8011444:	2101      	movs	r1, #1
 8011446:	1ad2      	subs	r2, r2, r3
 8011448:	1e53      	subs	r3, r2, #1
 801144a:	9306      	str	r3, [sp, #24]
 801144c:	bf45      	ittet	mi
 801144e:	f1c2 0301 	rsbmi	r3, r2, #1
 8011452:	9304      	strmi	r3, [sp, #16]
 8011454:	2300      	movpl	r3, #0
 8011456:	2300      	movmi	r3, #0
 8011458:	bf4c      	ite	mi
 801145a:	9306      	strmi	r3, [sp, #24]
 801145c:	9304      	strpl	r3, [sp, #16]
 801145e:	f1b8 0f00 	cmp.w	r8, #0
 8011462:	910c      	str	r1, [sp, #48]	@ 0x30
 8011464:	db18      	blt.n	8011498 <_dtoa_r+0x1f8>
 8011466:	9b06      	ldr	r3, [sp, #24]
 8011468:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801146c:	4443      	add	r3, r8
 801146e:	9306      	str	r3, [sp, #24]
 8011470:	2300      	movs	r3, #0
 8011472:	9a07      	ldr	r2, [sp, #28]
 8011474:	2a09      	cmp	r2, #9
 8011476:	d845      	bhi.n	8011504 <_dtoa_r+0x264>
 8011478:	2a05      	cmp	r2, #5
 801147a:	bfc4      	itt	gt
 801147c:	3a04      	subgt	r2, #4
 801147e:	9207      	strgt	r2, [sp, #28]
 8011480:	9a07      	ldr	r2, [sp, #28]
 8011482:	f1a2 0202 	sub.w	r2, r2, #2
 8011486:	bfcc      	ite	gt
 8011488:	2400      	movgt	r4, #0
 801148a:	2401      	movle	r4, #1
 801148c:	2a03      	cmp	r2, #3
 801148e:	d844      	bhi.n	801151a <_dtoa_r+0x27a>
 8011490:	e8df f002 	tbb	[pc, r2]
 8011494:	0b173634 	.word	0x0b173634
 8011498:	9b04      	ldr	r3, [sp, #16]
 801149a:	2200      	movs	r2, #0
 801149c:	eba3 0308 	sub.w	r3, r3, r8
 80114a0:	9304      	str	r3, [sp, #16]
 80114a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80114a4:	f1c8 0300 	rsb	r3, r8, #0
 80114a8:	e7e3      	b.n	8011472 <_dtoa_r+0x1d2>
 80114aa:	2201      	movs	r2, #1
 80114ac:	9208      	str	r2, [sp, #32]
 80114ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114b0:	eb08 0b02 	add.w	fp, r8, r2
 80114b4:	f10b 0a01 	add.w	sl, fp, #1
 80114b8:	4652      	mov	r2, sl
 80114ba:	2a01      	cmp	r2, #1
 80114bc:	bfb8      	it	lt
 80114be:	2201      	movlt	r2, #1
 80114c0:	e006      	b.n	80114d0 <_dtoa_r+0x230>
 80114c2:	2201      	movs	r2, #1
 80114c4:	9208      	str	r2, [sp, #32]
 80114c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114c8:	2a00      	cmp	r2, #0
 80114ca:	dd29      	ble.n	8011520 <_dtoa_r+0x280>
 80114cc:	4693      	mov	fp, r2
 80114ce:	4692      	mov	sl, r2
 80114d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80114d4:	2100      	movs	r1, #0
 80114d6:	2004      	movs	r0, #4
 80114d8:	f100 0614 	add.w	r6, r0, #20
 80114dc:	4296      	cmp	r6, r2
 80114de:	d926      	bls.n	801152e <_dtoa_r+0x28e>
 80114e0:	6079      	str	r1, [r7, #4]
 80114e2:	4648      	mov	r0, r9
 80114e4:	9305      	str	r3, [sp, #20]
 80114e6:	f000 fd39 	bl	8011f5c <_Balloc>
 80114ea:	9b05      	ldr	r3, [sp, #20]
 80114ec:	4607      	mov	r7, r0
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d13e      	bne.n	8011570 <_dtoa_r+0x2d0>
 80114f2:	4b1e      	ldr	r3, [pc, #120]	@ (801156c <_dtoa_r+0x2cc>)
 80114f4:	4602      	mov	r2, r0
 80114f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80114fa:	e6ea      	b.n	80112d2 <_dtoa_r+0x32>
 80114fc:	2200      	movs	r2, #0
 80114fe:	e7e1      	b.n	80114c4 <_dtoa_r+0x224>
 8011500:	2200      	movs	r2, #0
 8011502:	e7d3      	b.n	80114ac <_dtoa_r+0x20c>
 8011504:	2401      	movs	r4, #1
 8011506:	2200      	movs	r2, #0
 8011508:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801150c:	f04f 3bff 	mov.w	fp, #4294967295
 8011510:	2100      	movs	r1, #0
 8011512:	46da      	mov	sl, fp
 8011514:	2212      	movs	r2, #18
 8011516:	9109      	str	r1, [sp, #36]	@ 0x24
 8011518:	e7da      	b.n	80114d0 <_dtoa_r+0x230>
 801151a:	2201      	movs	r2, #1
 801151c:	9208      	str	r2, [sp, #32]
 801151e:	e7f5      	b.n	801150c <_dtoa_r+0x26c>
 8011520:	f04f 0b01 	mov.w	fp, #1
 8011524:	46da      	mov	sl, fp
 8011526:	465a      	mov	r2, fp
 8011528:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801152c:	e7d0      	b.n	80114d0 <_dtoa_r+0x230>
 801152e:	3101      	adds	r1, #1
 8011530:	0040      	lsls	r0, r0, #1
 8011532:	e7d1      	b.n	80114d8 <_dtoa_r+0x238>
 8011534:	f3af 8000 	nop.w
 8011538:	636f4361 	.word	0x636f4361
 801153c:	3fd287a7 	.word	0x3fd287a7
 8011540:	8b60c8b3 	.word	0x8b60c8b3
 8011544:	3fc68a28 	.word	0x3fc68a28
 8011548:	509f79fb 	.word	0x509f79fb
 801154c:	3fd34413 	.word	0x3fd34413
 8011550:	08012e91 	.word	0x08012e91
 8011554:	08012ea8 	.word	0x08012ea8
 8011558:	7ff00000 	.word	0x7ff00000
 801155c:	08012e8d 	.word	0x08012e8d
 8011560:	08012e61 	.word	0x08012e61
 8011564:	08012e60 	.word	0x08012e60
 8011568:	08012ff8 	.word	0x08012ff8
 801156c:	08012f00 	.word	0x08012f00
 8011570:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011574:	f1ba 0f0e 	cmp.w	sl, #14
 8011578:	6010      	str	r0, [r2, #0]
 801157a:	d86e      	bhi.n	801165a <_dtoa_r+0x3ba>
 801157c:	2c00      	cmp	r4, #0
 801157e:	d06c      	beq.n	801165a <_dtoa_r+0x3ba>
 8011580:	f1b8 0f00 	cmp.w	r8, #0
 8011584:	f340 80b4 	ble.w	80116f0 <_dtoa_r+0x450>
 8011588:	4ac8      	ldr	r2, [pc, #800]	@ (80118ac <_dtoa_r+0x60c>)
 801158a:	f008 010f 	and.w	r1, r8, #15
 801158e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011592:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011596:	ed92 7b00 	vldr	d7, [r2]
 801159a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801159e:	f000 809b 	beq.w	80116d8 <_dtoa_r+0x438>
 80115a2:	4ac3      	ldr	r2, [pc, #780]	@ (80118b0 <_dtoa_r+0x610>)
 80115a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80115a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80115ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80115b0:	f001 010f 	and.w	r1, r1, #15
 80115b4:	2203      	movs	r2, #3
 80115b6:	48be      	ldr	r0, [pc, #760]	@ (80118b0 <_dtoa_r+0x610>)
 80115b8:	2900      	cmp	r1, #0
 80115ba:	f040 808f 	bne.w	80116dc <_dtoa_r+0x43c>
 80115be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80115c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80115c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80115ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80115cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115d0:	2900      	cmp	r1, #0
 80115d2:	f000 80b3 	beq.w	801173c <_dtoa_r+0x49c>
 80115d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80115da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80115de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e2:	f140 80ab 	bpl.w	801173c <_dtoa_r+0x49c>
 80115e6:	f1ba 0f00 	cmp.w	sl, #0
 80115ea:	f000 80a7 	beq.w	801173c <_dtoa_r+0x49c>
 80115ee:	f1bb 0f00 	cmp.w	fp, #0
 80115f2:	dd30      	ble.n	8011656 <_dtoa_r+0x3b6>
 80115f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80115f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011600:	f108 31ff 	add.w	r1, r8, #4294967295
 8011604:	9105      	str	r1, [sp, #20]
 8011606:	3201      	adds	r2, #1
 8011608:	465c      	mov	r4, fp
 801160a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801160e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011612:	ee07 2a90 	vmov	s15, r2
 8011616:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801161a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801161e:	ee15 2a90 	vmov	r2, s11
 8011622:	ec51 0b15 	vmov	r0, r1, d5
 8011626:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801162a:	2c00      	cmp	r4, #0
 801162c:	f040 808a 	bne.w	8011744 <_dtoa_r+0x4a4>
 8011630:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011634:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011638:	ec41 0b17 	vmov	d7, r0, r1
 801163c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011644:	f300 826a 	bgt.w	8011b1c <_dtoa_r+0x87c>
 8011648:	eeb1 7b47 	vneg.f64	d7, d7
 801164c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011654:	d423      	bmi.n	801169e <_dtoa_r+0x3fe>
 8011656:	ed8d 8b02 	vstr	d8, [sp, #8]
 801165a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801165c:	2a00      	cmp	r2, #0
 801165e:	f2c0 8129 	blt.w	80118b4 <_dtoa_r+0x614>
 8011662:	f1b8 0f0e 	cmp.w	r8, #14
 8011666:	f300 8125 	bgt.w	80118b4 <_dtoa_r+0x614>
 801166a:	4b90      	ldr	r3, [pc, #576]	@ (80118ac <_dtoa_r+0x60c>)
 801166c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011670:	ed93 6b00 	vldr	d6, [r3]
 8011674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011676:	2b00      	cmp	r3, #0
 8011678:	f280 80c8 	bge.w	801180c <_dtoa_r+0x56c>
 801167c:	f1ba 0f00 	cmp.w	sl, #0
 8011680:	f300 80c4 	bgt.w	801180c <_dtoa_r+0x56c>
 8011684:	d10b      	bne.n	801169e <_dtoa_r+0x3fe>
 8011686:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801168a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801168e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011692:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801169a:	f2c0 823c 	blt.w	8011b16 <_dtoa_r+0x876>
 801169e:	2400      	movs	r4, #0
 80116a0:	4625      	mov	r5, r4
 80116a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116a4:	43db      	mvns	r3, r3
 80116a6:	9305      	str	r3, [sp, #20]
 80116a8:	463e      	mov	r6, r7
 80116aa:	f04f 0800 	mov.w	r8, #0
 80116ae:	4621      	mov	r1, r4
 80116b0:	4648      	mov	r0, r9
 80116b2:	f000 fc93 	bl	8011fdc <_Bfree>
 80116b6:	2d00      	cmp	r5, #0
 80116b8:	f000 80a2 	beq.w	8011800 <_dtoa_r+0x560>
 80116bc:	f1b8 0f00 	cmp.w	r8, #0
 80116c0:	d005      	beq.n	80116ce <_dtoa_r+0x42e>
 80116c2:	45a8      	cmp	r8, r5
 80116c4:	d003      	beq.n	80116ce <_dtoa_r+0x42e>
 80116c6:	4641      	mov	r1, r8
 80116c8:	4648      	mov	r0, r9
 80116ca:	f000 fc87 	bl	8011fdc <_Bfree>
 80116ce:	4629      	mov	r1, r5
 80116d0:	4648      	mov	r0, r9
 80116d2:	f000 fc83 	bl	8011fdc <_Bfree>
 80116d6:	e093      	b.n	8011800 <_dtoa_r+0x560>
 80116d8:	2202      	movs	r2, #2
 80116da:	e76c      	b.n	80115b6 <_dtoa_r+0x316>
 80116dc:	07cc      	lsls	r4, r1, #31
 80116de:	d504      	bpl.n	80116ea <_dtoa_r+0x44a>
 80116e0:	ed90 6b00 	vldr	d6, [r0]
 80116e4:	3201      	adds	r2, #1
 80116e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116ea:	1049      	asrs	r1, r1, #1
 80116ec:	3008      	adds	r0, #8
 80116ee:	e763      	b.n	80115b8 <_dtoa_r+0x318>
 80116f0:	d022      	beq.n	8011738 <_dtoa_r+0x498>
 80116f2:	f1c8 0100 	rsb	r1, r8, #0
 80116f6:	4a6d      	ldr	r2, [pc, #436]	@ (80118ac <_dtoa_r+0x60c>)
 80116f8:	f001 000f 	and.w	r0, r1, #15
 80116fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011700:	ed92 7b00 	vldr	d7, [r2]
 8011704:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011708:	ed8d 7b02 	vstr	d7, [sp, #8]
 801170c:	4868      	ldr	r0, [pc, #416]	@ (80118b0 <_dtoa_r+0x610>)
 801170e:	1109      	asrs	r1, r1, #4
 8011710:	2400      	movs	r4, #0
 8011712:	2202      	movs	r2, #2
 8011714:	b929      	cbnz	r1, 8011722 <_dtoa_r+0x482>
 8011716:	2c00      	cmp	r4, #0
 8011718:	f43f af57 	beq.w	80115ca <_dtoa_r+0x32a>
 801171c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011720:	e753      	b.n	80115ca <_dtoa_r+0x32a>
 8011722:	07ce      	lsls	r6, r1, #31
 8011724:	d505      	bpl.n	8011732 <_dtoa_r+0x492>
 8011726:	ed90 6b00 	vldr	d6, [r0]
 801172a:	3201      	adds	r2, #1
 801172c:	2401      	movs	r4, #1
 801172e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011732:	1049      	asrs	r1, r1, #1
 8011734:	3008      	adds	r0, #8
 8011736:	e7ed      	b.n	8011714 <_dtoa_r+0x474>
 8011738:	2202      	movs	r2, #2
 801173a:	e746      	b.n	80115ca <_dtoa_r+0x32a>
 801173c:	f8cd 8014 	str.w	r8, [sp, #20]
 8011740:	4654      	mov	r4, sl
 8011742:	e762      	b.n	801160a <_dtoa_r+0x36a>
 8011744:	4a59      	ldr	r2, [pc, #356]	@ (80118ac <_dtoa_r+0x60c>)
 8011746:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801174a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801174e:	9a08      	ldr	r2, [sp, #32]
 8011750:	ec41 0b17 	vmov	d7, r0, r1
 8011754:	443c      	add	r4, r7
 8011756:	b34a      	cbz	r2, 80117ac <_dtoa_r+0x50c>
 8011758:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801175c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011760:	463e      	mov	r6, r7
 8011762:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011766:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801176a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801176e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011772:	ee14 2a90 	vmov	r2, s9
 8011776:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801177a:	3230      	adds	r2, #48	@ 0x30
 801177c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011780:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011788:	f806 2b01 	strb.w	r2, [r6], #1
 801178c:	d438      	bmi.n	8011800 <_dtoa_r+0x560>
 801178e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011792:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179a:	d46e      	bmi.n	801187a <_dtoa_r+0x5da>
 801179c:	42a6      	cmp	r6, r4
 801179e:	f43f af5a 	beq.w	8011656 <_dtoa_r+0x3b6>
 80117a2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80117a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80117aa:	e7e0      	b.n	801176e <_dtoa_r+0x4ce>
 80117ac:	4621      	mov	r1, r4
 80117ae:	463e      	mov	r6, r7
 80117b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80117b4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80117b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80117bc:	ee14 2a90 	vmov	r2, s9
 80117c0:	3230      	adds	r2, #48	@ 0x30
 80117c2:	f806 2b01 	strb.w	r2, [r6], #1
 80117c6:	42a6      	cmp	r6, r4
 80117c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80117cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80117d0:	d119      	bne.n	8011806 <_dtoa_r+0x566>
 80117d2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80117d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80117da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80117de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e2:	dc4a      	bgt.n	801187a <_dtoa_r+0x5da>
 80117e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80117e8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80117ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f0:	f57f af31 	bpl.w	8011656 <_dtoa_r+0x3b6>
 80117f4:	460e      	mov	r6, r1
 80117f6:	3901      	subs	r1, #1
 80117f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80117fc:	2b30      	cmp	r3, #48	@ 0x30
 80117fe:	d0f9      	beq.n	80117f4 <_dtoa_r+0x554>
 8011800:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011804:	e027      	b.n	8011856 <_dtoa_r+0x5b6>
 8011806:	ee26 6b03 	vmul.f64	d6, d6, d3
 801180a:	e7d5      	b.n	80117b8 <_dtoa_r+0x518>
 801180c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011810:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011814:	463e      	mov	r6, r7
 8011816:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801181a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801181e:	ee15 3a10 	vmov	r3, s10
 8011822:	3330      	adds	r3, #48	@ 0x30
 8011824:	f806 3b01 	strb.w	r3, [r6], #1
 8011828:	1bf3      	subs	r3, r6, r7
 801182a:	459a      	cmp	sl, r3
 801182c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011830:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011834:	d132      	bne.n	801189c <_dtoa_r+0x5fc>
 8011836:	ee37 7b07 	vadd.f64	d7, d7, d7
 801183a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011842:	dc18      	bgt.n	8011876 <_dtoa_r+0x5d6>
 8011844:	eeb4 7b46 	vcmp.f64	d7, d6
 8011848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184c:	d103      	bne.n	8011856 <_dtoa_r+0x5b6>
 801184e:	ee15 3a10 	vmov	r3, s10
 8011852:	07db      	lsls	r3, r3, #31
 8011854:	d40f      	bmi.n	8011876 <_dtoa_r+0x5d6>
 8011856:	9901      	ldr	r1, [sp, #4]
 8011858:	4648      	mov	r0, r9
 801185a:	f000 fbbf 	bl	8011fdc <_Bfree>
 801185e:	2300      	movs	r3, #0
 8011860:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011862:	7033      	strb	r3, [r6, #0]
 8011864:	f108 0301 	add.w	r3, r8, #1
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801186c:	2b00      	cmp	r3, #0
 801186e:	f000 824b 	beq.w	8011d08 <_dtoa_r+0xa68>
 8011872:	601e      	str	r6, [r3, #0]
 8011874:	e248      	b.n	8011d08 <_dtoa_r+0xa68>
 8011876:	f8cd 8014 	str.w	r8, [sp, #20]
 801187a:	4633      	mov	r3, r6
 801187c:	461e      	mov	r6, r3
 801187e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011882:	2a39      	cmp	r2, #57	@ 0x39
 8011884:	d106      	bne.n	8011894 <_dtoa_r+0x5f4>
 8011886:	429f      	cmp	r7, r3
 8011888:	d1f8      	bne.n	801187c <_dtoa_r+0x5dc>
 801188a:	9a05      	ldr	r2, [sp, #20]
 801188c:	3201      	adds	r2, #1
 801188e:	9205      	str	r2, [sp, #20]
 8011890:	2230      	movs	r2, #48	@ 0x30
 8011892:	703a      	strb	r2, [r7, #0]
 8011894:	781a      	ldrb	r2, [r3, #0]
 8011896:	3201      	adds	r2, #1
 8011898:	701a      	strb	r2, [r3, #0]
 801189a:	e7b1      	b.n	8011800 <_dtoa_r+0x560>
 801189c:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a8:	d1b5      	bne.n	8011816 <_dtoa_r+0x576>
 80118aa:	e7d4      	b.n	8011856 <_dtoa_r+0x5b6>
 80118ac:	08012ff8 	.word	0x08012ff8
 80118b0:	08012fd0 	.word	0x08012fd0
 80118b4:	9908      	ldr	r1, [sp, #32]
 80118b6:	2900      	cmp	r1, #0
 80118b8:	f000 80e9 	beq.w	8011a8e <_dtoa_r+0x7ee>
 80118bc:	9907      	ldr	r1, [sp, #28]
 80118be:	2901      	cmp	r1, #1
 80118c0:	f300 80cb 	bgt.w	8011a5a <_dtoa_r+0x7ba>
 80118c4:	2d00      	cmp	r5, #0
 80118c6:	f000 80c4 	beq.w	8011a52 <_dtoa_r+0x7b2>
 80118ca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80118ce:	9e04      	ldr	r6, [sp, #16]
 80118d0:	461c      	mov	r4, r3
 80118d2:	9305      	str	r3, [sp, #20]
 80118d4:	9b04      	ldr	r3, [sp, #16]
 80118d6:	4413      	add	r3, r2
 80118d8:	9304      	str	r3, [sp, #16]
 80118da:	9b06      	ldr	r3, [sp, #24]
 80118dc:	2101      	movs	r1, #1
 80118de:	4413      	add	r3, r2
 80118e0:	4648      	mov	r0, r9
 80118e2:	9306      	str	r3, [sp, #24]
 80118e4:	f000 fc2e 	bl	8012144 <__i2b>
 80118e8:	9b05      	ldr	r3, [sp, #20]
 80118ea:	4605      	mov	r5, r0
 80118ec:	b166      	cbz	r6, 8011908 <_dtoa_r+0x668>
 80118ee:	9a06      	ldr	r2, [sp, #24]
 80118f0:	2a00      	cmp	r2, #0
 80118f2:	dd09      	ble.n	8011908 <_dtoa_r+0x668>
 80118f4:	42b2      	cmp	r2, r6
 80118f6:	9904      	ldr	r1, [sp, #16]
 80118f8:	bfa8      	it	ge
 80118fa:	4632      	movge	r2, r6
 80118fc:	1a89      	subs	r1, r1, r2
 80118fe:	9104      	str	r1, [sp, #16]
 8011900:	9906      	ldr	r1, [sp, #24]
 8011902:	1ab6      	subs	r6, r6, r2
 8011904:	1a8a      	subs	r2, r1, r2
 8011906:	9206      	str	r2, [sp, #24]
 8011908:	b30b      	cbz	r3, 801194e <_dtoa_r+0x6ae>
 801190a:	9a08      	ldr	r2, [sp, #32]
 801190c:	2a00      	cmp	r2, #0
 801190e:	f000 80c5 	beq.w	8011a9c <_dtoa_r+0x7fc>
 8011912:	2c00      	cmp	r4, #0
 8011914:	f000 80bf 	beq.w	8011a96 <_dtoa_r+0x7f6>
 8011918:	4629      	mov	r1, r5
 801191a:	4622      	mov	r2, r4
 801191c:	4648      	mov	r0, r9
 801191e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011920:	f000 fcc8 	bl	80122b4 <__pow5mult>
 8011924:	9a01      	ldr	r2, [sp, #4]
 8011926:	4601      	mov	r1, r0
 8011928:	4605      	mov	r5, r0
 801192a:	4648      	mov	r0, r9
 801192c:	f000 fc20 	bl	8012170 <__multiply>
 8011930:	9901      	ldr	r1, [sp, #4]
 8011932:	9005      	str	r0, [sp, #20]
 8011934:	4648      	mov	r0, r9
 8011936:	f000 fb51 	bl	8011fdc <_Bfree>
 801193a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801193c:	1b1b      	subs	r3, r3, r4
 801193e:	f000 80b0 	beq.w	8011aa2 <_dtoa_r+0x802>
 8011942:	9905      	ldr	r1, [sp, #20]
 8011944:	461a      	mov	r2, r3
 8011946:	4648      	mov	r0, r9
 8011948:	f000 fcb4 	bl	80122b4 <__pow5mult>
 801194c:	9001      	str	r0, [sp, #4]
 801194e:	2101      	movs	r1, #1
 8011950:	4648      	mov	r0, r9
 8011952:	f000 fbf7 	bl	8012144 <__i2b>
 8011956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011958:	4604      	mov	r4, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	f000 81da 	beq.w	8011d14 <_dtoa_r+0xa74>
 8011960:	461a      	mov	r2, r3
 8011962:	4601      	mov	r1, r0
 8011964:	4648      	mov	r0, r9
 8011966:	f000 fca5 	bl	80122b4 <__pow5mult>
 801196a:	9b07      	ldr	r3, [sp, #28]
 801196c:	2b01      	cmp	r3, #1
 801196e:	4604      	mov	r4, r0
 8011970:	f300 80a0 	bgt.w	8011ab4 <_dtoa_r+0x814>
 8011974:	9b02      	ldr	r3, [sp, #8]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f040 8096 	bne.w	8011aa8 <_dtoa_r+0x808>
 801197c:	9b03      	ldr	r3, [sp, #12]
 801197e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011982:	2a00      	cmp	r2, #0
 8011984:	f040 8092 	bne.w	8011aac <_dtoa_r+0x80c>
 8011988:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801198c:	0d12      	lsrs	r2, r2, #20
 801198e:	0512      	lsls	r2, r2, #20
 8011990:	2a00      	cmp	r2, #0
 8011992:	f000 808d 	beq.w	8011ab0 <_dtoa_r+0x810>
 8011996:	9b04      	ldr	r3, [sp, #16]
 8011998:	3301      	adds	r3, #1
 801199a:	9304      	str	r3, [sp, #16]
 801199c:	9b06      	ldr	r3, [sp, #24]
 801199e:	3301      	adds	r3, #1
 80119a0:	9306      	str	r3, [sp, #24]
 80119a2:	2301      	movs	r3, #1
 80119a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80119a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f000 81b9 	beq.w	8011d20 <_dtoa_r+0xa80>
 80119ae:	6922      	ldr	r2, [r4, #16]
 80119b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80119b4:	6910      	ldr	r0, [r2, #16]
 80119b6:	f000 fb79 	bl	80120ac <__hi0bits>
 80119ba:	f1c0 0020 	rsb	r0, r0, #32
 80119be:	9b06      	ldr	r3, [sp, #24]
 80119c0:	4418      	add	r0, r3
 80119c2:	f010 001f 	ands.w	r0, r0, #31
 80119c6:	f000 8081 	beq.w	8011acc <_dtoa_r+0x82c>
 80119ca:	f1c0 0220 	rsb	r2, r0, #32
 80119ce:	2a04      	cmp	r2, #4
 80119d0:	dd73      	ble.n	8011aba <_dtoa_r+0x81a>
 80119d2:	9b04      	ldr	r3, [sp, #16]
 80119d4:	f1c0 001c 	rsb	r0, r0, #28
 80119d8:	4403      	add	r3, r0
 80119da:	9304      	str	r3, [sp, #16]
 80119dc:	9b06      	ldr	r3, [sp, #24]
 80119de:	4406      	add	r6, r0
 80119e0:	4403      	add	r3, r0
 80119e2:	9306      	str	r3, [sp, #24]
 80119e4:	9b04      	ldr	r3, [sp, #16]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	dd05      	ble.n	80119f6 <_dtoa_r+0x756>
 80119ea:	9901      	ldr	r1, [sp, #4]
 80119ec:	461a      	mov	r2, r3
 80119ee:	4648      	mov	r0, r9
 80119f0:	f000 fcba 	bl	8012368 <__lshift>
 80119f4:	9001      	str	r0, [sp, #4]
 80119f6:	9b06      	ldr	r3, [sp, #24]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	dd05      	ble.n	8011a08 <_dtoa_r+0x768>
 80119fc:	4621      	mov	r1, r4
 80119fe:	461a      	mov	r2, r3
 8011a00:	4648      	mov	r0, r9
 8011a02:	f000 fcb1 	bl	8012368 <__lshift>
 8011a06:	4604      	mov	r4, r0
 8011a08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d060      	beq.n	8011ad0 <_dtoa_r+0x830>
 8011a0e:	9801      	ldr	r0, [sp, #4]
 8011a10:	4621      	mov	r1, r4
 8011a12:	f000 fd15 	bl	8012440 <__mcmp>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	da5a      	bge.n	8011ad0 <_dtoa_r+0x830>
 8011a1a:	f108 33ff 	add.w	r3, r8, #4294967295
 8011a1e:	9305      	str	r3, [sp, #20]
 8011a20:	9901      	ldr	r1, [sp, #4]
 8011a22:	2300      	movs	r3, #0
 8011a24:	220a      	movs	r2, #10
 8011a26:	4648      	mov	r0, r9
 8011a28:	f000 fafa 	bl	8012020 <__multadd>
 8011a2c:	9b08      	ldr	r3, [sp, #32]
 8011a2e:	9001      	str	r0, [sp, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f000 8177 	beq.w	8011d24 <_dtoa_r+0xa84>
 8011a36:	4629      	mov	r1, r5
 8011a38:	2300      	movs	r3, #0
 8011a3a:	220a      	movs	r2, #10
 8011a3c:	4648      	mov	r0, r9
 8011a3e:	f000 faef 	bl	8012020 <__multadd>
 8011a42:	f1bb 0f00 	cmp.w	fp, #0
 8011a46:	4605      	mov	r5, r0
 8011a48:	dc6e      	bgt.n	8011b28 <_dtoa_r+0x888>
 8011a4a:	9b07      	ldr	r3, [sp, #28]
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	dc48      	bgt.n	8011ae2 <_dtoa_r+0x842>
 8011a50:	e06a      	b.n	8011b28 <_dtoa_r+0x888>
 8011a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011a58:	e739      	b.n	80118ce <_dtoa_r+0x62e>
 8011a5a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011a5e:	42a3      	cmp	r3, r4
 8011a60:	db07      	blt.n	8011a72 <_dtoa_r+0x7d2>
 8011a62:	f1ba 0f00 	cmp.w	sl, #0
 8011a66:	eba3 0404 	sub.w	r4, r3, r4
 8011a6a:	db0b      	blt.n	8011a84 <_dtoa_r+0x7e4>
 8011a6c:	9e04      	ldr	r6, [sp, #16]
 8011a6e:	4652      	mov	r2, sl
 8011a70:	e72f      	b.n	80118d2 <_dtoa_r+0x632>
 8011a72:	1ae2      	subs	r2, r4, r3
 8011a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a76:	9e04      	ldr	r6, [sp, #16]
 8011a78:	4413      	add	r3, r2
 8011a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a7c:	4652      	mov	r2, sl
 8011a7e:	4623      	mov	r3, r4
 8011a80:	2400      	movs	r4, #0
 8011a82:	e726      	b.n	80118d2 <_dtoa_r+0x632>
 8011a84:	9a04      	ldr	r2, [sp, #16]
 8011a86:	eba2 060a 	sub.w	r6, r2, sl
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	e721      	b.n	80118d2 <_dtoa_r+0x632>
 8011a8e:	9e04      	ldr	r6, [sp, #16]
 8011a90:	9d08      	ldr	r5, [sp, #32]
 8011a92:	461c      	mov	r4, r3
 8011a94:	e72a      	b.n	80118ec <_dtoa_r+0x64c>
 8011a96:	9a01      	ldr	r2, [sp, #4]
 8011a98:	9205      	str	r2, [sp, #20]
 8011a9a:	e752      	b.n	8011942 <_dtoa_r+0x6a2>
 8011a9c:	9901      	ldr	r1, [sp, #4]
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	e751      	b.n	8011946 <_dtoa_r+0x6a6>
 8011aa2:	9b05      	ldr	r3, [sp, #20]
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	e752      	b.n	801194e <_dtoa_r+0x6ae>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	e77b      	b.n	80119a4 <_dtoa_r+0x704>
 8011aac:	9b02      	ldr	r3, [sp, #8]
 8011aae:	e779      	b.n	80119a4 <_dtoa_r+0x704>
 8011ab0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011ab2:	e778      	b.n	80119a6 <_dtoa_r+0x706>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ab8:	e779      	b.n	80119ae <_dtoa_r+0x70e>
 8011aba:	d093      	beq.n	80119e4 <_dtoa_r+0x744>
 8011abc:	9b04      	ldr	r3, [sp, #16]
 8011abe:	321c      	adds	r2, #28
 8011ac0:	4413      	add	r3, r2
 8011ac2:	9304      	str	r3, [sp, #16]
 8011ac4:	9b06      	ldr	r3, [sp, #24]
 8011ac6:	4416      	add	r6, r2
 8011ac8:	4413      	add	r3, r2
 8011aca:	e78a      	b.n	80119e2 <_dtoa_r+0x742>
 8011acc:	4602      	mov	r2, r0
 8011ace:	e7f5      	b.n	8011abc <_dtoa_r+0x81c>
 8011ad0:	f1ba 0f00 	cmp.w	sl, #0
 8011ad4:	f8cd 8014 	str.w	r8, [sp, #20]
 8011ad8:	46d3      	mov	fp, sl
 8011ada:	dc21      	bgt.n	8011b20 <_dtoa_r+0x880>
 8011adc:	9b07      	ldr	r3, [sp, #28]
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	dd1e      	ble.n	8011b20 <_dtoa_r+0x880>
 8011ae2:	f1bb 0f00 	cmp.w	fp, #0
 8011ae6:	f47f addc 	bne.w	80116a2 <_dtoa_r+0x402>
 8011aea:	4621      	mov	r1, r4
 8011aec:	465b      	mov	r3, fp
 8011aee:	2205      	movs	r2, #5
 8011af0:	4648      	mov	r0, r9
 8011af2:	f000 fa95 	bl	8012020 <__multadd>
 8011af6:	4601      	mov	r1, r0
 8011af8:	4604      	mov	r4, r0
 8011afa:	9801      	ldr	r0, [sp, #4]
 8011afc:	f000 fca0 	bl	8012440 <__mcmp>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	f77f adce 	ble.w	80116a2 <_dtoa_r+0x402>
 8011b06:	463e      	mov	r6, r7
 8011b08:	2331      	movs	r3, #49	@ 0x31
 8011b0a:	f806 3b01 	strb.w	r3, [r6], #1
 8011b0e:	9b05      	ldr	r3, [sp, #20]
 8011b10:	3301      	adds	r3, #1
 8011b12:	9305      	str	r3, [sp, #20]
 8011b14:	e5c9      	b.n	80116aa <_dtoa_r+0x40a>
 8011b16:	f8cd 8014 	str.w	r8, [sp, #20]
 8011b1a:	4654      	mov	r4, sl
 8011b1c:	4625      	mov	r5, r4
 8011b1e:	e7f2      	b.n	8011b06 <_dtoa_r+0x866>
 8011b20:	9b08      	ldr	r3, [sp, #32]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f000 8102 	beq.w	8011d2c <_dtoa_r+0xa8c>
 8011b28:	2e00      	cmp	r6, #0
 8011b2a:	dd05      	ble.n	8011b38 <_dtoa_r+0x898>
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	4632      	mov	r2, r6
 8011b30:	4648      	mov	r0, r9
 8011b32:	f000 fc19 	bl	8012368 <__lshift>
 8011b36:	4605      	mov	r5, r0
 8011b38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d058      	beq.n	8011bf0 <_dtoa_r+0x950>
 8011b3e:	6869      	ldr	r1, [r5, #4]
 8011b40:	4648      	mov	r0, r9
 8011b42:	f000 fa0b 	bl	8011f5c <_Balloc>
 8011b46:	4606      	mov	r6, r0
 8011b48:	b928      	cbnz	r0, 8011b56 <_dtoa_r+0x8b6>
 8011b4a:	4b82      	ldr	r3, [pc, #520]	@ (8011d54 <_dtoa_r+0xab4>)
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011b52:	f7ff bbbe 	b.w	80112d2 <_dtoa_r+0x32>
 8011b56:	692a      	ldr	r2, [r5, #16]
 8011b58:	3202      	adds	r2, #2
 8011b5a:	0092      	lsls	r2, r2, #2
 8011b5c:	f105 010c 	add.w	r1, r5, #12
 8011b60:	300c      	adds	r0, #12
 8011b62:	f7ff fb06 	bl	8011172 <memcpy>
 8011b66:	2201      	movs	r2, #1
 8011b68:	4631      	mov	r1, r6
 8011b6a:	4648      	mov	r0, r9
 8011b6c:	f000 fbfc 	bl	8012368 <__lshift>
 8011b70:	1c7b      	adds	r3, r7, #1
 8011b72:	9304      	str	r3, [sp, #16]
 8011b74:	eb07 030b 	add.w	r3, r7, fp
 8011b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b7a:	9b02      	ldr	r3, [sp, #8]
 8011b7c:	f003 0301 	and.w	r3, r3, #1
 8011b80:	46a8      	mov	r8, r5
 8011b82:	9308      	str	r3, [sp, #32]
 8011b84:	4605      	mov	r5, r0
 8011b86:	9b04      	ldr	r3, [sp, #16]
 8011b88:	9801      	ldr	r0, [sp, #4]
 8011b8a:	4621      	mov	r1, r4
 8011b8c:	f103 3bff 	add.w	fp, r3, #4294967295
 8011b90:	f7ff fafd 	bl	801118e <quorem>
 8011b94:	4641      	mov	r1, r8
 8011b96:	9002      	str	r0, [sp, #8]
 8011b98:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011b9c:	9801      	ldr	r0, [sp, #4]
 8011b9e:	f000 fc4f 	bl	8012440 <__mcmp>
 8011ba2:	462a      	mov	r2, r5
 8011ba4:	9006      	str	r0, [sp, #24]
 8011ba6:	4621      	mov	r1, r4
 8011ba8:	4648      	mov	r0, r9
 8011baa:	f000 fc65 	bl	8012478 <__mdiff>
 8011bae:	68c2      	ldr	r2, [r0, #12]
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	b9fa      	cbnz	r2, 8011bf4 <_dtoa_r+0x954>
 8011bb4:	4601      	mov	r1, r0
 8011bb6:	9801      	ldr	r0, [sp, #4]
 8011bb8:	f000 fc42 	bl	8012440 <__mcmp>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	4631      	mov	r1, r6
 8011bc0:	4648      	mov	r0, r9
 8011bc2:	920a      	str	r2, [sp, #40]	@ 0x28
 8011bc4:	f000 fa0a 	bl	8011fdc <_Bfree>
 8011bc8:	9b07      	ldr	r3, [sp, #28]
 8011bca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011bcc:	9e04      	ldr	r6, [sp, #16]
 8011bce:	ea42 0103 	orr.w	r1, r2, r3
 8011bd2:	9b08      	ldr	r3, [sp, #32]
 8011bd4:	4319      	orrs	r1, r3
 8011bd6:	d10f      	bne.n	8011bf8 <_dtoa_r+0x958>
 8011bd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011bdc:	d028      	beq.n	8011c30 <_dtoa_r+0x990>
 8011bde:	9b06      	ldr	r3, [sp, #24]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	dd02      	ble.n	8011bea <_dtoa_r+0x94a>
 8011be4:	9b02      	ldr	r3, [sp, #8]
 8011be6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8011bea:	f88b a000 	strb.w	sl, [fp]
 8011bee:	e55e      	b.n	80116ae <_dtoa_r+0x40e>
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	e7bd      	b.n	8011b70 <_dtoa_r+0x8d0>
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	e7e2      	b.n	8011bbe <_dtoa_r+0x91e>
 8011bf8:	9b06      	ldr	r3, [sp, #24]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	db04      	blt.n	8011c08 <_dtoa_r+0x968>
 8011bfe:	9907      	ldr	r1, [sp, #28]
 8011c00:	430b      	orrs	r3, r1
 8011c02:	9908      	ldr	r1, [sp, #32]
 8011c04:	430b      	orrs	r3, r1
 8011c06:	d120      	bne.n	8011c4a <_dtoa_r+0x9aa>
 8011c08:	2a00      	cmp	r2, #0
 8011c0a:	ddee      	ble.n	8011bea <_dtoa_r+0x94a>
 8011c0c:	9901      	ldr	r1, [sp, #4]
 8011c0e:	2201      	movs	r2, #1
 8011c10:	4648      	mov	r0, r9
 8011c12:	f000 fba9 	bl	8012368 <__lshift>
 8011c16:	4621      	mov	r1, r4
 8011c18:	9001      	str	r0, [sp, #4]
 8011c1a:	f000 fc11 	bl	8012440 <__mcmp>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	dc03      	bgt.n	8011c2a <_dtoa_r+0x98a>
 8011c22:	d1e2      	bne.n	8011bea <_dtoa_r+0x94a>
 8011c24:	f01a 0f01 	tst.w	sl, #1
 8011c28:	d0df      	beq.n	8011bea <_dtoa_r+0x94a>
 8011c2a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011c2e:	d1d9      	bne.n	8011be4 <_dtoa_r+0x944>
 8011c30:	2339      	movs	r3, #57	@ 0x39
 8011c32:	f88b 3000 	strb.w	r3, [fp]
 8011c36:	4633      	mov	r3, r6
 8011c38:	461e      	mov	r6, r3
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011c40:	2a39      	cmp	r2, #57	@ 0x39
 8011c42:	d052      	beq.n	8011cea <_dtoa_r+0xa4a>
 8011c44:	3201      	adds	r2, #1
 8011c46:	701a      	strb	r2, [r3, #0]
 8011c48:	e531      	b.n	80116ae <_dtoa_r+0x40e>
 8011c4a:	2a00      	cmp	r2, #0
 8011c4c:	dd07      	ble.n	8011c5e <_dtoa_r+0x9be>
 8011c4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011c52:	d0ed      	beq.n	8011c30 <_dtoa_r+0x990>
 8011c54:	f10a 0301 	add.w	r3, sl, #1
 8011c58:	f88b 3000 	strb.w	r3, [fp]
 8011c5c:	e527      	b.n	80116ae <_dtoa_r+0x40e>
 8011c5e:	9b04      	ldr	r3, [sp, #16]
 8011c60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c62:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d029      	beq.n	8011cbe <_dtoa_r+0xa1e>
 8011c6a:	9901      	ldr	r1, [sp, #4]
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	220a      	movs	r2, #10
 8011c70:	4648      	mov	r0, r9
 8011c72:	f000 f9d5 	bl	8012020 <__multadd>
 8011c76:	45a8      	cmp	r8, r5
 8011c78:	9001      	str	r0, [sp, #4]
 8011c7a:	f04f 0300 	mov.w	r3, #0
 8011c7e:	f04f 020a 	mov.w	r2, #10
 8011c82:	4641      	mov	r1, r8
 8011c84:	4648      	mov	r0, r9
 8011c86:	d107      	bne.n	8011c98 <_dtoa_r+0x9f8>
 8011c88:	f000 f9ca 	bl	8012020 <__multadd>
 8011c8c:	4680      	mov	r8, r0
 8011c8e:	4605      	mov	r5, r0
 8011c90:	9b04      	ldr	r3, [sp, #16]
 8011c92:	3301      	adds	r3, #1
 8011c94:	9304      	str	r3, [sp, #16]
 8011c96:	e776      	b.n	8011b86 <_dtoa_r+0x8e6>
 8011c98:	f000 f9c2 	bl	8012020 <__multadd>
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	4680      	mov	r8, r0
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	220a      	movs	r2, #10
 8011ca4:	4648      	mov	r0, r9
 8011ca6:	f000 f9bb 	bl	8012020 <__multadd>
 8011caa:	4605      	mov	r5, r0
 8011cac:	e7f0      	b.n	8011c90 <_dtoa_r+0x9f0>
 8011cae:	f1bb 0f00 	cmp.w	fp, #0
 8011cb2:	bfcc      	ite	gt
 8011cb4:	465e      	movgt	r6, fp
 8011cb6:	2601      	movle	r6, #1
 8011cb8:	443e      	add	r6, r7
 8011cba:	f04f 0800 	mov.w	r8, #0
 8011cbe:	9901      	ldr	r1, [sp, #4]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	4648      	mov	r0, r9
 8011cc4:	f000 fb50 	bl	8012368 <__lshift>
 8011cc8:	4621      	mov	r1, r4
 8011cca:	9001      	str	r0, [sp, #4]
 8011ccc:	f000 fbb8 	bl	8012440 <__mcmp>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	dcb0      	bgt.n	8011c36 <_dtoa_r+0x996>
 8011cd4:	d102      	bne.n	8011cdc <_dtoa_r+0xa3c>
 8011cd6:	f01a 0f01 	tst.w	sl, #1
 8011cda:	d1ac      	bne.n	8011c36 <_dtoa_r+0x996>
 8011cdc:	4633      	mov	r3, r6
 8011cde:	461e      	mov	r6, r3
 8011ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ce4:	2a30      	cmp	r2, #48	@ 0x30
 8011ce6:	d0fa      	beq.n	8011cde <_dtoa_r+0xa3e>
 8011ce8:	e4e1      	b.n	80116ae <_dtoa_r+0x40e>
 8011cea:	429f      	cmp	r7, r3
 8011cec:	d1a4      	bne.n	8011c38 <_dtoa_r+0x998>
 8011cee:	9b05      	ldr	r3, [sp, #20]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	9305      	str	r3, [sp, #20]
 8011cf4:	2331      	movs	r3, #49	@ 0x31
 8011cf6:	703b      	strb	r3, [r7, #0]
 8011cf8:	e4d9      	b.n	80116ae <_dtoa_r+0x40e>
 8011cfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011cfc:	4f16      	ldr	r7, [pc, #88]	@ (8011d58 <_dtoa_r+0xab8>)
 8011cfe:	b11b      	cbz	r3, 8011d08 <_dtoa_r+0xa68>
 8011d00:	f107 0308 	add.w	r3, r7, #8
 8011d04:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011d06:	6013      	str	r3, [r2, #0]
 8011d08:	4638      	mov	r0, r7
 8011d0a:	b011      	add	sp, #68	@ 0x44
 8011d0c:	ecbd 8b02 	vpop	{d8}
 8011d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d14:	9b07      	ldr	r3, [sp, #28]
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	f77f ae2c 	ble.w	8011974 <_dtoa_r+0x6d4>
 8011d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d20:	2001      	movs	r0, #1
 8011d22:	e64c      	b.n	80119be <_dtoa_r+0x71e>
 8011d24:	f1bb 0f00 	cmp.w	fp, #0
 8011d28:	f77f aed8 	ble.w	8011adc <_dtoa_r+0x83c>
 8011d2c:	463e      	mov	r6, r7
 8011d2e:	9801      	ldr	r0, [sp, #4]
 8011d30:	4621      	mov	r1, r4
 8011d32:	f7ff fa2c 	bl	801118e <quorem>
 8011d36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011d3a:	f806 ab01 	strb.w	sl, [r6], #1
 8011d3e:	1bf2      	subs	r2, r6, r7
 8011d40:	4593      	cmp	fp, r2
 8011d42:	ddb4      	ble.n	8011cae <_dtoa_r+0xa0e>
 8011d44:	9901      	ldr	r1, [sp, #4]
 8011d46:	2300      	movs	r3, #0
 8011d48:	220a      	movs	r2, #10
 8011d4a:	4648      	mov	r0, r9
 8011d4c:	f000 f968 	bl	8012020 <__multadd>
 8011d50:	9001      	str	r0, [sp, #4]
 8011d52:	e7ec      	b.n	8011d2e <_dtoa_r+0xa8e>
 8011d54:	08012f00 	.word	0x08012f00
 8011d58:	08012e84 	.word	0x08012e84

08011d5c <_free_r>:
 8011d5c:	b538      	push	{r3, r4, r5, lr}
 8011d5e:	4605      	mov	r5, r0
 8011d60:	2900      	cmp	r1, #0
 8011d62:	d041      	beq.n	8011de8 <_free_r+0x8c>
 8011d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d68:	1f0c      	subs	r4, r1, #4
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	bfb8      	it	lt
 8011d6e:	18e4      	addlt	r4, r4, r3
 8011d70:	f000 f8e8 	bl	8011f44 <__malloc_lock>
 8011d74:	4a1d      	ldr	r2, [pc, #116]	@ (8011dec <_free_r+0x90>)
 8011d76:	6813      	ldr	r3, [r2, #0]
 8011d78:	b933      	cbnz	r3, 8011d88 <_free_r+0x2c>
 8011d7a:	6063      	str	r3, [r4, #4]
 8011d7c:	6014      	str	r4, [r2, #0]
 8011d7e:	4628      	mov	r0, r5
 8011d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d84:	f000 b8e4 	b.w	8011f50 <__malloc_unlock>
 8011d88:	42a3      	cmp	r3, r4
 8011d8a:	d908      	bls.n	8011d9e <_free_r+0x42>
 8011d8c:	6820      	ldr	r0, [r4, #0]
 8011d8e:	1821      	adds	r1, r4, r0
 8011d90:	428b      	cmp	r3, r1
 8011d92:	bf01      	itttt	eq
 8011d94:	6819      	ldreq	r1, [r3, #0]
 8011d96:	685b      	ldreq	r3, [r3, #4]
 8011d98:	1809      	addeq	r1, r1, r0
 8011d9a:	6021      	streq	r1, [r4, #0]
 8011d9c:	e7ed      	b.n	8011d7a <_free_r+0x1e>
 8011d9e:	461a      	mov	r2, r3
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	b10b      	cbz	r3, 8011da8 <_free_r+0x4c>
 8011da4:	42a3      	cmp	r3, r4
 8011da6:	d9fa      	bls.n	8011d9e <_free_r+0x42>
 8011da8:	6811      	ldr	r1, [r2, #0]
 8011daa:	1850      	adds	r0, r2, r1
 8011dac:	42a0      	cmp	r0, r4
 8011dae:	d10b      	bne.n	8011dc8 <_free_r+0x6c>
 8011db0:	6820      	ldr	r0, [r4, #0]
 8011db2:	4401      	add	r1, r0
 8011db4:	1850      	adds	r0, r2, r1
 8011db6:	4283      	cmp	r3, r0
 8011db8:	6011      	str	r1, [r2, #0]
 8011dba:	d1e0      	bne.n	8011d7e <_free_r+0x22>
 8011dbc:	6818      	ldr	r0, [r3, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	6053      	str	r3, [r2, #4]
 8011dc2:	4408      	add	r0, r1
 8011dc4:	6010      	str	r0, [r2, #0]
 8011dc6:	e7da      	b.n	8011d7e <_free_r+0x22>
 8011dc8:	d902      	bls.n	8011dd0 <_free_r+0x74>
 8011dca:	230c      	movs	r3, #12
 8011dcc:	602b      	str	r3, [r5, #0]
 8011dce:	e7d6      	b.n	8011d7e <_free_r+0x22>
 8011dd0:	6820      	ldr	r0, [r4, #0]
 8011dd2:	1821      	adds	r1, r4, r0
 8011dd4:	428b      	cmp	r3, r1
 8011dd6:	bf04      	itt	eq
 8011dd8:	6819      	ldreq	r1, [r3, #0]
 8011dda:	685b      	ldreq	r3, [r3, #4]
 8011ddc:	6063      	str	r3, [r4, #4]
 8011dde:	bf04      	itt	eq
 8011de0:	1809      	addeq	r1, r1, r0
 8011de2:	6021      	streq	r1, [r4, #0]
 8011de4:	6054      	str	r4, [r2, #4]
 8011de6:	e7ca      	b.n	8011d7e <_free_r+0x22>
 8011de8:	bd38      	pop	{r3, r4, r5, pc}
 8011dea:	bf00      	nop
 8011dec:	2400db60 	.word	0x2400db60

08011df0 <malloc>:
 8011df0:	4b02      	ldr	r3, [pc, #8]	@ (8011dfc <malloc+0xc>)
 8011df2:	4601      	mov	r1, r0
 8011df4:	6818      	ldr	r0, [r3, #0]
 8011df6:	f000 b825 	b.w	8011e44 <_malloc_r>
 8011dfa:	bf00      	nop
 8011dfc:	24000020 	.word	0x24000020

08011e00 <sbrk_aligned>:
 8011e00:	b570      	push	{r4, r5, r6, lr}
 8011e02:	4e0f      	ldr	r6, [pc, #60]	@ (8011e40 <sbrk_aligned+0x40>)
 8011e04:	460c      	mov	r4, r1
 8011e06:	6831      	ldr	r1, [r6, #0]
 8011e08:	4605      	mov	r5, r0
 8011e0a:	b911      	cbnz	r1, 8011e12 <sbrk_aligned+0x12>
 8011e0c:	f000 fd50 	bl	80128b0 <_sbrk_r>
 8011e10:	6030      	str	r0, [r6, #0]
 8011e12:	4621      	mov	r1, r4
 8011e14:	4628      	mov	r0, r5
 8011e16:	f000 fd4b 	bl	80128b0 <_sbrk_r>
 8011e1a:	1c43      	adds	r3, r0, #1
 8011e1c:	d103      	bne.n	8011e26 <sbrk_aligned+0x26>
 8011e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8011e22:	4620      	mov	r0, r4
 8011e24:	bd70      	pop	{r4, r5, r6, pc}
 8011e26:	1cc4      	adds	r4, r0, #3
 8011e28:	f024 0403 	bic.w	r4, r4, #3
 8011e2c:	42a0      	cmp	r0, r4
 8011e2e:	d0f8      	beq.n	8011e22 <sbrk_aligned+0x22>
 8011e30:	1a21      	subs	r1, r4, r0
 8011e32:	4628      	mov	r0, r5
 8011e34:	f000 fd3c 	bl	80128b0 <_sbrk_r>
 8011e38:	3001      	adds	r0, #1
 8011e3a:	d1f2      	bne.n	8011e22 <sbrk_aligned+0x22>
 8011e3c:	e7ef      	b.n	8011e1e <sbrk_aligned+0x1e>
 8011e3e:	bf00      	nop
 8011e40:	2400db5c 	.word	0x2400db5c

08011e44 <_malloc_r>:
 8011e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e48:	1ccd      	adds	r5, r1, #3
 8011e4a:	f025 0503 	bic.w	r5, r5, #3
 8011e4e:	3508      	adds	r5, #8
 8011e50:	2d0c      	cmp	r5, #12
 8011e52:	bf38      	it	cc
 8011e54:	250c      	movcc	r5, #12
 8011e56:	2d00      	cmp	r5, #0
 8011e58:	4606      	mov	r6, r0
 8011e5a:	db01      	blt.n	8011e60 <_malloc_r+0x1c>
 8011e5c:	42a9      	cmp	r1, r5
 8011e5e:	d904      	bls.n	8011e6a <_malloc_r+0x26>
 8011e60:	230c      	movs	r3, #12
 8011e62:	6033      	str	r3, [r6, #0]
 8011e64:	2000      	movs	r0, #0
 8011e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011f40 <_malloc_r+0xfc>
 8011e6e:	f000 f869 	bl	8011f44 <__malloc_lock>
 8011e72:	f8d8 3000 	ldr.w	r3, [r8]
 8011e76:	461c      	mov	r4, r3
 8011e78:	bb44      	cbnz	r4, 8011ecc <_malloc_r+0x88>
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	4630      	mov	r0, r6
 8011e7e:	f7ff ffbf 	bl	8011e00 <sbrk_aligned>
 8011e82:	1c43      	adds	r3, r0, #1
 8011e84:	4604      	mov	r4, r0
 8011e86:	d158      	bne.n	8011f3a <_malloc_r+0xf6>
 8011e88:	f8d8 4000 	ldr.w	r4, [r8]
 8011e8c:	4627      	mov	r7, r4
 8011e8e:	2f00      	cmp	r7, #0
 8011e90:	d143      	bne.n	8011f1a <_malloc_r+0xd6>
 8011e92:	2c00      	cmp	r4, #0
 8011e94:	d04b      	beq.n	8011f2e <_malloc_r+0xea>
 8011e96:	6823      	ldr	r3, [r4, #0]
 8011e98:	4639      	mov	r1, r7
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	eb04 0903 	add.w	r9, r4, r3
 8011ea0:	f000 fd06 	bl	80128b0 <_sbrk_r>
 8011ea4:	4581      	cmp	r9, r0
 8011ea6:	d142      	bne.n	8011f2e <_malloc_r+0xea>
 8011ea8:	6821      	ldr	r1, [r4, #0]
 8011eaa:	1a6d      	subs	r5, r5, r1
 8011eac:	4629      	mov	r1, r5
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f7ff ffa6 	bl	8011e00 <sbrk_aligned>
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	d03a      	beq.n	8011f2e <_malloc_r+0xea>
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	442b      	add	r3, r5
 8011ebc:	6023      	str	r3, [r4, #0]
 8011ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8011ec2:	685a      	ldr	r2, [r3, #4]
 8011ec4:	bb62      	cbnz	r2, 8011f20 <_malloc_r+0xdc>
 8011ec6:	f8c8 7000 	str.w	r7, [r8]
 8011eca:	e00f      	b.n	8011eec <_malloc_r+0xa8>
 8011ecc:	6822      	ldr	r2, [r4, #0]
 8011ece:	1b52      	subs	r2, r2, r5
 8011ed0:	d420      	bmi.n	8011f14 <_malloc_r+0xd0>
 8011ed2:	2a0b      	cmp	r2, #11
 8011ed4:	d917      	bls.n	8011f06 <_malloc_r+0xc2>
 8011ed6:	1961      	adds	r1, r4, r5
 8011ed8:	42a3      	cmp	r3, r4
 8011eda:	6025      	str	r5, [r4, #0]
 8011edc:	bf18      	it	ne
 8011ede:	6059      	strne	r1, [r3, #4]
 8011ee0:	6863      	ldr	r3, [r4, #4]
 8011ee2:	bf08      	it	eq
 8011ee4:	f8c8 1000 	streq.w	r1, [r8]
 8011ee8:	5162      	str	r2, [r4, r5]
 8011eea:	604b      	str	r3, [r1, #4]
 8011eec:	4630      	mov	r0, r6
 8011eee:	f000 f82f 	bl	8011f50 <__malloc_unlock>
 8011ef2:	f104 000b 	add.w	r0, r4, #11
 8011ef6:	1d23      	adds	r3, r4, #4
 8011ef8:	f020 0007 	bic.w	r0, r0, #7
 8011efc:	1ac2      	subs	r2, r0, r3
 8011efe:	bf1c      	itt	ne
 8011f00:	1a1b      	subne	r3, r3, r0
 8011f02:	50a3      	strne	r3, [r4, r2]
 8011f04:	e7af      	b.n	8011e66 <_malloc_r+0x22>
 8011f06:	6862      	ldr	r2, [r4, #4]
 8011f08:	42a3      	cmp	r3, r4
 8011f0a:	bf0c      	ite	eq
 8011f0c:	f8c8 2000 	streq.w	r2, [r8]
 8011f10:	605a      	strne	r2, [r3, #4]
 8011f12:	e7eb      	b.n	8011eec <_malloc_r+0xa8>
 8011f14:	4623      	mov	r3, r4
 8011f16:	6864      	ldr	r4, [r4, #4]
 8011f18:	e7ae      	b.n	8011e78 <_malloc_r+0x34>
 8011f1a:	463c      	mov	r4, r7
 8011f1c:	687f      	ldr	r7, [r7, #4]
 8011f1e:	e7b6      	b.n	8011e8e <_malloc_r+0x4a>
 8011f20:	461a      	mov	r2, r3
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	42a3      	cmp	r3, r4
 8011f26:	d1fb      	bne.n	8011f20 <_malloc_r+0xdc>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	6053      	str	r3, [r2, #4]
 8011f2c:	e7de      	b.n	8011eec <_malloc_r+0xa8>
 8011f2e:	230c      	movs	r3, #12
 8011f30:	6033      	str	r3, [r6, #0]
 8011f32:	4630      	mov	r0, r6
 8011f34:	f000 f80c 	bl	8011f50 <__malloc_unlock>
 8011f38:	e794      	b.n	8011e64 <_malloc_r+0x20>
 8011f3a:	6005      	str	r5, [r0, #0]
 8011f3c:	e7d6      	b.n	8011eec <_malloc_r+0xa8>
 8011f3e:	bf00      	nop
 8011f40:	2400db60 	.word	0x2400db60

08011f44 <__malloc_lock>:
 8011f44:	4801      	ldr	r0, [pc, #4]	@ (8011f4c <__malloc_lock+0x8>)
 8011f46:	f7ff b912 	b.w	801116e <__retarget_lock_acquire_recursive>
 8011f4a:	bf00      	nop
 8011f4c:	2400db58 	.word	0x2400db58

08011f50 <__malloc_unlock>:
 8011f50:	4801      	ldr	r0, [pc, #4]	@ (8011f58 <__malloc_unlock+0x8>)
 8011f52:	f7ff b90d 	b.w	8011170 <__retarget_lock_release_recursive>
 8011f56:	bf00      	nop
 8011f58:	2400db58 	.word	0x2400db58

08011f5c <_Balloc>:
 8011f5c:	b570      	push	{r4, r5, r6, lr}
 8011f5e:	69c6      	ldr	r6, [r0, #28]
 8011f60:	4604      	mov	r4, r0
 8011f62:	460d      	mov	r5, r1
 8011f64:	b976      	cbnz	r6, 8011f84 <_Balloc+0x28>
 8011f66:	2010      	movs	r0, #16
 8011f68:	f7ff ff42 	bl	8011df0 <malloc>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	61e0      	str	r0, [r4, #28]
 8011f70:	b920      	cbnz	r0, 8011f7c <_Balloc+0x20>
 8011f72:	4b18      	ldr	r3, [pc, #96]	@ (8011fd4 <_Balloc+0x78>)
 8011f74:	4818      	ldr	r0, [pc, #96]	@ (8011fd8 <_Balloc+0x7c>)
 8011f76:	216b      	movs	r1, #107	@ 0x6b
 8011f78:	f000 fcaa 	bl	80128d0 <__assert_func>
 8011f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f80:	6006      	str	r6, [r0, #0]
 8011f82:	60c6      	str	r6, [r0, #12]
 8011f84:	69e6      	ldr	r6, [r4, #28]
 8011f86:	68f3      	ldr	r3, [r6, #12]
 8011f88:	b183      	cbz	r3, 8011fac <_Balloc+0x50>
 8011f8a:	69e3      	ldr	r3, [r4, #28]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f92:	b9b8      	cbnz	r0, 8011fc4 <_Balloc+0x68>
 8011f94:	2101      	movs	r1, #1
 8011f96:	fa01 f605 	lsl.w	r6, r1, r5
 8011f9a:	1d72      	adds	r2, r6, #5
 8011f9c:	0092      	lsls	r2, r2, #2
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f000 fcb4 	bl	801290c <_calloc_r>
 8011fa4:	b160      	cbz	r0, 8011fc0 <_Balloc+0x64>
 8011fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011faa:	e00e      	b.n	8011fca <_Balloc+0x6e>
 8011fac:	2221      	movs	r2, #33	@ 0x21
 8011fae:	2104      	movs	r1, #4
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f000 fcab 	bl	801290c <_calloc_r>
 8011fb6:	69e3      	ldr	r3, [r4, #28]
 8011fb8:	60f0      	str	r0, [r6, #12]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d1e4      	bne.n	8011f8a <_Balloc+0x2e>
 8011fc0:	2000      	movs	r0, #0
 8011fc2:	bd70      	pop	{r4, r5, r6, pc}
 8011fc4:	6802      	ldr	r2, [r0, #0]
 8011fc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011fd0:	e7f7      	b.n	8011fc2 <_Balloc+0x66>
 8011fd2:	bf00      	nop
 8011fd4:	08012e91 	.word	0x08012e91
 8011fd8:	08012f11 	.word	0x08012f11

08011fdc <_Bfree>:
 8011fdc:	b570      	push	{r4, r5, r6, lr}
 8011fde:	69c6      	ldr	r6, [r0, #28]
 8011fe0:	4605      	mov	r5, r0
 8011fe2:	460c      	mov	r4, r1
 8011fe4:	b976      	cbnz	r6, 8012004 <_Bfree+0x28>
 8011fe6:	2010      	movs	r0, #16
 8011fe8:	f7ff ff02 	bl	8011df0 <malloc>
 8011fec:	4602      	mov	r2, r0
 8011fee:	61e8      	str	r0, [r5, #28]
 8011ff0:	b920      	cbnz	r0, 8011ffc <_Bfree+0x20>
 8011ff2:	4b09      	ldr	r3, [pc, #36]	@ (8012018 <_Bfree+0x3c>)
 8011ff4:	4809      	ldr	r0, [pc, #36]	@ (801201c <_Bfree+0x40>)
 8011ff6:	218f      	movs	r1, #143	@ 0x8f
 8011ff8:	f000 fc6a 	bl	80128d0 <__assert_func>
 8011ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012000:	6006      	str	r6, [r0, #0]
 8012002:	60c6      	str	r6, [r0, #12]
 8012004:	b13c      	cbz	r4, 8012016 <_Bfree+0x3a>
 8012006:	69eb      	ldr	r3, [r5, #28]
 8012008:	6862      	ldr	r2, [r4, #4]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012010:	6021      	str	r1, [r4, #0]
 8012012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012016:	bd70      	pop	{r4, r5, r6, pc}
 8012018:	08012e91 	.word	0x08012e91
 801201c:	08012f11 	.word	0x08012f11

08012020 <__multadd>:
 8012020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012024:	690d      	ldr	r5, [r1, #16]
 8012026:	4607      	mov	r7, r0
 8012028:	460c      	mov	r4, r1
 801202a:	461e      	mov	r6, r3
 801202c:	f101 0c14 	add.w	ip, r1, #20
 8012030:	2000      	movs	r0, #0
 8012032:	f8dc 3000 	ldr.w	r3, [ip]
 8012036:	b299      	uxth	r1, r3
 8012038:	fb02 6101 	mla	r1, r2, r1, r6
 801203c:	0c1e      	lsrs	r6, r3, #16
 801203e:	0c0b      	lsrs	r3, r1, #16
 8012040:	fb02 3306 	mla	r3, r2, r6, r3
 8012044:	b289      	uxth	r1, r1
 8012046:	3001      	adds	r0, #1
 8012048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801204c:	4285      	cmp	r5, r0
 801204e:	f84c 1b04 	str.w	r1, [ip], #4
 8012052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012056:	dcec      	bgt.n	8012032 <__multadd+0x12>
 8012058:	b30e      	cbz	r6, 801209e <__multadd+0x7e>
 801205a:	68a3      	ldr	r3, [r4, #8]
 801205c:	42ab      	cmp	r3, r5
 801205e:	dc19      	bgt.n	8012094 <__multadd+0x74>
 8012060:	6861      	ldr	r1, [r4, #4]
 8012062:	4638      	mov	r0, r7
 8012064:	3101      	adds	r1, #1
 8012066:	f7ff ff79 	bl	8011f5c <_Balloc>
 801206a:	4680      	mov	r8, r0
 801206c:	b928      	cbnz	r0, 801207a <__multadd+0x5a>
 801206e:	4602      	mov	r2, r0
 8012070:	4b0c      	ldr	r3, [pc, #48]	@ (80120a4 <__multadd+0x84>)
 8012072:	480d      	ldr	r0, [pc, #52]	@ (80120a8 <__multadd+0x88>)
 8012074:	21ba      	movs	r1, #186	@ 0xba
 8012076:	f000 fc2b 	bl	80128d0 <__assert_func>
 801207a:	6922      	ldr	r2, [r4, #16]
 801207c:	3202      	adds	r2, #2
 801207e:	f104 010c 	add.w	r1, r4, #12
 8012082:	0092      	lsls	r2, r2, #2
 8012084:	300c      	adds	r0, #12
 8012086:	f7ff f874 	bl	8011172 <memcpy>
 801208a:	4621      	mov	r1, r4
 801208c:	4638      	mov	r0, r7
 801208e:	f7ff ffa5 	bl	8011fdc <_Bfree>
 8012092:	4644      	mov	r4, r8
 8012094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012098:	3501      	adds	r5, #1
 801209a:	615e      	str	r6, [r3, #20]
 801209c:	6125      	str	r5, [r4, #16]
 801209e:	4620      	mov	r0, r4
 80120a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a4:	08012f00 	.word	0x08012f00
 80120a8:	08012f11 	.word	0x08012f11

080120ac <__hi0bits>:
 80120ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80120b0:	4603      	mov	r3, r0
 80120b2:	bf36      	itet	cc
 80120b4:	0403      	lslcc	r3, r0, #16
 80120b6:	2000      	movcs	r0, #0
 80120b8:	2010      	movcc	r0, #16
 80120ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80120be:	bf3c      	itt	cc
 80120c0:	021b      	lslcc	r3, r3, #8
 80120c2:	3008      	addcc	r0, #8
 80120c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120c8:	bf3c      	itt	cc
 80120ca:	011b      	lslcc	r3, r3, #4
 80120cc:	3004      	addcc	r0, #4
 80120ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120d2:	bf3c      	itt	cc
 80120d4:	009b      	lslcc	r3, r3, #2
 80120d6:	3002      	addcc	r0, #2
 80120d8:	2b00      	cmp	r3, #0
 80120da:	db05      	blt.n	80120e8 <__hi0bits+0x3c>
 80120dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80120e0:	f100 0001 	add.w	r0, r0, #1
 80120e4:	bf08      	it	eq
 80120e6:	2020      	moveq	r0, #32
 80120e8:	4770      	bx	lr

080120ea <__lo0bits>:
 80120ea:	6803      	ldr	r3, [r0, #0]
 80120ec:	4602      	mov	r2, r0
 80120ee:	f013 0007 	ands.w	r0, r3, #7
 80120f2:	d00b      	beq.n	801210c <__lo0bits+0x22>
 80120f4:	07d9      	lsls	r1, r3, #31
 80120f6:	d421      	bmi.n	801213c <__lo0bits+0x52>
 80120f8:	0798      	lsls	r0, r3, #30
 80120fa:	bf49      	itett	mi
 80120fc:	085b      	lsrmi	r3, r3, #1
 80120fe:	089b      	lsrpl	r3, r3, #2
 8012100:	2001      	movmi	r0, #1
 8012102:	6013      	strmi	r3, [r2, #0]
 8012104:	bf5c      	itt	pl
 8012106:	6013      	strpl	r3, [r2, #0]
 8012108:	2002      	movpl	r0, #2
 801210a:	4770      	bx	lr
 801210c:	b299      	uxth	r1, r3
 801210e:	b909      	cbnz	r1, 8012114 <__lo0bits+0x2a>
 8012110:	0c1b      	lsrs	r3, r3, #16
 8012112:	2010      	movs	r0, #16
 8012114:	b2d9      	uxtb	r1, r3
 8012116:	b909      	cbnz	r1, 801211c <__lo0bits+0x32>
 8012118:	3008      	adds	r0, #8
 801211a:	0a1b      	lsrs	r3, r3, #8
 801211c:	0719      	lsls	r1, r3, #28
 801211e:	bf04      	itt	eq
 8012120:	091b      	lsreq	r3, r3, #4
 8012122:	3004      	addeq	r0, #4
 8012124:	0799      	lsls	r1, r3, #30
 8012126:	bf04      	itt	eq
 8012128:	089b      	lsreq	r3, r3, #2
 801212a:	3002      	addeq	r0, #2
 801212c:	07d9      	lsls	r1, r3, #31
 801212e:	d403      	bmi.n	8012138 <__lo0bits+0x4e>
 8012130:	085b      	lsrs	r3, r3, #1
 8012132:	f100 0001 	add.w	r0, r0, #1
 8012136:	d003      	beq.n	8012140 <__lo0bits+0x56>
 8012138:	6013      	str	r3, [r2, #0]
 801213a:	4770      	bx	lr
 801213c:	2000      	movs	r0, #0
 801213e:	4770      	bx	lr
 8012140:	2020      	movs	r0, #32
 8012142:	4770      	bx	lr

08012144 <__i2b>:
 8012144:	b510      	push	{r4, lr}
 8012146:	460c      	mov	r4, r1
 8012148:	2101      	movs	r1, #1
 801214a:	f7ff ff07 	bl	8011f5c <_Balloc>
 801214e:	4602      	mov	r2, r0
 8012150:	b928      	cbnz	r0, 801215e <__i2b+0x1a>
 8012152:	4b05      	ldr	r3, [pc, #20]	@ (8012168 <__i2b+0x24>)
 8012154:	4805      	ldr	r0, [pc, #20]	@ (801216c <__i2b+0x28>)
 8012156:	f240 1145 	movw	r1, #325	@ 0x145
 801215a:	f000 fbb9 	bl	80128d0 <__assert_func>
 801215e:	2301      	movs	r3, #1
 8012160:	6144      	str	r4, [r0, #20]
 8012162:	6103      	str	r3, [r0, #16]
 8012164:	bd10      	pop	{r4, pc}
 8012166:	bf00      	nop
 8012168:	08012f00 	.word	0x08012f00
 801216c:	08012f11 	.word	0x08012f11

08012170 <__multiply>:
 8012170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012174:	4617      	mov	r7, r2
 8012176:	690a      	ldr	r2, [r1, #16]
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	429a      	cmp	r2, r3
 801217c:	bfa8      	it	ge
 801217e:	463b      	movge	r3, r7
 8012180:	4689      	mov	r9, r1
 8012182:	bfa4      	itt	ge
 8012184:	460f      	movge	r7, r1
 8012186:	4699      	movge	r9, r3
 8012188:	693d      	ldr	r5, [r7, #16]
 801218a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	6879      	ldr	r1, [r7, #4]
 8012192:	eb05 060a 	add.w	r6, r5, sl
 8012196:	42b3      	cmp	r3, r6
 8012198:	b085      	sub	sp, #20
 801219a:	bfb8      	it	lt
 801219c:	3101      	addlt	r1, #1
 801219e:	f7ff fedd 	bl	8011f5c <_Balloc>
 80121a2:	b930      	cbnz	r0, 80121b2 <__multiply+0x42>
 80121a4:	4602      	mov	r2, r0
 80121a6:	4b41      	ldr	r3, [pc, #260]	@ (80122ac <__multiply+0x13c>)
 80121a8:	4841      	ldr	r0, [pc, #260]	@ (80122b0 <__multiply+0x140>)
 80121aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80121ae:	f000 fb8f 	bl	80128d0 <__assert_func>
 80121b2:	f100 0414 	add.w	r4, r0, #20
 80121b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80121ba:	4623      	mov	r3, r4
 80121bc:	2200      	movs	r2, #0
 80121be:	4573      	cmp	r3, lr
 80121c0:	d320      	bcc.n	8012204 <__multiply+0x94>
 80121c2:	f107 0814 	add.w	r8, r7, #20
 80121c6:	f109 0114 	add.w	r1, r9, #20
 80121ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80121ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80121d2:	9302      	str	r3, [sp, #8]
 80121d4:	1beb      	subs	r3, r5, r7
 80121d6:	3b15      	subs	r3, #21
 80121d8:	f023 0303 	bic.w	r3, r3, #3
 80121dc:	3304      	adds	r3, #4
 80121de:	3715      	adds	r7, #21
 80121e0:	42bd      	cmp	r5, r7
 80121e2:	bf38      	it	cc
 80121e4:	2304      	movcc	r3, #4
 80121e6:	9301      	str	r3, [sp, #4]
 80121e8:	9b02      	ldr	r3, [sp, #8]
 80121ea:	9103      	str	r1, [sp, #12]
 80121ec:	428b      	cmp	r3, r1
 80121ee:	d80c      	bhi.n	801220a <__multiply+0x9a>
 80121f0:	2e00      	cmp	r6, #0
 80121f2:	dd03      	ble.n	80121fc <__multiply+0x8c>
 80121f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d055      	beq.n	80122a8 <__multiply+0x138>
 80121fc:	6106      	str	r6, [r0, #16]
 80121fe:	b005      	add	sp, #20
 8012200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012204:	f843 2b04 	str.w	r2, [r3], #4
 8012208:	e7d9      	b.n	80121be <__multiply+0x4e>
 801220a:	f8b1 a000 	ldrh.w	sl, [r1]
 801220e:	f1ba 0f00 	cmp.w	sl, #0
 8012212:	d01f      	beq.n	8012254 <__multiply+0xe4>
 8012214:	46c4      	mov	ip, r8
 8012216:	46a1      	mov	r9, r4
 8012218:	2700      	movs	r7, #0
 801221a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801221e:	f8d9 3000 	ldr.w	r3, [r9]
 8012222:	fa1f fb82 	uxth.w	fp, r2
 8012226:	b29b      	uxth	r3, r3
 8012228:	fb0a 330b 	mla	r3, sl, fp, r3
 801222c:	443b      	add	r3, r7
 801222e:	f8d9 7000 	ldr.w	r7, [r9]
 8012232:	0c12      	lsrs	r2, r2, #16
 8012234:	0c3f      	lsrs	r7, r7, #16
 8012236:	fb0a 7202 	mla	r2, sl, r2, r7
 801223a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801223e:	b29b      	uxth	r3, r3
 8012240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012244:	4565      	cmp	r5, ip
 8012246:	f849 3b04 	str.w	r3, [r9], #4
 801224a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801224e:	d8e4      	bhi.n	801221a <__multiply+0xaa>
 8012250:	9b01      	ldr	r3, [sp, #4]
 8012252:	50e7      	str	r7, [r4, r3]
 8012254:	9b03      	ldr	r3, [sp, #12]
 8012256:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801225a:	3104      	adds	r1, #4
 801225c:	f1b9 0f00 	cmp.w	r9, #0
 8012260:	d020      	beq.n	80122a4 <__multiply+0x134>
 8012262:	6823      	ldr	r3, [r4, #0]
 8012264:	4647      	mov	r7, r8
 8012266:	46a4      	mov	ip, r4
 8012268:	f04f 0a00 	mov.w	sl, #0
 801226c:	f8b7 b000 	ldrh.w	fp, [r7]
 8012270:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012274:	fb09 220b 	mla	r2, r9, fp, r2
 8012278:	4452      	add	r2, sl
 801227a:	b29b      	uxth	r3, r3
 801227c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012280:	f84c 3b04 	str.w	r3, [ip], #4
 8012284:	f857 3b04 	ldr.w	r3, [r7], #4
 8012288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801228c:	f8bc 3000 	ldrh.w	r3, [ip]
 8012290:	fb09 330a 	mla	r3, r9, sl, r3
 8012294:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012298:	42bd      	cmp	r5, r7
 801229a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801229e:	d8e5      	bhi.n	801226c <__multiply+0xfc>
 80122a0:	9a01      	ldr	r2, [sp, #4]
 80122a2:	50a3      	str	r3, [r4, r2]
 80122a4:	3404      	adds	r4, #4
 80122a6:	e79f      	b.n	80121e8 <__multiply+0x78>
 80122a8:	3e01      	subs	r6, #1
 80122aa:	e7a1      	b.n	80121f0 <__multiply+0x80>
 80122ac:	08012f00 	.word	0x08012f00
 80122b0:	08012f11 	.word	0x08012f11

080122b4 <__pow5mult>:
 80122b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122b8:	4615      	mov	r5, r2
 80122ba:	f012 0203 	ands.w	r2, r2, #3
 80122be:	4607      	mov	r7, r0
 80122c0:	460e      	mov	r6, r1
 80122c2:	d007      	beq.n	80122d4 <__pow5mult+0x20>
 80122c4:	4c25      	ldr	r4, [pc, #148]	@ (801235c <__pow5mult+0xa8>)
 80122c6:	3a01      	subs	r2, #1
 80122c8:	2300      	movs	r3, #0
 80122ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122ce:	f7ff fea7 	bl	8012020 <__multadd>
 80122d2:	4606      	mov	r6, r0
 80122d4:	10ad      	asrs	r5, r5, #2
 80122d6:	d03d      	beq.n	8012354 <__pow5mult+0xa0>
 80122d8:	69fc      	ldr	r4, [r7, #28]
 80122da:	b97c      	cbnz	r4, 80122fc <__pow5mult+0x48>
 80122dc:	2010      	movs	r0, #16
 80122de:	f7ff fd87 	bl	8011df0 <malloc>
 80122e2:	4602      	mov	r2, r0
 80122e4:	61f8      	str	r0, [r7, #28]
 80122e6:	b928      	cbnz	r0, 80122f4 <__pow5mult+0x40>
 80122e8:	4b1d      	ldr	r3, [pc, #116]	@ (8012360 <__pow5mult+0xac>)
 80122ea:	481e      	ldr	r0, [pc, #120]	@ (8012364 <__pow5mult+0xb0>)
 80122ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80122f0:	f000 faee 	bl	80128d0 <__assert_func>
 80122f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80122f8:	6004      	str	r4, [r0, #0]
 80122fa:	60c4      	str	r4, [r0, #12]
 80122fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012304:	b94c      	cbnz	r4, 801231a <__pow5mult+0x66>
 8012306:	f240 2171 	movw	r1, #625	@ 0x271
 801230a:	4638      	mov	r0, r7
 801230c:	f7ff ff1a 	bl	8012144 <__i2b>
 8012310:	2300      	movs	r3, #0
 8012312:	f8c8 0008 	str.w	r0, [r8, #8]
 8012316:	4604      	mov	r4, r0
 8012318:	6003      	str	r3, [r0, #0]
 801231a:	f04f 0900 	mov.w	r9, #0
 801231e:	07eb      	lsls	r3, r5, #31
 8012320:	d50a      	bpl.n	8012338 <__pow5mult+0x84>
 8012322:	4631      	mov	r1, r6
 8012324:	4622      	mov	r2, r4
 8012326:	4638      	mov	r0, r7
 8012328:	f7ff ff22 	bl	8012170 <__multiply>
 801232c:	4631      	mov	r1, r6
 801232e:	4680      	mov	r8, r0
 8012330:	4638      	mov	r0, r7
 8012332:	f7ff fe53 	bl	8011fdc <_Bfree>
 8012336:	4646      	mov	r6, r8
 8012338:	106d      	asrs	r5, r5, #1
 801233a:	d00b      	beq.n	8012354 <__pow5mult+0xa0>
 801233c:	6820      	ldr	r0, [r4, #0]
 801233e:	b938      	cbnz	r0, 8012350 <__pow5mult+0x9c>
 8012340:	4622      	mov	r2, r4
 8012342:	4621      	mov	r1, r4
 8012344:	4638      	mov	r0, r7
 8012346:	f7ff ff13 	bl	8012170 <__multiply>
 801234a:	6020      	str	r0, [r4, #0]
 801234c:	f8c0 9000 	str.w	r9, [r0]
 8012350:	4604      	mov	r4, r0
 8012352:	e7e4      	b.n	801231e <__pow5mult+0x6a>
 8012354:	4630      	mov	r0, r6
 8012356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801235a:	bf00      	nop
 801235c:	08012fc4 	.word	0x08012fc4
 8012360:	08012e91 	.word	0x08012e91
 8012364:	08012f11 	.word	0x08012f11

08012368 <__lshift>:
 8012368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801236c:	460c      	mov	r4, r1
 801236e:	6849      	ldr	r1, [r1, #4]
 8012370:	6923      	ldr	r3, [r4, #16]
 8012372:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012376:	68a3      	ldr	r3, [r4, #8]
 8012378:	4607      	mov	r7, r0
 801237a:	4691      	mov	r9, r2
 801237c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012380:	f108 0601 	add.w	r6, r8, #1
 8012384:	42b3      	cmp	r3, r6
 8012386:	db0b      	blt.n	80123a0 <__lshift+0x38>
 8012388:	4638      	mov	r0, r7
 801238a:	f7ff fde7 	bl	8011f5c <_Balloc>
 801238e:	4605      	mov	r5, r0
 8012390:	b948      	cbnz	r0, 80123a6 <__lshift+0x3e>
 8012392:	4602      	mov	r2, r0
 8012394:	4b28      	ldr	r3, [pc, #160]	@ (8012438 <__lshift+0xd0>)
 8012396:	4829      	ldr	r0, [pc, #164]	@ (801243c <__lshift+0xd4>)
 8012398:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801239c:	f000 fa98 	bl	80128d0 <__assert_func>
 80123a0:	3101      	adds	r1, #1
 80123a2:	005b      	lsls	r3, r3, #1
 80123a4:	e7ee      	b.n	8012384 <__lshift+0x1c>
 80123a6:	2300      	movs	r3, #0
 80123a8:	f100 0114 	add.w	r1, r0, #20
 80123ac:	f100 0210 	add.w	r2, r0, #16
 80123b0:	4618      	mov	r0, r3
 80123b2:	4553      	cmp	r3, sl
 80123b4:	db33      	blt.n	801241e <__lshift+0xb6>
 80123b6:	6920      	ldr	r0, [r4, #16]
 80123b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123bc:	f104 0314 	add.w	r3, r4, #20
 80123c0:	f019 091f 	ands.w	r9, r9, #31
 80123c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80123cc:	d02b      	beq.n	8012426 <__lshift+0xbe>
 80123ce:	f1c9 0e20 	rsb	lr, r9, #32
 80123d2:	468a      	mov	sl, r1
 80123d4:	2200      	movs	r2, #0
 80123d6:	6818      	ldr	r0, [r3, #0]
 80123d8:	fa00 f009 	lsl.w	r0, r0, r9
 80123dc:	4310      	orrs	r0, r2
 80123de:	f84a 0b04 	str.w	r0, [sl], #4
 80123e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80123e6:	459c      	cmp	ip, r3
 80123e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80123ec:	d8f3      	bhi.n	80123d6 <__lshift+0x6e>
 80123ee:	ebac 0304 	sub.w	r3, ip, r4
 80123f2:	3b15      	subs	r3, #21
 80123f4:	f023 0303 	bic.w	r3, r3, #3
 80123f8:	3304      	adds	r3, #4
 80123fa:	f104 0015 	add.w	r0, r4, #21
 80123fe:	4560      	cmp	r0, ip
 8012400:	bf88      	it	hi
 8012402:	2304      	movhi	r3, #4
 8012404:	50ca      	str	r2, [r1, r3]
 8012406:	b10a      	cbz	r2, 801240c <__lshift+0xa4>
 8012408:	f108 0602 	add.w	r6, r8, #2
 801240c:	3e01      	subs	r6, #1
 801240e:	4638      	mov	r0, r7
 8012410:	612e      	str	r6, [r5, #16]
 8012412:	4621      	mov	r1, r4
 8012414:	f7ff fde2 	bl	8011fdc <_Bfree>
 8012418:	4628      	mov	r0, r5
 801241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801241e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012422:	3301      	adds	r3, #1
 8012424:	e7c5      	b.n	80123b2 <__lshift+0x4a>
 8012426:	3904      	subs	r1, #4
 8012428:	f853 2b04 	ldr.w	r2, [r3], #4
 801242c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012430:	459c      	cmp	ip, r3
 8012432:	d8f9      	bhi.n	8012428 <__lshift+0xc0>
 8012434:	e7ea      	b.n	801240c <__lshift+0xa4>
 8012436:	bf00      	nop
 8012438:	08012f00 	.word	0x08012f00
 801243c:	08012f11 	.word	0x08012f11

08012440 <__mcmp>:
 8012440:	690a      	ldr	r2, [r1, #16]
 8012442:	4603      	mov	r3, r0
 8012444:	6900      	ldr	r0, [r0, #16]
 8012446:	1a80      	subs	r0, r0, r2
 8012448:	b530      	push	{r4, r5, lr}
 801244a:	d10e      	bne.n	801246a <__mcmp+0x2a>
 801244c:	3314      	adds	r3, #20
 801244e:	3114      	adds	r1, #20
 8012450:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012454:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801245c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012460:	4295      	cmp	r5, r2
 8012462:	d003      	beq.n	801246c <__mcmp+0x2c>
 8012464:	d205      	bcs.n	8012472 <__mcmp+0x32>
 8012466:	f04f 30ff 	mov.w	r0, #4294967295
 801246a:	bd30      	pop	{r4, r5, pc}
 801246c:	42a3      	cmp	r3, r4
 801246e:	d3f3      	bcc.n	8012458 <__mcmp+0x18>
 8012470:	e7fb      	b.n	801246a <__mcmp+0x2a>
 8012472:	2001      	movs	r0, #1
 8012474:	e7f9      	b.n	801246a <__mcmp+0x2a>
	...

08012478 <__mdiff>:
 8012478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801247c:	4689      	mov	r9, r1
 801247e:	4606      	mov	r6, r0
 8012480:	4611      	mov	r1, r2
 8012482:	4648      	mov	r0, r9
 8012484:	4614      	mov	r4, r2
 8012486:	f7ff ffdb 	bl	8012440 <__mcmp>
 801248a:	1e05      	subs	r5, r0, #0
 801248c:	d112      	bne.n	80124b4 <__mdiff+0x3c>
 801248e:	4629      	mov	r1, r5
 8012490:	4630      	mov	r0, r6
 8012492:	f7ff fd63 	bl	8011f5c <_Balloc>
 8012496:	4602      	mov	r2, r0
 8012498:	b928      	cbnz	r0, 80124a6 <__mdiff+0x2e>
 801249a:	4b3f      	ldr	r3, [pc, #252]	@ (8012598 <__mdiff+0x120>)
 801249c:	f240 2137 	movw	r1, #567	@ 0x237
 80124a0:	483e      	ldr	r0, [pc, #248]	@ (801259c <__mdiff+0x124>)
 80124a2:	f000 fa15 	bl	80128d0 <__assert_func>
 80124a6:	2301      	movs	r3, #1
 80124a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80124ac:	4610      	mov	r0, r2
 80124ae:	b003      	add	sp, #12
 80124b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b4:	bfbc      	itt	lt
 80124b6:	464b      	movlt	r3, r9
 80124b8:	46a1      	movlt	r9, r4
 80124ba:	4630      	mov	r0, r6
 80124bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80124c0:	bfba      	itte	lt
 80124c2:	461c      	movlt	r4, r3
 80124c4:	2501      	movlt	r5, #1
 80124c6:	2500      	movge	r5, #0
 80124c8:	f7ff fd48 	bl	8011f5c <_Balloc>
 80124cc:	4602      	mov	r2, r0
 80124ce:	b918      	cbnz	r0, 80124d8 <__mdiff+0x60>
 80124d0:	4b31      	ldr	r3, [pc, #196]	@ (8012598 <__mdiff+0x120>)
 80124d2:	f240 2145 	movw	r1, #581	@ 0x245
 80124d6:	e7e3      	b.n	80124a0 <__mdiff+0x28>
 80124d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80124dc:	6926      	ldr	r6, [r4, #16]
 80124de:	60c5      	str	r5, [r0, #12]
 80124e0:	f109 0310 	add.w	r3, r9, #16
 80124e4:	f109 0514 	add.w	r5, r9, #20
 80124e8:	f104 0e14 	add.w	lr, r4, #20
 80124ec:	f100 0b14 	add.w	fp, r0, #20
 80124f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80124f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80124f8:	9301      	str	r3, [sp, #4]
 80124fa:	46d9      	mov	r9, fp
 80124fc:	f04f 0c00 	mov.w	ip, #0
 8012500:	9b01      	ldr	r3, [sp, #4]
 8012502:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012506:	f853 af04 	ldr.w	sl, [r3, #4]!
 801250a:	9301      	str	r3, [sp, #4]
 801250c:	fa1f f38a 	uxth.w	r3, sl
 8012510:	4619      	mov	r1, r3
 8012512:	b283      	uxth	r3, r0
 8012514:	1acb      	subs	r3, r1, r3
 8012516:	0c00      	lsrs	r0, r0, #16
 8012518:	4463      	add	r3, ip
 801251a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801251e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012522:	b29b      	uxth	r3, r3
 8012524:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012528:	4576      	cmp	r6, lr
 801252a:	f849 3b04 	str.w	r3, [r9], #4
 801252e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012532:	d8e5      	bhi.n	8012500 <__mdiff+0x88>
 8012534:	1b33      	subs	r3, r6, r4
 8012536:	3b15      	subs	r3, #21
 8012538:	f023 0303 	bic.w	r3, r3, #3
 801253c:	3415      	adds	r4, #21
 801253e:	3304      	adds	r3, #4
 8012540:	42a6      	cmp	r6, r4
 8012542:	bf38      	it	cc
 8012544:	2304      	movcc	r3, #4
 8012546:	441d      	add	r5, r3
 8012548:	445b      	add	r3, fp
 801254a:	461e      	mov	r6, r3
 801254c:	462c      	mov	r4, r5
 801254e:	4544      	cmp	r4, r8
 8012550:	d30e      	bcc.n	8012570 <__mdiff+0xf8>
 8012552:	f108 0103 	add.w	r1, r8, #3
 8012556:	1b49      	subs	r1, r1, r5
 8012558:	f021 0103 	bic.w	r1, r1, #3
 801255c:	3d03      	subs	r5, #3
 801255e:	45a8      	cmp	r8, r5
 8012560:	bf38      	it	cc
 8012562:	2100      	movcc	r1, #0
 8012564:	440b      	add	r3, r1
 8012566:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801256a:	b191      	cbz	r1, 8012592 <__mdiff+0x11a>
 801256c:	6117      	str	r7, [r2, #16]
 801256e:	e79d      	b.n	80124ac <__mdiff+0x34>
 8012570:	f854 1b04 	ldr.w	r1, [r4], #4
 8012574:	46e6      	mov	lr, ip
 8012576:	0c08      	lsrs	r0, r1, #16
 8012578:	fa1c fc81 	uxtah	ip, ip, r1
 801257c:	4471      	add	r1, lr
 801257e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012582:	b289      	uxth	r1, r1
 8012584:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012588:	f846 1b04 	str.w	r1, [r6], #4
 801258c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012590:	e7dd      	b.n	801254e <__mdiff+0xd6>
 8012592:	3f01      	subs	r7, #1
 8012594:	e7e7      	b.n	8012566 <__mdiff+0xee>
 8012596:	bf00      	nop
 8012598:	08012f00 	.word	0x08012f00
 801259c:	08012f11 	.word	0x08012f11

080125a0 <__d2b>:
 80125a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80125a4:	460f      	mov	r7, r1
 80125a6:	2101      	movs	r1, #1
 80125a8:	ec59 8b10 	vmov	r8, r9, d0
 80125ac:	4616      	mov	r6, r2
 80125ae:	f7ff fcd5 	bl	8011f5c <_Balloc>
 80125b2:	4604      	mov	r4, r0
 80125b4:	b930      	cbnz	r0, 80125c4 <__d2b+0x24>
 80125b6:	4602      	mov	r2, r0
 80125b8:	4b23      	ldr	r3, [pc, #140]	@ (8012648 <__d2b+0xa8>)
 80125ba:	4824      	ldr	r0, [pc, #144]	@ (801264c <__d2b+0xac>)
 80125bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80125c0:	f000 f986 	bl	80128d0 <__assert_func>
 80125c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80125c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125cc:	b10d      	cbz	r5, 80125d2 <__d2b+0x32>
 80125ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80125d2:	9301      	str	r3, [sp, #4]
 80125d4:	f1b8 0300 	subs.w	r3, r8, #0
 80125d8:	d023      	beq.n	8012622 <__d2b+0x82>
 80125da:	4668      	mov	r0, sp
 80125dc:	9300      	str	r3, [sp, #0]
 80125de:	f7ff fd84 	bl	80120ea <__lo0bits>
 80125e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80125e6:	b1d0      	cbz	r0, 801261e <__d2b+0x7e>
 80125e8:	f1c0 0320 	rsb	r3, r0, #32
 80125ec:	fa02 f303 	lsl.w	r3, r2, r3
 80125f0:	430b      	orrs	r3, r1
 80125f2:	40c2      	lsrs	r2, r0
 80125f4:	6163      	str	r3, [r4, #20]
 80125f6:	9201      	str	r2, [sp, #4]
 80125f8:	9b01      	ldr	r3, [sp, #4]
 80125fa:	61a3      	str	r3, [r4, #24]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	bf0c      	ite	eq
 8012600:	2201      	moveq	r2, #1
 8012602:	2202      	movne	r2, #2
 8012604:	6122      	str	r2, [r4, #16]
 8012606:	b1a5      	cbz	r5, 8012632 <__d2b+0x92>
 8012608:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801260c:	4405      	add	r5, r0
 801260e:	603d      	str	r5, [r7, #0]
 8012610:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012614:	6030      	str	r0, [r6, #0]
 8012616:	4620      	mov	r0, r4
 8012618:	b003      	add	sp, #12
 801261a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801261e:	6161      	str	r1, [r4, #20]
 8012620:	e7ea      	b.n	80125f8 <__d2b+0x58>
 8012622:	a801      	add	r0, sp, #4
 8012624:	f7ff fd61 	bl	80120ea <__lo0bits>
 8012628:	9b01      	ldr	r3, [sp, #4]
 801262a:	6163      	str	r3, [r4, #20]
 801262c:	3020      	adds	r0, #32
 801262e:	2201      	movs	r2, #1
 8012630:	e7e8      	b.n	8012604 <__d2b+0x64>
 8012632:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801263a:	6038      	str	r0, [r7, #0]
 801263c:	6918      	ldr	r0, [r3, #16]
 801263e:	f7ff fd35 	bl	80120ac <__hi0bits>
 8012642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012646:	e7e5      	b.n	8012614 <__d2b+0x74>
 8012648:	08012f00 	.word	0x08012f00
 801264c:	08012f11 	.word	0x08012f11

08012650 <__sflush_r>:
 8012650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012658:	0716      	lsls	r6, r2, #28
 801265a:	4605      	mov	r5, r0
 801265c:	460c      	mov	r4, r1
 801265e:	d454      	bmi.n	801270a <__sflush_r+0xba>
 8012660:	684b      	ldr	r3, [r1, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	dc02      	bgt.n	801266c <__sflush_r+0x1c>
 8012666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012668:	2b00      	cmp	r3, #0
 801266a:	dd48      	ble.n	80126fe <__sflush_r+0xae>
 801266c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801266e:	2e00      	cmp	r6, #0
 8012670:	d045      	beq.n	80126fe <__sflush_r+0xae>
 8012672:	2300      	movs	r3, #0
 8012674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012678:	682f      	ldr	r7, [r5, #0]
 801267a:	6a21      	ldr	r1, [r4, #32]
 801267c:	602b      	str	r3, [r5, #0]
 801267e:	d030      	beq.n	80126e2 <__sflush_r+0x92>
 8012680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012682:	89a3      	ldrh	r3, [r4, #12]
 8012684:	0759      	lsls	r1, r3, #29
 8012686:	d505      	bpl.n	8012694 <__sflush_r+0x44>
 8012688:	6863      	ldr	r3, [r4, #4]
 801268a:	1ad2      	subs	r2, r2, r3
 801268c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801268e:	b10b      	cbz	r3, 8012694 <__sflush_r+0x44>
 8012690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012692:	1ad2      	subs	r2, r2, r3
 8012694:	2300      	movs	r3, #0
 8012696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012698:	6a21      	ldr	r1, [r4, #32]
 801269a:	4628      	mov	r0, r5
 801269c:	47b0      	blx	r6
 801269e:	1c43      	adds	r3, r0, #1
 80126a0:	89a3      	ldrh	r3, [r4, #12]
 80126a2:	d106      	bne.n	80126b2 <__sflush_r+0x62>
 80126a4:	6829      	ldr	r1, [r5, #0]
 80126a6:	291d      	cmp	r1, #29
 80126a8:	d82b      	bhi.n	8012702 <__sflush_r+0xb2>
 80126aa:	4a2a      	ldr	r2, [pc, #168]	@ (8012754 <__sflush_r+0x104>)
 80126ac:	40ca      	lsrs	r2, r1
 80126ae:	07d6      	lsls	r6, r2, #31
 80126b0:	d527      	bpl.n	8012702 <__sflush_r+0xb2>
 80126b2:	2200      	movs	r2, #0
 80126b4:	6062      	str	r2, [r4, #4]
 80126b6:	04d9      	lsls	r1, r3, #19
 80126b8:	6922      	ldr	r2, [r4, #16]
 80126ba:	6022      	str	r2, [r4, #0]
 80126bc:	d504      	bpl.n	80126c8 <__sflush_r+0x78>
 80126be:	1c42      	adds	r2, r0, #1
 80126c0:	d101      	bne.n	80126c6 <__sflush_r+0x76>
 80126c2:	682b      	ldr	r3, [r5, #0]
 80126c4:	b903      	cbnz	r3, 80126c8 <__sflush_r+0x78>
 80126c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80126c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126ca:	602f      	str	r7, [r5, #0]
 80126cc:	b1b9      	cbz	r1, 80126fe <__sflush_r+0xae>
 80126ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126d2:	4299      	cmp	r1, r3
 80126d4:	d002      	beq.n	80126dc <__sflush_r+0x8c>
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7ff fb40 	bl	8011d5c <_free_r>
 80126dc:	2300      	movs	r3, #0
 80126de:	6363      	str	r3, [r4, #52]	@ 0x34
 80126e0:	e00d      	b.n	80126fe <__sflush_r+0xae>
 80126e2:	2301      	movs	r3, #1
 80126e4:	4628      	mov	r0, r5
 80126e6:	47b0      	blx	r6
 80126e8:	4602      	mov	r2, r0
 80126ea:	1c50      	adds	r0, r2, #1
 80126ec:	d1c9      	bne.n	8012682 <__sflush_r+0x32>
 80126ee:	682b      	ldr	r3, [r5, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d0c6      	beq.n	8012682 <__sflush_r+0x32>
 80126f4:	2b1d      	cmp	r3, #29
 80126f6:	d001      	beq.n	80126fc <__sflush_r+0xac>
 80126f8:	2b16      	cmp	r3, #22
 80126fa:	d11e      	bne.n	801273a <__sflush_r+0xea>
 80126fc:	602f      	str	r7, [r5, #0]
 80126fe:	2000      	movs	r0, #0
 8012700:	e022      	b.n	8012748 <__sflush_r+0xf8>
 8012702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012706:	b21b      	sxth	r3, r3
 8012708:	e01b      	b.n	8012742 <__sflush_r+0xf2>
 801270a:	690f      	ldr	r7, [r1, #16]
 801270c:	2f00      	cmp	r7, #0
 801270e:	d0f6      	beq.n	80126fe <__sflush_r+0xae>
 8012710:	0793      	lsls	r3, r2, #30
 8012712:	680e      	ldr	r6, [r1, #0]
 8012714:	bf08      	it	eq
 8012716:	694b      	ldreq	r3, [r1, #20]
 8012718:	600f      	str	r7, [r1, #0]
 801271a:	bf18      	it	ne
 801271c:	2300      	movne	r3, #0
 801271e:	eba6 0807 	sub.w	r8, r6, r7
 8012722:	608b      	str	r3, [r1, #8]
 8012724:	f1b8 0f00 	cmp.w	r8, #0
 8012728:	dde9      	ble.n	80126fe <__sflush_r+0xae>
 801272a:	6a21      	ldr	r1, [r4, #32]
 801272c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801272e:	4643      	mov	r3, r8
 8012730:	463a      	mov	r2, r7
 8012732:	4628      	mov	r0, r5
 8012734:	47b0      	blx	r6
 8012736:	2800      	cmp	r0, #0
 8012738:	dc08      	bgt.n	801274c <__sflush_r+0xfc>
 801273a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801273e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012742:	81a3      	strh	r3, [r4, #12]
 8012744:	f04f 30ff 	mov.w	r0, #4294967295
 8012748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274c:	4407      	add	r7, r0
 801274e:	eba8 0800 	sub.w	r8, r8, r0
 8012752:	e7e7      	b.n	8012724 <__sflush_r+0xd4>
 8012754:	20400001 	.word	0x20400001

08012758 <_fflush_r>:
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	690b      	ldr	r3, [r1, #16]
 801275c:	4605      	mov	r5, r0
 801275e:	460c      	mov	r4, r1
 8012760:	b913      	cbnz	r3, 8012768 <_fflush_r+0x10>
 8012762:	2500      	movs	r5, #0
 8012764:	4628      	mov	r0, r5
 8012766:	bd38      	pop	{r3, r4, r5, pc}
 8012768:	b118      	cbz	r0, 8012772 <_fflush_r+0x1a>
 801276a:	6a03      	ldr	r3, [r0, #32]
 801276c:	b90b      	cbnz	r3, 8012772 <_fflush_r+0x1a>
 801276e:	f7fe fb15 	bl	8010d9c <__sinit>
 8012772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d0f3      	beq.n	8012762 <_fflush_r+0xa>
 801277a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801277c:	07d0      	lsls	r0, r2, #31
 801277e:	d404      	bmi.n	801278a <_fflush_r+0x32>
 8012780:	0599      	lsls	r1, r3, #22
 8012782:	d402      	bmi.n	801278a <_fflush_r+0x32>
 8012784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012786:	f7fe fcf2 	bl	801116e <__retarget_lock_acquire_recursive>
 801278a:	4628      	mov	r0, r5
 801278c:	4621      	mov	r1, r4
 801278e:	f7ff ff5f 	bl	8012650 <__sflush_r>
 8012792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012794:	07da      	lsls	r2, r3, #31
 8012796:	4605      	mov	r5, r0
 8012798:	d4e4      	bmi.n	8012764 <_fflush_r+0xc>
 801279a:	89a3      	ldrh	r3, [r4, #12]
 801279c:	059b      	lsls	r3, r3, #22
 801279e:	d4e1      	bmi.n	8012764 <_fflush_r+0xc>
 80127a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127a2:	f7fe fce5 	bl	8011170 <__retarget_lock_release_recursive>
 80127a6:	e7dd      	b.n	8012764 <_fflush_r+0xc>

080127a8 <__swhatbuf_r>:
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	460c      	mov	r4, r1
 80127ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127b0:	2900      	cmp	r1, #0
 80127b2:	b096      	sub	sp, #88	@ 0x58
 80127b4:	4615      	mov	r5, r2
 80127b6:	461e      	mov	r6, r3
 80127b8:	da0d      	bge.n	80127d6 <__swhatbuf_r+0x2e>
 80127ba:	89a3      	ldrh	r3, [r4, #12]
 80127bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80127c0:	f04f 0100 	mov.w	r1, #0
 80127c4:	bf14      	ite	ne
 80127c6:	2340      	movne	r3, #64	@ 0x40
 80127c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80127cc:	2000      	movs	r0, #0
 80127ce:	6031      	str	r1, [r6, #0]
 80127d0:	602b      	str	r3, [r5, #0]
 80127d2:	b016      	add	sp, #88	@ 0x58
 80127d4:	bd70      	pop	{r4, r5, r6, pc}
 80127d6:	466a      	mov	r2, sp
 80127d8:	f000 f848 	bl	801286c <_fstat_r>
 80127dc:	2800      	cmp	r0, #0
 80127de:	dbec      	blt.n	80127ba <__swhatbuf_r+0x12>
 80127e0:	9901      	ldr	r1, [sp, #4]
 80127e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80127e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80127ea:	4259      	negs	r1, r3
 80127ec:	4159      	adcs	r1, r3
 80127ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80127f2:	e7eb      	b.n	80127cc <__swhatbuf_r+0x24>

080127f4 <__smakebuf_r>:
 80127f4:	898b      	ldrh	r3, [r1, #12]
 80127f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127f8:	079d      	lsls	r5, r3, #30
 80127fa:	4606      	mov	r6, r0
 80127fc:	460c      	mov	r4, r1
 80127fe:	d507      	bpl.n	8012810 <__smakebuf_r+0x1c>
 8012800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	6123      	str	r3, [r4, #16]
 8012808:	2301      	movs	r3, #1
 801280a:	6163      	str	r3, [r4, #20]
 801280c:	b003      	add	sp, #12
 801280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012810:	ab01      	add	r3, sp, #4
 8012812:	466a      	mov	r2, sp
 8012814:	f7ff ffc8 	bl	80127a8 <__swhatbuf_r>
 8012818:	9f00      	ldr	r7, [sp, #0]
 801281a:	4605      	mov	r5, r0
 801281c:	4639      	mov	r1, r7
 801281e:	4630      	mov	r0, r6
 8012820:	f7ff fb10 	bl	8011e44 <_malloc_r>
 8012824:	b948      	cbnz	r0, 801283a <__smakebuf_r+0x46>
 8012826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801282a:	059a      	lsls	r2, r3, #22
 801282c:	d4ee      	bmi.n	801280c <__smakebuf_r+0x18>
 801282e:	f023 0303 	bic.w	r3, r3, #3
 8012832:	f043 0302 	orr.w	r3, r3, #2
 8012836:	81a3      	strh	r3, [r4, #12]
 8012838:	e7e2      	b.n	8012800 <__smakebuf_r+0xc>
 801283a:	89a3      	ldrh	r3, [r4, #12]
 801283c:	6020      	str	r0, [r4, #0]
 801283e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012842:	81a3      	strh	r3, [r4, #12]
 8012844:	9b01      	ldr	r3, [sp, #4]
 8012846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801284a:	b15b      	cbz	r3, 8012864 <__smakebuf_r+0x70>
 801284c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012850:	4630      	mov	r0, r6
 8012852:	f000 f81d 	bl	8012890 <_isatty_r>
 8012856:	b128      	cbz	r0, 8012864 <__smakebuf_r+0x70>
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	f023 0303 	bic.w	r3, r3, #3
 801285e:	f043 0301 	orr.w	r3, r3, #1
 8012862:	81a3      	strh	r3, [r4, #12]
 8012864:	89a3      	ldrh	r3, [r4, #12]
 8012866:	431d      	orrs	r5, r3
 8012868:	81a5      	strh	r5, [r4, #12]
 801286a:	e7cf      	b.n	801280c <__smakebuf_r+0x18>

0801286c <_fstat_r>:
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	4d07      	ldr	r5, [pc, #28]	@ (801288c <_fstat_r+0x20>)
 8012870:	2300      	movs	r3, #0
 8012872:	4604      	mov	r4, r0
 8012874:	4608      	mov	r0, r1
 8012876:	4611      	mov	r1, r2
 8012878:	602b      	str	r3, [r5, #0]
 801287a:	f7ee fde7 	bl	800144c <_fstat>
 801287e:	1c43      	adds	r3, r0, #1
 8012880:	d102      	bne.n	8012888 <_fstat_r+0x1c>
 8012882:	682b      	ldr	r3, [r5, #0]
 8012884:	b103      	cbz	r3, 8012888 <_fstat_r+0x1c>
 8012886:	6023      	str	r3, [r4, #0]
 8012888:	bd38      	pop	{r3, r4, r5, pc}
 801288a:	bf00      	nop
 801288c:	2400db54 	.word	0x2400db54

08012890 <_isatty_r>:
 8012890:	b538      	push	{r3, r4, r5, lr}
 8012892:	4d06      	ldr	r5, [pc, #24]	@ (80128ac <_isatty_r+0x1c>)
 8012894:	2300      	movs	r3, #0
 8012896:	4604      	mov	r4, r0
 8012898:	4608      	mov	r0, r1
 801289a:	602b      	str	r3, [r5, #0]
 801289c:	f7ee fde6 	bl	800146c <_isatty>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d102      	bne.n	80128aa <_isatty_r+0x1a>
 80128a4:	682b      	ldr	r3, [r5, #0]
 80128a6:	b103      	cbz	r3, 80128aa <_isatty_r+0x1a>
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	2400db54 	.word	0x2400db54

080128b0 <_sbrk_r>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	4d06      	ldr	r5, [pc, #24]	@ (80128cc <_sbrk_r+0x1c>)
 80128b4:	2300      	movs	r3, #0
 80128b6:	4604      	mov	r4, r0
 80128b8:	4608      	mov	r0, r1
 80128ba:	602b      	str	r3, [r5, #0]
 80128bc:	f7ee fdee 	bl	800149c <_sbrk>
 80128c0:	1c43      	adds	r3, r0, #1
 80128c2:	d102      	bne.n	80128ca <_sbrk_r+0x1a>
 80128c4:	682b      	ldr	r3, [r5, #0]
 80128c6:	b103      	cbz	r3, 80128ca <_sbrk_r+0x1a>
 80128c8:	6023      	str	r3, [r4, #0]
 80128ca:	bd38      	pop	{r3, r4, r5, pc}
 80128cc:	2400db54 	.word	0x2400db54

080128d0 <__assert_func>:
 80128d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128d2:	4614      	mov	r4, r2
 80128d4:	461a      	mov	r2, r3
 80128d6:	4b09      	ldr	r3, [pc, #36]	@ (80128fc <__assert_func+0x2c>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	4605      	mov	r5, r0
 80128dc:	68d8      	ldr	r0, [r3, #12]
 80128de:	b14c      	cbz	r4, 80128f4 <__assert_func+0x24>
 80128e0:	4b07      	ldr	r3, [pc, #28]	@ (8012900 <__assert_func+0x30>)
 80128e2:	9100      	str	r1, [sp, #0]
 80128e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128e8:	4906      	ldr	r1, [pc, #24]	@ (8012904 <__assert_func+0x34>)
 80128ea:	462b      	mov	r3, r5
 80128ec:	f000 f842 	bl	8012974 <fiprintf>
 80128f0:	f000 f852 	bl	8012998 <abort>
 80128f4:	4b04      	ldr	r3, [pc, #16]	@ (8012908 <__assert_func+0x38>)
 80128f6:	461c      	mov	r4, r3
 80128f8:	e7f3      	b.n	80128e2 <__assert_func+0x12>
 80128fa:	bf00      	nop
 80128fc:	24000020 	.word	0x24000020
 8012900:	08012f74 	.word	0x08012f74
 8012904:	08012f81 	.word	0x08012f81
 8012908:	08012faf 	.word	0x08012faf

0801290c <_calloc_r>:
 801290c:	b570      	push	{r4, r5, r6, lr}
 801290e:	fba1 5402 	umull	r5, r4, r1, r2
 8012912:	b934      	cbnz	r4, 8012922 <_calloc_r+0x16>
 8012914:	4629      	mov	r1, r5
 8012916:	f7ff fa95 	bl	8011e44 <_malloc_r>
 801291a:	4606      	mov	r6, r0
 801291c:	b928      	cbnz	r0, 801292a <_calloc_r+0x1e>
 801291e:	4630      	mov	r0, r6
 8012920:	bd70      	pop	{r4, r5, r6, pc}
 8012922:	220c      	movs	r2, #12
 8012924:	6002      	str	r2, [r0, #0]
 8012926:	2600      	movs	r6, #0
 8012928:	e7f9      	b.n	801291e <_calloc_r+0x12>
 801292a:	462a      	mov	r2, r5
 801292c:	4621      	mov	r1, r4
 801292e:	f7fe fb43 	bl	8010fb8 <memset>
 8012932:	e7f4      	b.n	801291e <_calloc_r+0x12>

08012934 <__ascii_mbtowc>:
 8012934:	b082      	sub	sp, #8
 8012936:	b901      	cbnz	r1, 801293a <__ascii_mbtowc+0x6>
 8012938:	a901      	add	r1, sp, #4
 801293a:	b142      	cbz	r2, 801294e <__ascii_mbtowc+0x1a>
 801293c:	b14b      	cbz	r3, 8012952 <__ascii_mbtowc+0x1e>
 801293e:	7813      	ldrb	r3, [r2, #0]
 8012940:	600b      	str	r3, [r1, #0]
 8012942:	7812      	ldrb	r2, [r2, #0]
 8012944:	1e10      	subs	r0, r2, #0
 8012946:	bf18      	it	ne
 8012948:	2001      	movne	r0, #1
 801294a:	b002      	add	sp, #8
 801294c:	4770      	bx	lr
 801294e:	4610      	mov	r0, r2
 8012950:	e7fb      	b.n	801294a <__ascii_mbtowc+0x16>
 8012952:	f06f 0001 	mvn.w	r0, #1
 8012956:	e7f8      	b.n	801294a <__ascii_mbtowc+0x16>

08012958 <__ascii_wctomb>:
 8012958:	4603      	mov	r3, r0
 801295a:	4608      	mov	r0, r1
 801295c:	b141      	cbz	r1, 8012970 <__ascii_wctomb+0x18>
 801295e:	2aff      	cmp	r2, #255	@ 0xff
 8012960:	d904      	bls.n	801296c <__ascii_wctomb+0x14>
 8012962:	228a      	movs	r2, #138	@ 0x8a
 8012964:	601a      	str	r2, [r3, #0]
 8012966:	f04f 30ff 	mov.w	r0, #4294967295
 801296a:	4770      	bx	lr
 801296c:	700a      	strb	r2, [r1, #0]
 801296e:	2001      	movs	r0, #1
 8012970:	4770      	bx	lr
	...

08012974 <fiprintf>:
 8012974:	b40e      	push	{r1, r2, r3}
 8012976:	b503      	push	{r0, r1, lr}
 8012978:	4601      	mov	r1, r0
 801297a:	ab03      	add	r3, sp, #12
 801297c:	4805      	ldr	r0, [pc, #20]	@ (8012994 <fiprintf+0x20>)
 801297e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012982:	6800      	ldr	r0, [r0, #0]
 8012984:	9301      	str	r3, [sp, #4]
 8012986:	f000 f837 	bl	80129f8 <_vfiprintf_r>
 801298a:	b002      	add	sp, #8
 801298c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012990:	b003      	add	sp, #12
 8012992:	4770      	bx	lr
 8012994:	24000020 	.word	0x24000020

08012998 <abort>:
 8012998:	b508      	push	{r3, lr}
 801299a:	2006      	movs	r0, #6
 801299c:	f000 f96c 	bl	8012c78 <raise>
 80129a0:	2001      	movs	r0, #1
 80129a2:	f7ee fd03 	bl	80013ac <_exit>

080129a6 <__sfputc_r>:
 80129a6:	6893      	ldr	r3, [r2, #8]
 80129a8:	3b01      	subs	r3, #1
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	b410      	push	{r4}
 80129ae:	6093      	str	r3, [r2, #8]
 80129b0:	da08      	bge.n	80129c4 <__sfputc_r+0x1e>
 80129b2:	6994      	ldr	r4, [r2, #24]
 80129b4:	42a3      	cmp	r3, r4
 80129b6:	db01      	blt.n	80129bc <__sfputc_r+0x16>
 80129b8:	290a      	cmp	r1, #10
 80129ba:	d103      	bne.n	80129c4 <__sfputc_r+0x1e>
 80129bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129c0:	f7fe ba65 	b.w	8010e8e <__swbuf_r>
 80129c4:	6813      	ldr	r3, [r2, #0]
 80129c6:	1c58      	adds	r0, r3, #1
 80129c8:	6010      	str	r0, [r2, #0]
 80129ca:	7019      	strb	r1, [r3, #0]
 80129cc:	4608      	mov	r0, r1
 80129ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129d2:	4770      	bx	lr

080129d4 <__sfputs_r>:
 80129d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d6:	4606      	mov	r6, r0
 80129d8:	460f      	mov	r7, r1
 80129da:	4614      	mov	r4, r2
 80129dc:	18d5      	adds	r5, r2, r3
 80129de:	42ac      	cmp	r4, r5
 80129e0:	d101      	bne.n	80129e6 <__sfputs_r+0x12>
 80129e2:	2000      	movs	r0, #0
 80129e4:	e007      	b.n	80129f6 <__sfputs_r+0x22>
 80129e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129ea:	463a      	mov	r2, r7
 80129ec:	4630      	mov	r0, r6
 80129ee:	f7ff ffda 	bl	80129a6 <__sfputc_r>
 80129f2:	1c43      	adds	r3, r0, #1
 80129f4:	d1f3      	bne.n	80129de <__sfputs_r+0xa>
 80129f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080129f8 <_vfiprintf_r>:
 80129f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129fc:	460d      	mov	r5, r1
 80129fe:	b09d      	sub	sp, #116	@ 0x74
 8012a00:	4614      	mov	r4, r2
 8012a02:	4698      	mov	r8, r3
 8012a04:	4606      	mov	r6, r0
 8012a06:	b118      	cbz	r0, 8012a10 <_vfiprintf_r+0x18>
 8012a08:	6a03      	ldr	r3, [r0, #32]
 8012a0a:	b90b      	cbnz	r3, 8012a10 <_vfiprintf_r+0x18>
 8012a0c:	f7fe f9c6 	bl	8010d9c <__sinit>
 8012a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a12:	07d9      	lsls	r1, r3, #31
 8012a14:	d405      	bmi.n	8012a22 <_vfiprintf_r+0x2a>
 8012a16:	89ab      	ldrh	r3, [r5, #12]
 8012a18:	059a      	lsls	r2, r3, #22
 8012a1a:	d402      	bmi.n	8012a22 <_vfiprintf_r+0x2a>
 8012a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a1e:	f7fe fba6 	bl	801116e <__retarget_lock_acquire_recursive>
 8012a22:	89ab      	ldrh	r3, [r5, #12]
 8012a24:	071b      	lsls	r3, r3, #28
 8012a26:	d501      	bpl.n	8012a2c <_vfiprintf_r+0x34>
 8012a28:	692b      	ldr	r3, [r5, #16]
 8012a2a:	b99b      	cbnz	r3, 8012a54 <_vfiprintf_r+0x5c>
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7fe fa6c 	bl	8010f0c <__swsetup_r>
 8012a34:	b170      	cbz	r0, 8012a54 <_vfiprintf_r+0x5c>
 8012a36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a38:	07dc      	lsls	r4, r3, #31
 8012a3a:	d504      	bpl.n	8012a46 <_vfiprintf_r+0x4e>
 8012a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a40:	b01d      	add	sp, #116	@ 0x74
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	89ab      	ldrh	r3, [r5, #12]
 8012a48:	0598      	lsls	r0, r3, #22
 8012a4a:	d4f7      	bmi.n	8012a3c <_vfiprintf_r+0x44>
 8012a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a4e:	f7fe fb8f 	bl	8011170 <__retarget_lock_release_recursive>
 8012a52:	e7f3      	b.n	8012a3c <_vfiprintf_r+0x44>
 8012a54:	2300      	movs	r3, #0
 8012a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a58:	2320      	movs	r3, #32
 8012a5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a62:	2330      	movs	r3, #48	@ 0x30
 8012a64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012c14 <_vfiprintf_r+0x21c>
 8012a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012a6c:	f04f 0901 	mov.w	r9, #1
 8012a70:	4623      	mov	r3, r4
 8012a72:	469a      	mov	sl, r3
 8012a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a78:	b10a      	cbz	r2, 8012a7e <_vfiprintf_r+0x86>
 8012a7a:	2a25      	cmp	r2, #37	@ 0x25
 8012a7c:	d1f9      	bne.n	8012a72 <_vfiprintf_r+0x7a>
 8012a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8012a82:	d00b      	beq.n	8012a9c <_vfiprintf_r+0xa4>
 8012a84:	465b      	mov	r3, fp
 8012a86:	4622      	mov	r2, r4
 8012a88:	4629      	mov	r1, r5
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	f7ff ffa2 	bl	80129d4 <__sfputs_r>
 8012a90:	3001      	adds	r0, #1
 8012a92:	f000 80a7 	beq.w	8012be4 <_vfiprintf_r+0x1ec>
 8012a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a98:	445a      	add	r2, fp
 8012a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	f000 809f 	beq.w	8012be4 <_vfiprintf_r+0x1ec>
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8012aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ab0:	f10a 0a01 	add.w	sl, sl, #1
 8012ab4:	9304      	str	r3, [sp, #16]
 8012ab6:	9307      	str	r3, [sp, #28]
 8012ab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012abc:	931a      	str	r3, [sp, #104]	@ 0x68
 8012abe:	4654      	mov	r4, sl
 8012ac0:	2205      	movs	r2, #5
 8012ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ac6:	4853      	ldr	r0, [pc, #332]	@ (8012c14 <_vfiprintf_r+0x21c>)
 8012ac8:	f7ed fc0a 	bl	80002e0 <memchr>
 8012acc:	9a04      	ldr	r2, [sp, #16]
 8012ace:	b9d8      	cbnz	r0, 8012b08 <_vfiprintf_r+0x110>
 8012ad0:	06d1      	lsls	r1, r2, #27
 8012ad2:	bf44      	itt	mi
 8012ad4:	2320      	movmi	r3, #32
 8012ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ada:	0713      	lsls	r3, r2, #28
 8012adc:	bf44      	itt	mi
 8012ade:	232b      	movmi	r3, #43	@ 0x2b
 8012ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012aea:	d015      	beq.n	8012b18 <_vfiprintf_r+0x120>
 8012aec:	9a07      	ldr	r2, [sp, #28]
 8012aee:	4654      	mov	r4, sl
 8012af0:	2000      	movs	r0, #0
 8012af2:	f04f 0c0a 	mov.w	ip, #10
 8012af6:	4621      	mov	r1, r4
 8012af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012afc:	3b30      	subs	r3, #48	@ 0x30
 8012afe:	2b09      	cmp	r3, #9
 8012b00:	d94b      	bls.n	8012b9a <_vfiprintf_r+0x1a2>
 8012b02:	b1b0      	cbz	r0, 8012b32 <_vfiprintf_r+0x13a>
 8012b04:	9207      	str	r2, [sp, #28]
 8012b06:	e014      	b.n	8012b32 <_vfiprintf_r+0x13a>
 8012b08:	eba0 0308 	sub.w	r3, r0, r8
 8012b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8012b10:	4313      	orrs	r3, r2
 8012b12:	9304      	str	r3, [sp, #16]
 8012b14:	46a2      	mov	sl, r4
 8012b16:	e7d2      	b.n	8012abe <_vfiprintf_r+0xc6>
 8012b18:	9b03      	ldr	r3, [sp, #12]
 8012b1a:	1d19      	adds	r1, r3, #4
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	9103      	str	r1, [sp, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	bfbb      	ittet	lt
 8012b24:	425b      	neglt	r3, r3
 8012b26:	f042 0202 	orrlt.w	r2, r2, #2
 8012b2a:	9307      	strge	r3, [sp, #28]
 8012b2c:	9307      	strlt	r3, [sp, #28]
 8012b2e:	bfb8      	it	lt
 8012b30:	9204      	strlt	r2, [sp, #16]
 8012b32:	7823      	ldrb	r3, [r4, #0]
 8012b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b36:	d10a      	bne.n	8012b4e <_vfiprintf_r+0x156>
 8012b38:	7863      	ldrb	r3, [r4, #1]
 8012b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b3c:	d132      	bne.n	8012ba4 <_vfiprintf_r+0x1ac>
 8012b3e:	9b03      	ldr	r3, [sp, #12]
 8012b40:	1d1a      	adds	r2, r3, #4
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	9203      	str	r2, [sp, #12]
 8012b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012b4a:	3402      	adds	r4, #2
 8012b4c:	9305      	str	r3, [sp, #20]
 8012b4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012c24 <_vfiprintf_r+0x22c>
 8012b52:	7821      	ldrb	r1, [r4, #0]
 8012b54:	2203      	movs	r2, #3
 8012b56:	4650      	mov	r0, sl
 8012b58:	f7ed fbc2 	bl	80002e0 <memchr>
 8012b5c:	b138      	cbz	r0, 8012b6e <_vfiprintf_r+0x176>
 8012b5e:	9b04      	ldr	r3, [sp, #16]
 8012b60:	eba0 000a 	sub.w	r0, r0, sl
 8012b64:	2240      	movs	r2, #64	@ 0x40
 8012b66:	4082      	lsls	r2, r0
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	3401      	adds	r4, #1
 8012b6c:	9304      	str	r3, [sp, #16]
 8012b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b72:	4829      	ldr	r0, [pc, #164]	@ (8012c18 <_vfiprintf_r+0x220>)
 8012b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b78:	2206      	movs	r2, #6
 8012b7a:	f7ed fbb1 	bl	80002e0 <memchr>
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d03f      	beq.n	8012c02 <_vfiprintf_r+0x20a>
 8012b82:	4b26      	ldr	r3, [pc, #152]	@ (8012c1c <_vfiprintf_r+0x224>)
 8012b84:	bb1b      	cbnz	r3, 8012bce <_vfiprintf_r+0x1d6>
 8012b86:	9b03      	ldr	r3, [sp, #12]
 8012b88:	3307      	adds	r3, #7
 8012b8a:	f023 0307 	bic.w	r3, r3, #7
 8012b8e:	3308      	adds	r3, #8
 8012b90:	9303      	str	r3, [sp, #12]
 8012b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b94:	443b      	add	r3, r7
 8012b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b98:	e76a      	b.n	8012a70 <_vfiprintf_r+0x78>
 8012b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	2001      	movs	r0, #1
 8012ba2:	e7a8      	b.n	8012af6 <_vfiprintf_r+0xfe>
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	3401      	adds	r4, #1
 8012ba8:	9305      	str	r3, [sp, #20]
 8012baa:	4619      	mov	r1, r3
 8012bac:	f04f 0c0a 	mov.w	ip, #10
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bb6:	3a30      	subs	r2, #48	@ 0x30
 8012bb8:	2a09      	cmp	r2, #9
 8012bba:	d903      	bls.n	8012bc4 <_vfiprintf_r+0x1cc>
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d0c6      	beq.n	8012b4e <_vfiprintf_r+0x156>
 8012bc0:	9105      	str	r1, [sp, #20]
 8012bc2:	e7c4      	b.n	8012b4e <_vfiprintf_r+0x156>
 8012bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012bc8:	4604      	mov	r4, r0
 8012bca:	2301      	movs	r3, #1
 8012bcc:	e7f0      	b.n	8012bb0 <_vfiprintf_r+0x1b8>
 8012bce:	ab03      	add	r3, sp, #12
 8012bd0:	9300      	str	r3, [sp, #0]
 8012bd2:	462a      	mov	r2, r5
 8012bd4:	4b12      	ldr	r3, [pc, #72]	@ (8012c20 <_vfiprintf_r+0x228>)
 8012bd6:	a904      	add	r1, sp, #16
 8012bd8:	4630      	mov	r0, r6
 8012bda:	f7fd fcad 	bl	8010538 <_printf_float>
 8012bde:	4607      	mov	r7, r0
 8012be0:	1c78      	adds	r0, r7, #1
 8012be2:	d1d6      	bne.n	8012b92 <_vfiprintf_r+0x19a>
 8012be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012be6:	07d9      	lsls	r1, r3, #31
 8012be8:	d405      	bmi.n	8012bf6 <_vfiprintf_r+0x1fe>
 8012bea:	89ab      	ldrh	r3, [r5, #12]
 8012bec:	059a      	lsls	r2, r3, #22
 8012bee:	d402      	bmi.n	8012bf6 <_vfiprintf_r+0x1fe>
 8012bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bf2:	f7fe fabd 	bl	8011170 <__retarget_lock_release_recursive>
 8012bf6:	89ab      	ldrh	r3, [r5, #12]
 8012bf8:	065b      	lsls	r3, r3, #25
 8012bfa:	f53f af1f 	bmi.w	8012a3c <_vfiprintf_r+0x44>
 8012bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c00:	e71e      	b.n	8012a40 <_vfiprintf_r+0x48>
 8012c02:	ab03      	add	r3, sp, #12
 8012c04:	9300      	str	r3, [sp, #0]
 8012c06:	462a      	mov	r2, r5
 8012c08:	4b05      	ldr	r3, [pc, #20]	@ (8012c20 <_vfiprintf_r+0x228>)
 8012c0a:	a904      	add	r1, sp, #16
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	f7fd ff1b 	bl	8010a48 <_printf_i>
 8012c12:	e7e4      	b.n	8012bde <_vfiprintf_r+0x1e6>
 8012c14:	08012fb0 	.word	0x08012fb0
 8012c18:	08012fba 	.word	0x08012fba
 8012c1c:	08010539 	.word	0x08010539
 8012c20:	080129d5 	.word	0x080129d5
 8012c24:	08012fb6 	.word	0x08012fb6

08012c28 <_raise_r>:
 8012c28:	291f      	cmp	r1, #31
 8012c2a:	b538      	push	{r3, r4, r5, lr}
 8012c2c:	4605      	mov	r5, r0
 8012c2e:	460c      	mov	r4, r1
 8012c30:	d904      	bls.n	8012c3c <_raise_r+0x14>
 8012c32:	2316      	movs	r3, #22
 8012c34:	6003      	str	r3, [r0, #0]
 8012c36:	f04f 30ff 	mov.w	r0, #4294967295
 8012c3a:	bd38      	pop	{r3, r4, r5, pc}
 8012c3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012c3e:	b112      	cbz	r2, 8012c46 <_raise_r+0x1e>
 8012c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c44:	b94b      	cbnz	r3, 8012c5a <_raise_r+0x32>
 8012c46:	4628      	mov	r0, r5
 8012c48:	f000 f830 	bl	8012cac <_getpid_r>
 8012c4c:	4622      	mov	r2, r4
 8012c4e:	4601      	mov	r1, r0
 8012c50:	4628      	mov	r0, r5
 8012c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c56:	f000 b817 	b.w	8012c88 <_kill_r>
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d00a      	beq.n	8012c74 <_raise_r+0x4c>
 8012c5e:	1c59      	adds	r1, r3, #1
 8012c60:	d103      	bne.n	8012c6a <_raise_r+0x42>
 8012c62:	2316      	movs	r3, #22
 8012c64:	6003      	str	r3, [r0, #0]
 8012c66:	2001      	movs	r0, #1
 8012c68:	e7e7      	b.n	8012c3a <_raise_r+0x12>
 8012c6a:	2100      	movs	r1, #0
 8012c6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012c70:	4620      	mov	r0, r4
 8012c72:	4798      	blx	r3
 8012c74:	2000      	movs	r0, #0
 8012c76:	e7e0      	b.n	8012c3a <_raise_r+0x12>

08012c78 <raise>:
 8012c78:	4b02      	ldr	r3, [pc, #8]	@ (8012c84 <raise+0xc>)
 8012c7a:	4601      	mov	r1, r0
 8012c7c:	6818      	ldr	r0, [r3, #0]
 8012c7e:	f7ff bfd3 	b.w	8012c28 <_raise_r>
 8012c82:	bf00      	nop
 8012c84:	24000020 	.word	0x24000020

08012c88 <_kill_r>:
 8012c88:	b538      	push	{r3, r4, r5, lr}
 8012c8a:	4d07      	ldr	r5, [pc, #28]	@ (8012ca8 <_kill_r+0x20>)
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	4604      	mov	r4, r0
 8012c90:	4608      	mov	r0, r1
 8012c92:	4611      	mov	r1, r2
 8012c94:	602b      	str	r3, [r5, #0]
 8012c96:	f7ee fb79 	bl	800138c <_kill>
 8012c9a:	1c43      	adds	r3, r0, #1
 8012c9c:	d102      	bne.n	8012ca4 <_kill_r+0x1c>
 8012c9e:	682b      	ldr	r3, [r5, #0]
 8012ca0:	b103      	cbz	r3, 8012ca4 <_kill_r+0x1c>
 8012ca2:	6023      	str	r3, [r4, #0]
 8012ca4:	bd38      	pop	{r3, r4, r5, pc}
 8012ca6:	bf00      	nop
 8012ca8:	2400db54 	.word	0x2400db54

08012cac <_getpid_r>:
 8012cac:	f7ee bb66 	b.w	800137c <_getpid>

08012cb0 <_init>:
 8012cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb2:	bf00      	nop
 8012cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cb6:	bc08      	pop	{r3}
 8012cb8:	469e      	mov	lr, r3
 8012cba:	4770      	bx	lr

08012cbc <_fini>:
 8012cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cbe:	bf00      	nop
 8012cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cc2:	bc08      	pop	{r3}
 8012cc4:	469e      	mov	lr, r3
 8012cc6:	4770      	bx	lr
